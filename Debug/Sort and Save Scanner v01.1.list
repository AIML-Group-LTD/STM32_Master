
Sort and Save Scanner v01.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004880  08004880  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004880  08004880  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004880  08004880  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000080  08004908  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004908  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087c3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019e0  00000000  00000000  0002886b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  0002a250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eee5  00000000  00000000  0002b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009243  00000000  00000000  0003a02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054062  00000000  00000000  00043270  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000972d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  00097350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047b4 	.word	0x080047b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080047b4 	.word	0x080047b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dsub>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	000c      	movs	r4, r1
 800022c:	0309      	lsls	r1, r1, #12
 800022e:	b5e0      	push	{r5, r6, r7, lr}
 8000230:	0a49      	lsrs	r1, r1, #9
 8000232:	0f46      	lsrs	r6, r0, #29
 8000234:	005f      	lsls	r7, r3, #1
 8000236:	4331      	orrs	r1, r6
 8000238:	031e      	lsls	r6, r3, #12
 800023a:	0fdb      	lsrs	r3, r3, #31
 800023c:	0a76      	lsrs	r6, r6, #9
 800023e:	469b      	mov	fp, r3
 8000240:	0f53      	lsrs	r3, r2, #29
 8000242:	4333      	orrs	r3, r6
 8000244:	4ec8      	ldr	r6, [pc, #800]	; (8000568 <__aeabi_dsub+0x348>)
 8000246:	0065      	lsls	r5, r4, #1
 8000248:	00c0      	lsls	r0, r0, #3
 800024a:	0fe4      	lsrs	r4, r4, #31
 800024c:	00d2      	lsls	r2, r2, #3
 800024e:	0d6d      	lsrs	r5, r5, #21
 8000250:	46a2      	mov	sl, r4
 8000252:	4681      	mov	r9, r0
 8000254:	0d7f      	lsrs	r7, r7, #21
 8000256:	469c      	mov	ip, r3
 8000258:	4690      	mov	r8, r2
 800025a:	42b7      	cmp	r7, r6
 800025c:	d100      	bne.n	8000260 <__aeabi_dsub+0x40>
 800025e:	e0b9      	b.n	80003d4 <__aeabi_dsub+0x1b4>
 8000260:	465b      	mov	r3, fp
 8000262:	2601      	movs	r6, #1
 8000264:	4073      	eors	r3, r6
 8000266:	469b      	mov	fp, r3
 8000268:	1bee      	subs	r6, r5, r7
 800026a:	45a3      	cmp	fp, r4
 800026c:	d100      	bne.n	8000270 <__aeabi_dsub+0x50>
 800026e:	e083      	b.n	8000378 <__aeabi_dsub+0x158>
 8000270:	2e00      	cmp	r6, #0
 8000272:	dd63      	ble.n	800033c <__aeabi_dsub+0x11c>
 8000274:	2f00      	cmp	r7, #0
 8000276:	d000      	beq.n	800027a <__aeabi_dsub+0x5a>
 8000278:	e0b1      	b.n	80003de <__aeabi_dsub+0x1be>
 800027a:	4663      	mov	r3, ip
 800027c:	4313      	orrs	r3, r2
 800027e:	d100      	bne.n	8000282 <__aeabi_dsub+0x62>
 8000280:	e123      	b.n	80004ca <__aeabi_dsub+0x2aa>
 8000282:	1e73      	subs	r3, r6, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d000      	beq.n	800028a <__aeabi_dsub+0x6a>
 8000288:	e1ba      	b.n	8000600 <__aeabi_dsub+0x3e0>
 800028a:	1a86      	subs	r6, r0, r2
 800028c:	4663      	mov	r3, ip
 800028e:	42b0      	cmp	r0, r6
 8000290:	4180      	sbcs	r0, r0
 8000292:	2501      	movs	r5, #1
 8000294:	1ac9      	subs	r1, r1, r3
 8000296:	4240      	negs	r0, r0
 8000298:	1a09      	subs	r1, r1, r0
 800029a:	020b      	lsls	r3, r1, #8
 800029c:	d400      	bmi.n	80002a0 <__aeabi_dsub+0x80>
 800029e:	e147      	b.n	8000530 <__aeabi_dsub+0x310>
 80002a0:	0249      	lsls	r1, r1, #9
 80002a2:	0a4b      	lsrs	r3, r1, #9
 80002a4:	4698      	mov	r8, r3
 80002a6:	4643      	mov	r3, r8
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d100      	bne.n	80002ae <__aeabi_dsub+0x8e>
 80002ac:	e189      	b.n	80005c2 <__aeabi_dsub+0x3a2>
 80002ae:	4640      	mov	r0, r8
 80002b0:	f000 fb30 	bl	8000914 <__clzsi2>
 80002b4:	0003      	movs	r3, r0
 80002b6:	3b08      	subs	r3, #8
 80002b8:	2b1f      	cmp	r3, #31
 80002ba:	dd00      	ble.n	80002be <__aeabi_dsub+0x9e>
 80002bc:	e17c      	b.n	80005b8 <__aeabi_dsub+0x398>
 80002be:	2220      	movs	r2, #32
 80002c0:	0030      	movs	r0, r6
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	4641      	mov	r1, r8
 80002c6:	40d0      	lsrs	r0, r2
 80002c8:	4099      	lsls	r1, r3
 80002ca:	0002      	movs	r2, r0
 80002cc:	409e      	lsls	r6, r3
 80002ce:	430a      	orrs	r2, r1
 80002d0:	429d      	cmp	r5, r3
 80002d2:	dd00      	ble.n	80002d6 <__aeabi_dsub+0xb6>
 80002d4:	e16a      	b.n	80005ac <__aeabi_dsub+0x38c>
 80002d6:	1b5d      	subs	r5, r3, r5
 80002d8:	1c6b      	adds	r3, r5, #1
 80002da:	2b1f      	cmp	r3, #31
 80002dc:	dd00      	ble.n	80002e0 <__aeabi_dsub+0xc0>
 80002de:	e194      	b.n	800060a <__aeabi_dsub+0x3ea>
 80002e0:	2120      	movs	r1, #32
 80002e2:	0010      	movs	r0, r2
 80002e4:	0035      	movs	r5, r6
 80002e6:	1ac9      	subs	r1, r1, r3
 80002e8:	408e      	lsls	r6, r1
 80002ea:	40da      	lsrs	r2, r3
 80002ec:	4088      	lsls	r0, r1
 80002ee:	40dd      	lsrs	r5, r3
 80002f0:	1e71      	subs	r1, r6, #1
 80002f2:	418e      	sbcs	r6, r1
 80002f4:	0011      	movs	r1, r2
 80002f6:	2207      	movs	r2, #7
 80002f8:	4328      	orrs	r0, r5
 80002fa:	2500      	movs	r5, #0
 80002fc:	4306      	orrs	r6, r0
 80002fe:	4032      	ands	r2, r6
 8000300:	2a00      	cmp	r2, #0
 8000302:	d009      	beq.n	8000318 <__aeabi_dsub+0xf8>
 8000304:	230f      	movs	r3, #15
 8000306:	4033      	ands	r3, r6
 8000308:	2b04      	cmp	r3, #4
 800030a:	d005      	beq.n	8000318 <__aeabi_dsub+0xf8>
 800030c:	1d33      	adds	r3, r6, #4
 800030e:	42b3      	cmp	r3, r6
 8000310:	41b6      	sbcs	r6, r6
 8000312:	4276      	negs	r6, r6
 8000314:	1989      	adds	r1, r1, r6
 8000316:	001e      	movs	r6, r3
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	d400      	bmi.n	800031e <__aeabi_dsub+0xfe>
 800031c:	e23d      	b.n	800079a <__aeabi_dsub+0x57a>
 800031e:	1c6a      	adds	r2, r5, #1
 8000320:	4b91      	ldr	r3, [pc, #580]	; (8000568 <__aeabi_dsub+0x348>)
 8000322:	0555      	lsls	r5, r2, #21
 8000324:	0d6d      	lsrs	r5, r5, #21
 8000326:	429a      	cmp	r2, r3
 8000328:	d100      	bne.n	800032c <__aeabi_dsub+0x10c>
 800032a:	e119      	b.n	8000560 <__aeabi_dsub+0x340>
 800032c:	4a8f      	ldr	r2, [pc, #572]	; (800056c <__aeabi_dsub+0x34c>)
 800032e:	08f6      	lsrs	r6, r6, #3
 8000330:	400a      	ands	r2, r1
 8000332:	0757      	lsls	r7, r2, #29
 8000334:	0252      	lsls	r2, r2, #9
 8000336:	4337      	orrs	r7, r6
 8000338:	0b12      	lsrs	r2, r2, #12
 800033a:	e09b      	b.n	8000474 <__aeabi_dsub+0x254>
 800033c:	2e00      	cmp	r6, #0
 800033e:	d000      	beq.n	8000342 <__aeabi_dsub+0x122>
 8000340:	e0c5      	b.n	80004ce <__aeabi_dsub+0x2ae>
 8000342:	1c6e      	adds	r6, r5, #1
 8000344:	0576      	lsls	r6, r6, #21
 8000346:	0d76      	lsrs	r6, r6, #21
 8000348:	2e01      	cmp	r6, #1
 800034a:	dc00      	bgt.n	800034e <__aeabi_dsub+0x12e>
 800034c:	e148      	b.n	80005e0 <__aeabi_dsub+0x3c0>
 800034e:	4667      	mov	r7, ip
 8000350:	1a86      	subs	r6, r0, r2
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	42b0      	cmp	r0, r6
 8000356:	41bf      	sbcs	r7, r7
 8000358:	427f      	negs	r7, r7
 800035a:	46b8      	mov	r8, r7
 800035c:	001f      	movs	r7, r3
 800035e:	4643      	mov	r3, r8
 8000360:	1aff      	subs	r7, r7, r3
 8000362:	003b      	movs	r3, r7
 8000364:	46b8      	mov	r8, r7
 8000366:	021b      	lsls	r3, r3, #8
 8000368:	d500      	bpl.n	800036c <__aeabi_dsub+0x14c>
 800036a:	e15f      	b.n	800062c <__aeabi_dsub+0x40c>
 800036c:	4337      	orrs	r7, r6
 800036e:	d19a      	bne.n	80002a6 <__aeabi_dsub+0x86>
 8000370:	2200      	movs	r2, #0
 8000372:	2400      	movs	r4, #0
 8000374:	2500      	movs	r5, #0
 8000376:	e079      	b.n	800046c <__aeabi_dsub+0x24c>
 8000378:	2e00      	cmp	r6, #0
 800037a:	dc00      	bgt.n	800037e <__aeabi_dsub+0x15e>
 800037c:	e0fa      	b.n	8000574 <__aeabi_dsub+0x354>
 800037e:	2f00      	cmp	r7, #0
 8000380:	d100      	bne.n	8000384 <__aeabi_dsub+0x164>
 8000382:	e08d      	b.n	80004a0 <__aeabi_dsub+0x280>
 8000384:	4b78      	ldr	r3, [pc, #480]	; (8000568 <__aeabi_dsub+0x348>)
 8000386:	429d      	cmp	r5, r3
 8000388:	d067      	beq.n	800045a <__aeabi_dsub+0x23a>
 800038a:	2380      	movs	r3, #128	; 0x80
 800038c:	4667      	mov	r7, ip
 800038e:	041b      	lsls	r3, r3, #16
 8000390:	431f      	orrs	r7, r3
 8000392:	46bc      	mov	ip, r7
 8000394:	2e38      	cmp	r6, #56	; 0x38
 8000396:	dc00      	bgt.n	800039a <__aeabi_dsub+0x17a>
 8000398:	e152      	b.n	8000640 <__aeabi_dsub+0x420>
 800039a:	4663      	mov	r3, ip
 800039c:	4313      	orrs	r3, r2
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	4193      	sbcs	r3, r2
 80003a2:	181e      	adds	r6, r3, r0
 80003a4:	4286      	cmp	r6, r0
 80003a6:	4180      	sbcs	r0, r0
 80003a8:	4240      	negs	r0, r0
 80003aa:	1809      	adds	r1, r1, r0
 80003ac:	020b      	lsls	r3, r1, #8
 80003ae:	d400      	bmi.n	80003b2 <__aeabi_dsub+0x192>
 80003b0:	e0be      	b.n	8000530 <__aeabi_dsub+0x310>
 80003b2:	4b6d      	ldr	r3, [pc, #436]	; (8000568 <__aeabi_dsub+0x348>)
 80003b4:	3501      	adds	r5, #1
 80003b6:	429d      	cmp	r5, r3
 80003b8:	d100      	bne.n	80003bc <__aeabi_dsub+0x19c>
 80003ba:	e0d2      	b.n	8000562 <__aeabi_dsub+0x342>
 80003bc:	4a6b      	ldr	r2, [pc, #428]	; (800056c <__aeabi_dsub+0x34c>)
 80003be:	0873      	lsrs	r3, r6, #1
 80003c0:	400a      	ands	r2, r1
 80003c2:	2101      	movs	r1, #1
 80003c4:	400e      	ands	r6, r1
 80003c6:	431e      	orrs	r6, r3
 80003c8:	0851      	lsrs	r1, r2, #1
 80003ca:	07d3      	lsls	r3, r2, #31
 80003cc:	2207      	movs	r2, #7
 80003ce:	431e      	orrs	r6, r3
 80003d0:	4032      	ands	r2, r6
 80003d2:	e795      	b.n	8000300 <__aeabi_dsub+0xe0>
 80003d4:	001e      	movs	r6, r3
 80003d6:	4316      	orrs	r6, r2
 80003d8:	d000      	beq.n	80003dc <__aeabi_dsub+0x1bc>
 80003da:	e745      	b.n	8000268 <__aeabi_dsub+0x48>
 80003dc:	e740      	b.n	8000260 <__aeabi_dsub+0x40>
 80003de:	4b62      	ldr	r3, [pc, #392]	; (8000568 <__aeabi_dsub+0x348>)
 80003e0:	429d      	cmp	r5, r3
 80003e2:	d03a      	beq.n	800045a <__aeabi_dsub+0x23a>
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	4667      	mov	r7, ip
 80003e8:	041b      	lsls	r3, r3, #16
 80003ea:	431f      	orrs	r7, r3
 80003ec:	46bc      	mov	ip, r7
 80003ee:	2e38      	cmp	r6, #56	; 0x38
 80003f0:	dd00      	ble.n	80003f4 <__aeabi_dsub+0x1d4>
 80003f2:	e0eb      	b.n	80005cc <__aeabi_dsub+0x3ac>
 80003f4:	2e1f      	cmp	r6, #31
 80003f6:	dc00      	bgt.n	80003fa <__aeabi_dsub+0x1da>
 80003f8:	e13a      	b.n	8000670 <__aeabi_dsub+0x450>
 80003fa:	0033      	movs	r3, r6
 80003fc:	4667      	mov	r7, ip
 80003fe:	3b20      	subs	r3, #32
 8000400:	40df      	lsrs	r7, r3
 8000402:	003b      	movs	r3, r7
 8000404:	2e20      	cmp	r6, #32
 8000406:	d005      	beq.n	8000414 <__aeabi_dsub+0x1f4>
 8000408:	2740      	movs	r7, #64	; 0x40
 800040a:	1bbf      	subs	r7, r7, r6
 800040c:	4666      	mov	r6, ip
 800040e:	40be      	lsls	r6, r7
 8000410:	4332      	orrs	r2, r6
 8000412:	4690      	mov	r8, r2
 8000414:	4646      	mov	r6, r8
 8000416:	1e72      	subs	r2, r6, #1
 8000418:	4196      	sbcs	r6, r2
 800041a:	4333      	orrs	r3, r6
 800041c:	e0da      	b.n	80005d4 <__aeabi_dsub+0x3b4>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_dsub+0x204>
 8000422:	e214      	b.n	800084e <__aeabi_dsub+0x62e>
 8000424:	4663      	mov	r3, ip
 8000426:	4313      	orrs	r3, r2
 8000428:	d100      	bne.n	800042c <__aeabi_dsub+0x20c>
 800042a:	e168      	b.n	80006fe <__aeabi_dsub+0x4de>
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	074e      	lsls	r6, r1, #29
 8000430:	08c0      	lsrs	r0, r0, #3
 8000432:	08c9      	lsrs	r1, r1, #3
 8000434:	031b      	lsls	r3, r3, #12
 8000436:	4306      	orrs	r6, r0
 8000438:	4219      	tst	r1, r3
 800043a:	d008      	beq.n	800044e <__aeabi_dsub+0x22e>
 800043c:	4660      	mov	r0, ip
 800043e:	08c0      	lsrs	r0, r0, #3
 8000440:	4218      	tst	r0, r3
 8000442:	d104      	bne.n	800044e <__aeabi_dsub+0x22e>
 8000444:	4663      	mov	r3, ip
 8000446:	0001      	movs	r1, r0
 8000448:	08d2      	lsrs	r2, r2, #3
 800044a:	075e      	lsls	r6, r3, #29
 800044c:	4316      	orrs	r6, r2
 800044e:	00f3      	lsls	r3, r6, #3
 8000450:	4699      	mov	r9, r3
 8000452:	00c9      	lsls	r1, r1, #3
 8000454:	0f72      	lsrs	r2, r6, #29
 8000456:	4d44      	ldr	r5, [pc, #272]	; (8000568 <__aeabi_dsub+0x348>)
 8000458:	4311      	orrs	r1, r2
 800045a:	464b      	mov	r3, r9
 800045c:	08de      	lsrs	r6, r3, #3
 800045e:	4b42      	ldr	r3, [pc, #264]	; (8000568 <__aeabi_dsub+0x348>)
 8000460:	074f      	lsls	r7, r1, #29
 8000462:	4337      	orrs	r7, r6
 8000464:	08ca      	lsrs	r2, r1, #3
 8000466:	429d      	cmp	r5, r3
 8000468:	d100      	bne.n	800046c <__aeabi_dsub+0x24c>
 800046a:	e06e      	b.n	800054a <__aeabi_dsub+0x32a>
 800046c:	0312      	lsls	r2, r2, #12
 800046e:	056d      	lsls	r5, r5, #21
 8000470:	0b12      	lsrs	r2, r2, #12
 8000472:	0d6d      	lsrs	r5, r5, #21
 8000474:	2100      	movs	r1, #0
 8000476:	0312      	lsls	r2, r2, #12
 8000478:	0b13      	lsrs	r3, r2, #12
 800047a:	0d0a      	lsrs	r2, r1, #20
 800047c:	0512      	lsls	r2, r2, #20
 800047e:	431a      	orrs	r2, r3
 8000480:	4b3b      	ldr	r3, [pc, #236]	; (8000570 <__aeabi_dsub+0x350>)
 8000482:	052d      	lsls	r5, r5, #20
 8000484:	4013      	ands	r3, r2
 8000486:	432b      	orrs	r3, r5
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	07e4      	lsls	r4, r4, #31
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	4323      	orrs	r3, r4
 8000490:	0038      	movs	r0, r7
 8000492:	0019      	movs	r1, r3
 8000494:	bc3c      	pop	{r2, r3, r4, r5}
 8000496:	4690      	mov	r8, r2
 8000498:	4699      	mov	r9, r3
 800049a:	46a2      	mov	sl, r4
 800049c:	46ab      	mov	fp, r5
 800049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004a0:	4663      	mov	r3, ip
 80004a2:	4313      	orrs	r3, r2
 80004a4:	d011      	beq.n	80004ca <__aeabi_dsub+0x2aa>
 80004a6:	1e73      	subs	r3, r6, #1
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d000      	beq.n	80004ae <__aeabi_dsub+0x28e>
 80004ac:	e107      	b.n	80006be <__aeabi_dsub+0x49e>
 80004ae:	1886      	adds	r6, r0, r2
 80004b0:	4286      	cmp	r6, r0
 80004b2:	4180      	sbcs	r0, r0
 80004b4:	4461      	add	r1, ip
 80004b6:	4240      	negs	r0, r0
 80004b8:	1809      	adds	r1, r1, r0
 80004ba:	2501      	movs	r5, #1
 80004bc:	020b      	lsls	r3, r1, #8
 80004be:	d537      	bpl.n	8000530 <__aeabi_dsub+0x310>
 80004c0:	2502      	movs	r5, #2
 80004c2:	e77b      	b.n	80003bc <__aeabi_dsub+0x19c>
 80004c4:	003e      	movs	r6, r7
 80004c6:	4661      	mov	r1, ip
 80004c8:	4691      	mov	r9, r2
 80004ca:	0035      	movs	r5, r6
 80004cc:	e7c5      	b.n	800045a <__aeabi_dsub+0x23a>
 80004ce:	465c      	mov	r4, fp
 80004d0:	2d00      	cmp	r5, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dsub+0x2b6>
 80004d4:	e0e1      	b.n	800069a <__aeabi_dsub+0x47a>
 80004d6:	000b      	movs	r3, r1
 80004d8:	4303      	orrs	r3, r0
 80004da:	d0f3      	beq.n	80004c4 <__aeabi_dsub+0x2a4>
 80004dc:	1c73      	adds	r3, r6, #1
 80004de:	d100      	bne.n	80004e2 <__aeabi_dsub+0x2c2>
 80004e0:	e1ac      	b.n	800083c <__aeabi_dsub+0x61c>
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <__aeabi_dsub+0x348>)
 80004e4:	429f      	cmp	r7, r3
 80004e6:	d100      	bne.n	80004ea <__aeabi_dsub+0x2ca>
 80004e8:	e13a      	b.n	8000760 <__aeabi_dsub+0x540>
 80004ea:	43f3      	mvns	r3, r6
 80004ec:	2b38      	cmp	r3, #56	; 0x38
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dsub+0x2d2>
 80004f0:	e16f      	b.n	80007d2 <__aeabi_dsub+0x5b2>
 80004f2:	2b1f      	cmp	r3, #31
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dsub+0x2d8>
 80004f6:	e18c      	b.n	8000812 <__aeabi_dsub+0x5f2>
 80004f8:	2520      	movs	r5, #32
 80004fa:	000e      	movs	r6, r1
 80004fc:	1aed      	subs	r5, r5, r3
 80004fe:	40ae      	lsls	r6, r5
 8000500:	46b0      	mov	r8, r6
 8000502:	0006      	movs	r6, r0
 8000504:	46aa      	mov	sl, r5
 8000506:	40de      	lsrs	r6, r3
 8000508:	4645      	mov	r5, r8
 800050a:	4335      	orrs	r5, r6
 800050c:	002e      	movs	r6, r5
 800050e:	4655      	mov	r5, sl
 8000510:	40d9      	lsrs	r1, r3
 8000512:	40a8      	lsls	r0, r5
 8000514:	4663      	mov	r3, ip
 8000516:	1e45      	subs	r5, r0, #1
 8000518:	41a8      	sbcs	r0, r5
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	469c      	mov	ip, r3
 800051e:	4330      	orrs	r0, r6
 8000520:	1a16      	subs	r6, r2, r0
 8000522:	42b2      	cmp	r2, r6
 8000524:	4192      	sbcs	r2, r2
 8000526:	4663      	mov	r3, ip
 8000528:	4252      	negs	r2, r2
 800052a:	1a99      	subs	r1, r3, r2
 800052c:	003d      	movs	r5, r7
 800052e:	e6b4      	b.n	800029a <__aeabi_dsub+0x7a>
 8000530:	2207      	movs	r2, #7
 8000532:	4032      	ands	r2, r6
 8000534:	2a00      	cmp	r2, #0
 8000536:	d000      	beq.n	800053a <__aeabi_dsub+0x31a>
 8000538:	e6e4      	b.n	8000304 <__aeabi_dsub+0xe4>
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <__aeabi_dsub+0x348>)
 800053c:	08f6      	lsrs	r6, r6, #3
 800053e:	074f      	lsls	r7, r1, #29
 8000540:	4337      	orrs	r7, r6
 8000542:	08ca      	lsrs	r2, r1, #3
 8000544:	429d      	cmp	r5, r3
 8000546:	d000      	beq.n	800054a <__aeabi_dsub+0x32a>
 8000548:	e790      	b.n	800046c <__aeabi_dsub+0x24c>
 800054a:	003b      	movs	r3, r7
 800054c:	4313      	orrs	r3, r2
 800054e:	d100      	bne.n	8000552 <__aeabi_dsub+0x332>
 8000550:	e1a6      	b.n	80008a0 <__aeabi_dsub+0x680>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	031b      	lsls	r3, r3, #12
 8000556:	431a      	orrs	r2, r3
 8000558:	0312      	lsls	r2, r2, #12
 800055a:	0b12      	lsrs	r2, r2, #12
 800055c:	4d02      	ldr	r5, [pc, #8]	; (8000568 <__aeabi_dsub+0x348>)
 800055e:	e789      	b.n	8000474 <__aeabi_dsub+0x254>
 8000560:	0015      	movs	r5, r2
 8000562:	2200      	movs	r2, #0
 8000564:	2700      	movs	r7, #0
 8000566:	e785      	b.n	8000474 <__aeabi_dsub+0x254>
 8000568:	000007ff 	.word	0x000007ff
 800056c:	ff7fffff 	.word	0xff7fffff
 8000570:	800fffff 	.word	0x800fffff
 8000574:	2e00      	cmp	r6, #0
 8000576:	d000      	beq.n	800057a <__aeabi_dsub+0x35a>
 8000578:	e0c7      	b.n	800070a <__aeabi_dsub+0x4ea>
 800057a:	1c6b      	adds	r3, r5, #1
 800057c:	055e      	lsls	r6, r3, #21
 800057e:	0d76      	lsrs	r6, r6, #21
 8000580:	2e01      	cmp	r6, #1
 8000582:	dc00      	bgt.n	8000586 <__aeabi_dsub+0x366>
 8000584:	e0f0      	b.n	8000768 <__aeabi_dsub+0x548>
 8000586:	4dc8      	ldr	r5, [pc, #800]	; (80008a8 <__aeabi_dsub+0x688>)
 8000588:	42ab      	cmp	r3, r5
 800058a:	d100      	bne.n	800058e <__aeabi_dsub+0x36e>
 800058c:	e0b9      	b.n	8000702 <__aeabi_dsub+0x4e2>
 800058e:	1885      	adds	r5, r0, r2
 8000590:	000a      	movs	r2, r1
 8000592:	4285      	cmp	r5, r0
 8000594:	4189      	sbcs	r1, r1
 8000596:	4462      	add	r2, ip
 8000598:	4249      	negs	r1, r1
 800059a:	1851      	adds	r1, r2, r1
 800059c:	2207      	movs	r2, #7
 800059e:	07ce      	lsls	r6, r1, #31
 80005a0:	086d      	lsrs	r5, r5, #1
 80005a2:	432e      	orrs	r6, r5
 80005a4:	0849      	lsrs	r1, r1, #1
 80005a6:	4032      	ands	r2, r6
 80005a8:	001d      	movs	r5, r3
 80005aa:	e6a9      	b.n	8000300 <__aeabi_dsub+0xe0>
 80005ac:	49bf      	ldr	r1, [pc, #764]	; (80008ac <__aeabi_dsub+0x68c>)
 80005ae:	1aed      	subs	r5, r5, r3
 80005b0:	4011      	ands	r1, r2
 80005b2:	2207      	movs	r2, #7
 80005b4:	4032      	ands	r2, r6
 80005b6:	e6a3      	b.n	8000300 <__aeabi_dsub+0xe0>
 80005b8:	0032      	movs	r2, r6
 80005ba:	3828      	subs	r0, #40	; 0x28
 80005bc:	4082      	lsls	r2, r0
 80005be:	2600      	movs	r6, #0
 80005c0:	e686      	b.n	80002d0 <__aeabi_dsub+0xb0>
 80005c2:	0030      	movs	r0, r6
 80005c4:	f000 f9a6 	bl	8000914 <__clzsi2>
 80005c8:	3020      	adds	r0, #32
 80005ca:	e673      	b.n	80002b4 <__aeabi_dsub+0x94>
 80005cc:	4663      	mov	r3, ip
 80005ce:	4313      	orrs	r3, r2
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	4193      	sbcs	r3, r2
 80005d4:	1ac6      	subs	r6, r0, r3
 80005d6:	42b0      	cmp	r0, r6
 80005d8:	4180      	sbcs	r0, r0
 80005da:	4240      	negs	r0, r0
 80005dc:	1a09      	subs	r1, r1, r0
 80005de:	e65c      	b.n	800029a <__aeabi_dsub+0x7a>
 80005e0:	000e      	movs	r6, r1
 80005e2:	4667      	mov	r7, ip
 80005e4:	4306      	orrs	r6, r0
 80005e6:	4317      	orrs	r7, r2
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d15e      	bne.n	80006aa <__aeabi_dsub+0x48a>
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_dsub+0x3d2>
 80005f0:	e0f3      	b.n	80007da <__aeabi_dsub+0x5ba>
 80005f2:	2f00      	cmp	r7, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dsub+0x3d8>
 80005f6:	e11e      	b.n	8000836 <__aeabi_dsub+0x616>
 80005f8:	465c      	mov	r4, fp
 80005fa:	4661      	mov	r1, ip
 80005fc:	4691      	mov	r9, r2
 80005fe:	e72c      	b.n	800045a <__aeabi_dsub+0x23a>
 8000600:	4fa9      	ldr	r7, [pc, #676]	; (80008a8 <__aeabi_dsub+0x688>)
 8000602:	42be      	cmp	r6, r7
 8000604:	d07b      	beq.n	80006fe <__aeabi_dsub+0x4de>
 8000606:	001e      	movs	r6, r3
 8000608:	e6f1      	b.n	80003ee <__aeabi_dsub+0x1ce>
 800060a:	0010      	movs	r0, r2
 800060c:	3d1f      	subs	r5, #31
 800060e:	40e8      	lsrs	r0, r5
 8000610:	2b20      	cmp	r3, #32
 8000612:	d003      	beq.n	800061c <__aeabi_dsub+0x3fc>
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	409a      	lsls	r2, r3
 800061a:	4316      	orrs	r6, r2
 800061c:	1e73      	subs	r3, r6, #1
 800061e:	419e      	sbcs	r6, r3
 8000620:	2207      	movs	r2, #7
 8000622:	4306      	orrs	r6, r0
 8000624:	4032      	ands	r2, r6
 8000626:	2100      	movs	r1, #0
 8000628:	2500      	movs	r5, #0
 800062a:	e783      	b.n	8000534 <__aeabi_dsub+0x314>
 800062c:	1a16      	subs	r6, r2, r0
 800062e:	4663      	mov	r3, ip
 8000630:	42b2      	cmp	r2, r6
 8000632:	4180      	sbcs	r0, r0
 8000634:	1a59      	subs	r1, r3, r1
 8000636:	4240      	negs	r0, r0
 8000638:	1a0b      	subs	r3, r1, r0
 800063a:	4698      	mov	r8, r3
 800063c:	465c      	mov	r4, fp
 800063e:	e632      	b.n	80002a6 <__aeabi_dsub+0x86>
 8000640:	2e1f      	cmp	r6, #31
 8000642:	dd00      	ble.n	8000646 <__aeabi_dsub+0x426>
 8000644:	e0ab      	b.n	800079e <__aeabi_dsub+0x57e>
 8000646:	2720      	movs	r7, #32
 8000648:	1bbb      	subs	r3, r7, r6
 800064a:	469a      	mov	sl, r3
 800064c:	4663      	mov	r3, ip
 800064e:	4657      	mov	r7, sl
 8000650:	40bb      	lsls	r3, r7
 8000652:	4699      	mov	r9, r3
 8000654:	0013      	movs	r3, r2
 8000656:	464f      	mov	r7, r9
 8000658:	40f3      	lsrs	r3, r6
 800065a:	431f      	orrs	r7, r3
 800065c:	003b      	movs	r3, r7
 800065e:	4657      	mov	r7, sl
 8000660:	40ba      	lsls	r2, r7
 8000662:	1e57      	subs	r7, r2, #1
 8000664:	41ba      	sbcs	r2, r7
 8000666:	4313      	orrs	r3, r2
 8000668:	4662      	mov	r2, ip
 800066a:	40f2      	lsrs	r2, r6
 800066c:	1889      	adds	r1, r1, r2
 800066e:	e698      	b.n	80003a2 <__aeabi_dsub+0x182>
 8000670:	2720      	movs	r7, #32
 8000672:	1bbb      	subs	r3, r7, r6
 8000674:	469a      	mov	sl, r3
 8000676:	4663      	mov	r3, ip
 8000678:	4657      	mov	r7, sl
 800067a:	40bb      	lsls	r3, r7
 800067c:	4699      	mov	r9, r3
 800067e:	0013      	movs	r3, r2
 8000680:	464f      	mov	r7, r9
 8000682:	40f3      	lsrs	r3, r6
 8000684:	431f      	orrs	r7, r3
 8000686:	003b      	movs	r3, r7
 8000688:	4657      	mov	r7, sl
 800068a:	40ba      	lsls	r2, r7
 800068c:	1e57      	subs	r7, r2, #1
 800068e:	41ba      	sbcs	r2, r7
 8000690:	4313      	orrs	r3, r2
 8000692:	4662      	mov	r2, ip
 8000694:	40f2      	lsrs	r2, r6
 8000696:	1a89      	subs	r1, r1, r2
 8000698:	e79c      	b.n	80005d4 <__aeabi_dsub+0x3b4>
 800069a:	4b83      	ldr	r3, [pc, #524]	; (80008a8 <__aeabi_dsub+0x688>)
 800069c:	429f      	cmp	r7, r3
 800069e:	d05f      	beq.n	8000760 <__aeabi_dsub+0x540>
 80006a0:	2580      	movs	r5, #128	; 0x80
 80006a2:	042d      	lsls	r5, r5, #16
 80006a4:	4273      	negs	r3, r6
 80006a6:	4329      	orrs	r1, r5
 80006a8:	e720      	b.n	80004ec <__aeabi_dsub+0x2cc>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d10c      	bne.n	80006c8 <__aeabi_dsub+0x4a8>
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dsub+0x494>
 80006b2:	e0d0      	b.n	8000856 <__aeabi_dsub+0x636>
 80006b4:	465c      	mov	r4, fp
 80006b6:	4661      	mov	r1, ip
 80006b8:	4691      	mov	r9, r2
 80006ba:	4d7b      	ldr	r5, [pc, #492]	; (80008a8 <__aeabi_dsub+0x688>)
 80006bc:	e6cd      	b.n	800045a <__aeabi_dsub+0x23a>
 80006be:	4f7a      	ldr	r7, [pc, #488]	; (80008a8 <__aeabi_dsub+0x688>)
 80006c0:	42be      	cmp	r6, r7
 80006c2:	d01c      	beq.n	80006fe <__aeabi_dsub+0x4de>
 80006c4:	001e      	movs	r6, r3
 80006c6:	e665      	b.n	8000394 <__aeabi_dsub+0x174>
 80006c8:	2f00      	cmp	r7, #0
 80006ca:	d018      	beq.n	80006fe <__aeabi_dsub+0x4de>
 80006cc:	08c0      	lsrs	r0, r0, #3
 80006ce:	074e      	lsls	r6, r1, #29
 80006d0:	4306      	orrs	r6, r0
 80006d2:	2080      	movs	r0, #128	; 0x80
 80006d4:	08c9      	lsrs	r1, r1, #3
 80006d6:	0300      	lsls	r0, r0, #12
 80006d8:	4201      	tst	r1, r0
 80006da:	d008      	beq.n	80006ee <__aeabi_dsub+0x4ce>
 80006dc:	4663      	mov	r3, ip
 80006de:	08dc      	lsrs	r4, r3, #3
 80006e0:	4204      	tst	r4, r0
 80006e2:	d104      	bne.n	80006ee <__aeabi_dsub+0x4ce>
 80006e4:	0021      	movs	r1, r4
 80006e6:	46da      	mov	sl, fp
 80006e8:	08d2      	lsrs	r2, r2, #3
 80006ea:	075e      	lsls	r6, r3, #29
 80006ec:	4316      	orrs	r6, r2
 80006ee:	00f3      	lsls	r3, r6, #3
 80006f0:	4699      	mov	r9, r3
 80006f2:	2401      	movs	r4, #1
 80006f4:	4653      	mov	r3, sl
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	0f72      	lsrs	r2, r6, #29
 80006fa:	4311      	orrs	r1, r2
 80006fc:	401c      	ands	r4, r3
 80006fe:	4d6a      	ldr	r5, [pc, #424]	; (80008a8 <__aeabi_dsub+0x688>)
 8000700:	e6ab      	b.n	800045a <__aeabi_dsub+0x23a>
 8000702:	001d      	movs	r5, r3
 8000704:	2200      	movs	r2, #0
 8000706:	2700      	movs	r7, #0
 8000708:	e6b4      	b.n	8000474 <__aeabi_dsub+0x254>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d159      	bne.n	80007c2 <__aeabi_dsub+0x5a2>
 800070e:	000b      	movs	r3, r1
 8000710:	4303      	orrs	r3, r0
 8000712:	d100      	bne.n	8000716 <__aeabi_dsub+0x4f6>
 8000714:	e6d6      	b.n	80004c4 <__aeabi_dsub+0x2a4>
 8000716:	1c73      	adds	r3, r6, #1
 8000718:	d100      	bne.n	800071c <__aeabi_dsub+0x4fc>
 800071a:	e0b2      	b.n	8000882 <__aeabi_dsub+0x662>
 800071c:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <__aeabi_dsub+0x688>)
 800071e:	429f      	cmp	r7, r3
 8000720:	d01e      	beq.n	8000760 <__aeabi_dsub+0x540>
 8000722:	43f3      	mvns	r3, r6
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dc6f      	bgt.n	8000808 <__aeabi_dsub+0x5e8>
 8000728:	2b1f      	cmp	r3, #31
 800072a:	dd00      	ble.n	800072e <__aeabi_dsub+0x50e>
 800072c:	e097      	b.n	800085e <__aeabi_dsub+0x63e>
 800072e:	2520      	movs	r5, #32
 8000730:	000e      	movs	r6, r1
 8000732:	1aed      	subs	r5, r5, r3
 8000734:	40ae      	lsls	r6, r5
 8000736:	46b0      	mov	r8, r6
 8000738:	0006      	movs	r6, r0
 800073a:	46aa      	mov	sl, r5
 800073c:	40de      	lsrs	r6, r3
 800073e:	4645      	mov	r5, r8
 8000740:	4335      	orrs	r5, r6
 8000742:	002e      	movs	r6, r5
 8000744:	4655      	mov	r5, sl
 8000746:	40a8      	lsls	r0, r5
 8000748:	40d9      	lsrs	r1, r3
 800074a:	1e45      	subs	r5, r0, #1
 800074c:	41a8      	sbcs	r0, r5
 800074e:	448c      	add	ip, r1
 8000750:	4306      	orrs	r6, r0
 8000752:	18b6      	adds	r6, r6, r2
 8000754:	4296      	cmp	r6, r2
 8000756:	4192      	sbcs	r2, r2
 8000758:	4251      	negs	r1, r2
 800075a:	4461      	add	r1, ip
 800075c:	003d      	movs	r5, r7
 800075e:	e625      	b.n	80003ac <__aeabi_dsub+0x18c>
 8000760:	003d      	movs	r5, r7
 8000762:	4661      	mov	r1, ip
 8000764:	4691      	mov	r9, r2
 8000766:	e678      	b.n	800045a <__aeabi_dsub+0x23a>
 8000768:	000b      	movs	r3, r1
 800076a:	4303      	orrs	r3, r0
 800076c:	2d00      	cmp	r5, #0
 800076e:	d000      	beq.n	8000772 <__aeabi_dsub+0x552>
 8000770:	e655      	b.n	800041e <__aeabi_dsub+0x1fe>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0f5      	beq.n	8000762 <__aeabi_dsub+0x542>
 8000776:	4663      	mov	r3, ip
 8000778:	4313      	orrs	r3, r2
 800077a:	d100      	bne.n	800077e <__aeabi_dsub+0x55e>
 800077c:	e66d      	b.n	800045a <__aeabi_dsub+0x23a>
 800077e:	1886      	adds	r6, r0, r2
 8000780:	4286      	cmp	r6, r0
 8000782:	4180      	sbcs	r0, r0
 8000784:	4461      	add	r1, ip
 8000786:	4240      	negs	r0, r0
 8000788:	1809      	adds	r1, r1, r0
 800078a:	2200      	movs	r2, #0
 800078c:	020b      	lsls	r3, r1, #8
 800078e:	d400      	bmi.n	8000792 <__aeabi_dsub+0x572>
 8000790:	e6d0      	b.n	8000534 <__aeabi_dsub+0x314>
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <__aeabi_dsub+0x68c>)
 8000794:	3501      	adds	r5, #1
 8000796:	4019      	ands	r1, r3
 8000798:	e5b2      	b.n	8000300 <__aeabi_dsub+0xe0>
 800079a:	46b1      	mov	r9, r6
 800079c:	e65d      	b.n	800045a <__aeabi_dsub+0x23a>
 800079e:	0033      	movs	r3, r6
 80007a0:	4667      	mov	r7, ip
 80007a2:	3b20      	subs	r3, #32
 80007a4:	40df      	lsrs	r7, r3
 80007a6:	003b      	movs	r3, r7
 80007a8:	2e20      	cmp	r6, #32
 80007aa:	d005      	beq.n	80007b8 <__aeabi_dsub+0x598>
 80007ac:	2740      	movs	r7, #64	; 0x40
 80007ae:	1bbf      	subs	r7, r7, r6
 80007b0:	4666      	mov	r6, ip
 80007b2:	40be      	lsls	r6, r7
 80007b4:	4332      	orrs	r2, r6
 80007b6:	4690      	mov	r8, r2
 80007b8:	4646      	mov	r6, r8
 80007ba:	1e72      	subs	r2, r6, #1
 80007bc:	4196      	sbcs	r6, r2
 80007be:	4333      	orrs	r3, r6
 80007c0:	e5ef      	b.n	80003a2 <__aeabi_dsub+0x182>
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <__aeabi_dsub+0x688>)
 80007c4:	429f      	cmp	r7, r3
 80007c6:	d0cb      	beq.n	8000760 <__aeabi_dsub+0x540>
 80007c8:	2580      	movs	r5, #128	; 0x80
 80007ca:	042d      	lsls	r5, r5, #16
 80007cc:	4273      	negs	r3, r6
 80007ce:	4329      	orrs	r1, r5
 80007d0:	e7a8      	b.n	8000724 <__aeabi_dsub+0x504>
 80007d2:	4308      	orrs	r0, r1
 80007d4:	1e41      	subs	r1, r0, #1
 80007d6:	4188      	sbcs	r0, r1
 80007d8:	e6a2      	b.n	8000520 <__aeabi_dsub+0x300>
 80007da:	2f00      	cmp	r7, #0
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dsub+0x5c0>
 80007de:	e63c      	b.n	800045a <__aeabi_dsub+0x23a>
 80007e0:	4663      	mov	r3, ip
 80007e2:	1a86      	subs	r6, r0, r2
 80007e4:	1acf      	subs	r7, r1, r3
 80007e6:	42b0      	cmp	r0, r6
 80007e8:	419b      	sbcs	r3, r3
 80007ea:	425b      	negs	r3, r3
 80007ec:	1afb      	subs	r3, r7, r3
 80007ee:	4698      	mov	r8, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	d54e      	bpl.n	8000892 <__aeabi_dsub+0x672>
 80007f4:	1a16      	subs	r6, r2, r0
 80007f6:	4663      	mov	r3, ip
 80007f8:	42b2      	cmp	r2, r6
 80007fa:	4192      	sbcs	r2, r2
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	4252      	negs	r2, r2
 8000800:	1a89      	subs	r1, r1, r2
 8000802:	465c      	mov	r4, fp
 8000804:	2200      	movs	r2, #0
 8000806:	e57b      	b.n	8000300 <__aeabi_dsub+0xe0>
 8000808:	4301      	orrs	r1, r0
 800080a:	000e      	movs	r6, r1
 800080c:	1e71      	subs	r1, r6, #1
 800080e:	418e      	sbcs	r6, r1
 8000810:	e79f      	b.n	8000752 <__aeabi_dsub+0x532>
 8000812:	001d      	movs	r5, r3
 8000814:	000e      	movs	r6, r1
 8000816:	3d20      	subs	r5, #32
 8000818:	40ee      	lsrs	r6, r5
 800081a:	46b0      	mov	r8, r6
 800081c:	2b20      	cmp	r3, #32
 800081e:	d004      	beq.n	800082a <__aeabi_dsub+0x60a>
 8000820:	2540      	movs	r5, #64	; 0x40
 8000822:	1aeb      	subs	r3, r5, r3
 8000824:	4099      	lsls	r1, r3
 8000826:	4308      	orrs	r0, r1
 8000828:	4681      	mov	r9, r0
 800082a:	4648      	mov	r0, r9
 800082c:	4643      	mov	r3, r8
 800082e:	1e41      	subs	r1, r0, #1
 8000830:	4188      	sbcs	r0, r1
 8000832:	4318      	orrs	r0, r3
 8000834:	e674      	b.n	8000520 <__aeabi_dsub+0x300>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	e617      	b.n	800046c <__aeabi_dsub+0x24c>
 800083c:	1a16      	subs	r6, r2, r0
 800083e:	4663      	mov	r3, ip
 8000840:	42b2      	cmp	r2, r6
 8000842:	4192      	sbcs	r2, r2
 8000844:	1a59      	subs	r1, r3, r1
 8000846:	4252      	negs	r2, r2
 8000848:	1a89      	subs	r1, r1, r2
 800084a:	003d      	movs	r5, r7
 800084c:	e525      	b.n	800029a <__aeabi_dsub+0x7a>
 800084e:	4661      	mov	r1, ip
 8000850:	4691      	mov	r9, r2
 8000852:	4d15      	ldr	r5, [pc, #84]	; (80008a8 <__aeabi_dsub+0x688>)
 8000854:	e601      	b.n	800045a <__aeabi_dsub+0x23a>
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	2400      	movs	r4, #0
 800085a:	0312      	lsls	r2, r2, #12
 800085c:	e679      	b.n	8000552 <__aeabi_dsub+0x332>
 800085e:	001d      	movs	r5, r3
 8000860:	000e      	movs	r6, r1
 8000862:	3d20      	subs	r5, #32
 8000864:	40ee      	lsrs	r6, r5
 8000866:	46b0      	mov	r8, r6
 8000868:	2b20      	cmp	r3, #32
 800086a:	d004      	beq.n	8000876 <__aeabi_dsub+0x656>
 800086c:	2540      	movs	r5, #64	; 0x40
 800086e:	1aeb      	subs	r3, r5, r3
 8000870:	4099      	lsls	r1, r3
 8000872:	4308      	orrs	r0, r1
 8000874:	4681      	mov	r9, r0
 8000876:	464e      	mov	r6, r9
 8000878:	4643      	mov	r3, r8
 800087a:	1e71      	subs	r1, r6, #1
 800087c:	418e      	sbcs	r6, r1
 800087e:	431e      	orrs	r6, r3
 8000880:	e767      	b.n	8000752 <__aeabi_dsub+0x532>
 8000882:	1886      	adds	r6, r0, r2
 8000884:	4296      	cmp	r6, r2
 8000886:	419b      	sbcs	r3, r3
 8000888:	4461      	add	r1, ip
 800088a:	425b      	negs	r3, r3
 800088c:	18c9      	adds	r1, r1, r3
 800088e:	003d      	movs	r5, r7
 8000890:	e58c      	b.n	80003ac <__aeabi_dsub+0x18c>
 8000892:	4647      	mov	r7, r8
 8000894:	4337      	orrs	r7, r6
 8000896:	d0ce      	beq.n	8000836 <__aeabi_dsub+0x616>
 8000898:	2207      	movs	r2, #7
 800089a:	4641      	mov	r1, r8
 800089c:	4032      	ands	r2, r6
 800089e:	e649      	b.n	8000534 <__aeabi_dsub+0x314>
 80008a0:	2700      	movs	r7, #0
 80008a2:	003a      	movs	r2, r7
 80008a4:	e5e6      	b.n	8000474 <__aeabi_dsub+0x254>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	000007ff 	.word	0x000007ff
 80008ac:	ff7fffff 	.word	0xff7fffff

080008b0 <__aeabi_ui2d>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	1e04      	subs	r4, r0, #0
 80008b4:	d025      	beq.n	8000902 <__aeabi_ui2d+0x52>
 80008b6:	f000 f82d 	bl	8000914 <__clzsi2>
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <__aeabi_ui2d+0x5c>)
 80008bc:	1a1b      	subs	r3, r3, r0
 80008be:	055b      	lsls	r3, r3, #21
 80008c0:	0d5b      	lsrs	r3, r3, #21
 80008c2:	280a      	cmp	r0, #10
 80008c4:	dd12      	ble.n	80008ec <__aeabi_ui2d+0x3c>
 80008c6:	380b      	subs	r0, #11
 80008c8:	4084      	lsls	r4, r0
 80008ca:	2200      	movs	r2, #0
 80008cc:	0324      	lsls	r4, r4, #12
 80008ce:	0b24      	lsrs	r4, r4, #12
 80008d0:	2100      	movs	r1, #0
 80008d2:	0010      	movs	r0, r2
 80008d4:	0324      	lsls	r4, r4, #12
 80008d6:	0d0a      	lsrs	r2, r1, #20
 80008d8:	0b24      	lsrs	r4, r4, #12
 80008da:	0512      	lsls	r2, r2, #20
 80008dc:	4322      	orrs	r2, r4
 80008de:	4c0c      	ldr	r4, [pc, #48]	; (8000910 <__aeabi_ui2d+0x60>)
 80008e0:	051b      	lsls	r3, r3, #20
 80008e2:	4022      	ands	r2, r4
 80008e4:	4313      	orrs	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	0859      	lsrs	r1, r3, #1
 80008ea:	bd10      	pop	{r4, pc}
 80008ec:	0002      	movs	r2, r0
 80008ee:	0021      	movs	r1, r4
 80008f0:	3215      	adds	r2, #21
 80008f2:	4091      	lsls	r1, r2
 80008f4:	000a      	movs	r2, r1
 80008f6:	210b      	movs	r1, #11
 80008f8:	1a08      	subs	r0, r1, r0
 80008fa:	40c4      	lsrs	r4, r0
 80008fc:	0324      	lsls	r4, r4, #12
 80008fe:	0b24      	lsrs	r4, r4, #12
 8000900:	e7e6      	b.n	80008d0 <__aeabi_ui2d+0x20>
 8000902:	2300      	movs	r3, #0
 8000904:	2400      	movs	r4, #0
 8000906:	2200      	movs	r2, #0
 8000908:	e7e2      	b.n	80008d0 <__aeabi_ui2d+0x20>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	0000041e 	.word	0x0000041e
 8000910:	800fffff 	.word	0x800fffff

08000914 <__clzsi2>:
 8000914:	211c      	movs	r1, #28
 8000916:	2301      	movs	r3, #1
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	4298      	cmp	r0, r3
 800091c:	d301      	bcc.n	8000922 <__clzsi2+0xe>
 800091e:	0c00      	lsrs	r0, r0, #16
 8000920:	3910      	subs	r1, #16
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	4298      	cmp	r0, r3
 8000926:	d301      	bcc.n	800092c <__clzsi2+0x18>
 8000928:	0a00      	lsrs	r0, r0, #8
 800092a:	3908      	subs	r1, #8
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	4298      	cmp	r0, r3
 8000930:	d301      	bcc.n	8000936 <__clzsi2+0x22>
 8000932:	0900      	lsrs	r0, r0, #4
 8000934:	3904      	subs	r1, #4
 8000936:	a202      	add	r2, pc, #8	; (adr r2, 8000940 <__clzsi2+0x2c>)
 8000938:	5c10      	ldrb	r0, [r2, r0]
 800093a:	1840      	adds	r0, r0, r1
 800093c:	4770      	bx	lr
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	02020304 	.word	0x02020304
 8000944:	01010101 	.word	0x01010101
	...

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fd73 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f86b 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 f98f 	bl	8000c80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f000 f967 	bl	8000c34 <MX_DMA_Init>
  MX_ADC_Init();
 8000966:	f000 f8cd 	bl	8000b04 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800096a:	f000 f933 	bl	8000bd4 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Wait for button press to start measurement
	if(HAL_GPIO_ReadPin(Scan_Button_GPIO_Port, Scan_Button_Pin) == GPIO_PIN_SET){
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	021a      	lsls	r2, r3, #8
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f001 ff51 	bl	8002820 <HAL_GPIO_ReadPin>
 800097e:	0003      	movs	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d1f4      	bne.n	800096e <main+0x1e>
		measureTextile();
 8000984:	f000 fa04 	bl	8000d90 <measureTextile>

		HAL_Delay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f000 fdbd 	bl	8001508 <HAL_Delay>
		if (measurementADC1[0][0] != 0){
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <main+0xcc>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0eb      	beq.n	800096e <main+0x1e>
			uint16_t k;

			//tx_buffer[i] = sprintf(str, "%u", difference[1][i]);

			for(int i = 0; i < 8; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	e03a      	b.n	8000a12 <main+0xc2>
				sprintf(str, "%u", difference[1][i]);
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <main+0xd0>)
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3308      	adds	r3, #8
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	685c      	ldr	r4, [r3, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	491e      	ldr	r1, [pc, #120]	; (8000a24 <main+0xd4>)
 80009ac:	481e      	ldr	r0, [pc, #120]	; (8000a28 <main+0xd8>)
 80009ae:	001a      	movs	r2, r3
 80009b0:	0023      	movs	r3, r4
 80009b2:	f003 faf7 	bl	8003fa4 <siprintf>
				for(int j = 0; j < 4; j++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	e00b      	b.n	80009d4 <main+0x84>
					tx_buffer[i] = str[i];
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <main+0xd8>)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <main+0xdc>)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	1c0a      	adds	r2, r1, #0
 80009cc:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < 4; j++){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3301      	adds	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	ddf0      	ble.n	80009bc <main+0x6c>
				}
				tx_buffer[4] = '\r';
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <main+0xdc>)
 80009dc:	220d      	movs	r2, #13
 80009de:	711a      	strb	r2, [r3, #4]
				tx_buffer[5] = '\n';
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <main+0xdc>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	715a      	strb	r2, [r3, #5]

				k=0;
 80009e6:	230e      	movs	r3, #14
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
				while(k++<6){
 80009ee:	e005      	b.n	80009fc <main+0xac>
					HAL_UART_Transmit_DMA(&huart1, tx_buffer, 6);
 80009f0:	490e      	ldr	r1, [pc, #56]	; (8000a2c <main+0xdc>)
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <main+0xe0>)
 80009f4:	2206      	movs	r2, #6
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 fcec 	bl	80033d4 <HAL_UART_Transmit_DMA>
				while(k++<6){
 80009fc:	220e      	movs	r2, #14
 80009fe:	18bb      	adds	r3, r7, r2
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	18ba      	adds	r2, r7, r2
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	8011      	strh	r1, [r2, #0]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d9f1      	bls.n	80009f0 <main+0xa0>
			for(int i = 0; i < 8; i++){
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	ddc1      	ble.n	800099c <main+0x4c>
	if(HAL_GPIO_ReadPin(Scan_Button_GPIO_Port, Scan_Button_Pin) == GPIO_PIN_SET){
 8000a18:	e7a9      	b.n	800096e <main+0x1e>
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	200002fc 	.word	0x200002fc
 8000a20:	20000178 	.word	0x20000178
 8000a24:	08004810 	.word	0x08004810
 8000a28:	2000032c 	.word	0x2000032c
 8000a2c:	20000124 	.word	0x20000124
 8000a30:	20000238 	.word	0x20000238

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b097      	sub	sp, #92	; 0x5c
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	2428      	movs	r4, #40	; 0x28
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2330      	movs	r3, #48	; 0x30
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f003 faa5 	bl	8003f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	2318      	movs	r3, #24
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2310      	movs	r3, #16
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f003 fa9d 	bl	8003f94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2314      	movs	r3, #20
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f003 fa96 	bl	8003f94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000a68:	0021      	movs	r1, r4
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2212      	movs	r2, #18
 8000a6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2201      	movs	r2, #1
 8000a7a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2210      	movs	r2, #16
 8000a80:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2210      	movs	r2, #16
 8000a86:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	22a0      	movs	r2, #160	; 0xa0
 8000a98:	0392      	lsls	r2, r2, #14
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fef5 	bl	8002894 <HAL_RCC_OscConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aae:	f000 faeb 	bl	8001088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	2118      	movs	r1, #24
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2101      	movs	r1, #1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 f9fb 	bl	8002ecc <HAL_RCC_ClockConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ada:	f000 fad5 	bl	8001088 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 fb3f 	bl	8003170 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000af6:	f000 fac7 	bl	8001088 <Error_Handler>
  }
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b017      	add	sp, #92	; 0x5c
 8000b00:	bd90      	pop	{r4, r7, pc}
	...

08000b04 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	230c      	movs	r3, #12
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f003 fa3e 	bl	8003f94 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <MX_ADC_Init+0xcc>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b56:	22c2      	movs	r2, #194	; 0xc2
 8000b58:	32ff      	adds	r2, #255	; 0xff
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b64:	2224      	movs	r2, #36	; 0x24
 8000b66:	2101      	movs	r1, #1
 8000b68:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fcea 	bl	800154c <HAL_ADC_Init>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f000 fa84 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0152      	lsls	r2, r2, #5
 8000b8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2206      	movs	r2, #6
 8000b92:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b94:	1d3a      	adds	r2, r7, #4
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 ff1e 	bl	80019dc <HAL_ADC_ConfigChannel>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000ba4:	f000 fa70 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bae:	1d3a      	adds	r2, r7, #4
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_ADC_Init+0xc8>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 ff11 	bl	80019dc <HAL_ADC_ConfigChannel>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000bbe:	f000 fa63 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000378 	.word	0x20000378
 8000bd0:	40012400 	.word	0x40012400

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART1_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be0:	2296      	movs	r2, #150	; 0x96
 8000be2:	0192      	lsls	r2, r2, #6
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fb87 	bl	800332c <HAL_UART_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 fa31 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000238 	.word	0x20000238
 8000c30:	40013800 	.word	0x40013800

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_DMA_Init+0x48>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_DMA_Init+0x48>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_DMA_Init+0x48>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2009      	movs	r0, #9
 8000c58:	f001 fa2a 	bl	80020b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5c:	2009      	movs	r0, #9
 8000c5e:	f001 fa3c 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200a      	movs	r0, #10
 8000c68:	f001 fa22 	bl	80020b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f001 fa34 	bl	80020da <HAL_NVIC_EnableIRQ>

}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	240c      	movs	r4, #12
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f003 f97f 	bl	8003f94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0289      	lsls	r1, r1, #10
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	029b      	lsls	r3, r3, #10
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	02c9      	lsls	r1, r1, #11
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	02db      	lsls	r3, r3, #11
 8000cc8:	4013      	ands	r3, r2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0309      	lsls	r1, r1, #12
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_GPIO_Init+0x104>)
 8000cde:	695a      	ldr	r2, [r3, #20]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	031b      	lsls	r3, r3, #12
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED8_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000cea:	23ff      	movs	r3, #255	; 0xff
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x108>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	f001 fdb1 	bl	800285a <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cf8:	23c0      	movs	r3, #192	; 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4823      	ldr	r0, [pc, #140]	; (8000d8c <MX_GPIO_Init+0x10c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	0019      	movs	r1, r3
 8000d02:	f001 fdaa 	bl	800285a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED8_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	22ff      	movs	r2, #255	; 0xff
 8000d0a:	00d2      	lsls	r2, r2, #3
 8000d0c:	601a      	str	r2, [r3, #0]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2201      	movs	r2, #1
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_GPIO_Init+0x108>)
 8000d24:	0019      	movs	r1, r3
 8000d26:	0010      	movs	r0, r2
 8000d28:	f001 fc0a 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	22c0      	movs	r2, #192	; 0xc0
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	000c      	movs	r4, r1
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <MX_GPIO_Init+0x10c>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f001 fbf5 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : Scan_Button_Pin */
  GPIO_InitStruct.Pin = Scan_Button_Pin;
 8000d56:	0021      	movs	r1, r4
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	0212      	lsls	r2, r2, #8
 8000d5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2202      	movs	r2, #2
 8000d6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Scan_Button_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	187a      	adds	r2, r7, r1
 8000d6e:	2390      	movs	r3, #144	; 0x90
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f001 fbe3 	bl	8002540 <HAL_GPIO_Init>

}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b009      	add	sp, #36	; 0x24
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800

08000d90 <measureTextile>:

/* USER CODE BEGIN 4 */

void measureTextile(void){
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0

	//Scan the material 3 times, 2 controls and 1 measurement
	for(int i=0; i<3; i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e078      	b.n	8000e8e <measureTextile+0xfe>

		//Turns on each LED and reads the ADC measurement
		//Then outputs data to Jetson TX2
		for(int j=0; j<8; j++){
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	e06f      	b.n	8000e82 <measureTextile+0xf2>

			//counter used to move through the DMA buffer
			int k = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]

			//Check if going through control or measurement section
			if(i==1){
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d110      	bne.n	8000dce <measureTextile+0x3e>
				HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_SET);
 8000dac:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <measureTextile+0x1e8>)
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	0052      	lsls	r2, r2, #1
 8000db2:	5ad3      	ldrh	r3, [r2, r3]
 8000db4:	4871      	ldr	r0, [pc, #452]	; (8000f7c <measureTextile+0x1ec>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	0019      	movs	r1, r3
 8000dba:	f001 fd4e 	bl	800285a <HAL_GPIO_WritePin>
				//Turn on LED to signify each LED OUT
				HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_SET);
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	486f      	ldr	r0, [pc, #444]	; (8000f80 <measureTextile+0x1f0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	f001 fd47 	bl	800285a <HAL_GPIO_WritePin>
 8000dcc:	e008      	b.n	8000de0 <measureTextile+0x50>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_RESET);
 8000dce:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <measureTextile+0x1e8>)
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	0052      	lsls	r2, r2, #1
 8000dd4:	5ad3      	ldrh	r3, [r2, r3]
 8000dd6:	4869      	ldr	r0, [pc, #420]	; (8000f7c <measureTextile+0x1ec>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	0019      	movs	r1, r3
 8000ddc:	f001 fd3d 	bl	800285a <HAL_GPIO_WritePin>
			}

			//Start the ADC to DMA
			HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, 2);
 8000de0:	4968      	ldr	r1, [pc, #416]	; (8000f84 <measureTextile+0x1f4>)
 8000de2:	4b69      	ldr	r3, [pc, #420]	; (8000f88 <measureTextile+0x1f8>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fcf0 	bl	80017cc <HAL_ADC_Start_DMA>

			//Turn on LED to signify ADC Read
			//HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
			HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 fb8b 	bl	8001508 <HAL_Delay>

			//Poll ADC Channel 0
			measurementADC0[i][j] = 0;
 8000df2:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <measureTextile+0x1fc>)
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	00d1      	lsls	r1, r2, #3
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	188a      	adds	r2, r1, r2
 8000dfc:	0052      	lsls	r2, r2, #1
 8000dfe:	2100      	movs	r1, #0
 8000e00:	52d1      	strh	r1, [r2, r3]
			measurementADC0[i][j] = adc_buffer[k];
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <measureTextile+0x1f4>)
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	0052      	lsls	r2, r2, #1
 8000e08:	5ad0      	ldrh	r0, [r2, r3]
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <measureTextile+0x1fc>)
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	00d1      	lsls	r1, r2, #3
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	188a      	adds	r2, r1, r2
 8000e14:	0052      	lsls	r2, r2, #1
 8000e16:	1c01      	adds	r1, r0, #0
 8000e18:	52d1      	strh	r1, [r2, r3]

			//Turn off LED to signify ADC Read complete
			//HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_RESET);
			HAL_Delay(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 fb74 	bl	8001508 <HAL_Delay>

			//Move to DMA second reading
			k++;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	603b      	str	r3, [r7, #0]
			//Turn on LED to signify ADC Read
			//HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
			//HAL_Delay(25);

			//Poll ADC Channel 1
			measurementADC1[i][j] = 0;
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <measureTextile+0x200>)
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	00d1      	lsls	r1, r2, #3
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	188a      	adds	r2, r1, r2
 8000e30:	0052      	lsls	r2, r2, #1
 8000e32:	2100      	movs	r1, #0
 8000e34:	52d1      	strh	r1, [r2, r3]
			measurementADC1[i][j] = adc_buffer[k];
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <measureTextile+0x1f4>)
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	0052      	lsls	r2, r2, #1
 8000e3c:	5ad0      	ldrh	r0, [r2, r3]
 8000e3e:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <measureTextile+0x200>)
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	00d1      	lsls	r1, r2, #3
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	188a      	adds	r2, r1, r2
 8000e48:	0052      	lsls	r2, r2, #1
 8000e4a:	1c01      	adds	r1, r0, #0
 8000e4c:	52d1      	strh	r1, [r2, r3]

			HAL_ADC_Stop_DMA(&hadc);
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <measureTextile+0x1f8>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fd3d 	bl	80018d0 <HAL_ADC_Stop_DMA>

			HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_RESET);
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <measureTextile+0x1e8>)
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	5ad3      	ldrh	r3, [r2, r3]
 8000e5e:	4847      	ldr	r0, [pc, #284]	; (8000f7c <measureTextile+0x1ec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	0019      	movs	r1, r3
 8000e64:	f001 fcf9 	bl	800285a <HAL_GPIO_WritePin>
			//Turn off LED to signify ADC Read complete
			//HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_RESET);
			//Turn off LED to signify each LED OUT
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_RESET);
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4844      	ldr	r0, [pc, #272]	; (8000f80 <measureTextile+0x1f0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	0019      	movs	r1, r3
 8000e72:	f001 fcf2 	bl	800285a <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fb46 	bl	8001508 <HAL_Delay>
		for(int j=0; j<8; j++){
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	dd8c      	ble.n	8000da2 <measureTextile+0x12>
	for(int i=0; i<3; i++){
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	dc00      	bgt.n	8000e96 <measureTextile+0x106>
 8000e94:	e782      	b.n	8000d9c <measureTextile+0xc>
	}



	// This is my fiddling with different pre-processing techniques we can use
	for (int i=0; i<8; i++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	e062      	b.n	8000f62 <measureTextile+0x1d2>
			//HAL_UART_Transmit_DMA(&huart1, measurementADC0[i][j], 8);
		//}


		//Correct the values by subtracting the control scans
		difference[0][i] = (double)measurementADC1[0][i] - (double)measurementADC0[0][i];
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <measureTextile+0x200>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	0052      	lsls	r2, r2, #1
 8000ea2:	5ad3      	ldrh	r3, [r2, r3]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fd03 	bl	80008b0 <__aeabi_ui2d>
 8000eaa:	0004      	movs	r4, r0
 8000eac:	000d      	movs	r5, r1
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <measureTextile+0x1fc>)
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	0052      	lsls	r2, r2, #1
 8000eb4:	5ad3      	ldrh	r3, [r2, r3]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fcfa 	bl	80008b0 <__aeabi_ui2d>
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	000b      	movs	r3, r1
 8000ec0:	0020      	movs	r0, r4
 8000ec2:	0029      	movs	r1, r5
 8000ec4:	f7ff f9ac 	bl	8000220 <__aeabi_dsub>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	000c      	movs	r4, r1
 8000ecc:	4931      	ldr	r1, [pc, #196]	; (8000f94 <measureTextile+0x204>)
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	188a      	adds	r2, r1, r2
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	6054      	str	r4, [r2, #4]
		difference[1][i] = (double)measurementADC1[1][i] - (double)measurementADC0[1][i];
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <measureTextile+0x200>)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	5ad3      	ldrh	r3, [r2, r3]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fce4 	bl	80008b0 <__aeabi_ui2d>
 8000ee8:	0004      	movs	r4, r0
 8000eea:	000d      	movs	r5, r1
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <measureTextile+0x1fc>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	0052      	lsls	r2, r2, #1
 8000ef4:	5ad3      	ldrh	r3, [r2, r3]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fcda 	bl	80008b0 <__aeabi_ui2d>
 8000efc:	0002      	movs	r2, r0
 8000efe:	000b      	movs	r3, r1
 8000f00:	0020      	movs	r0, r4
 8000f02:	0029      	movs	r1, r5
 8000f04:	f7ff f98c 	bl	8000220 <__aeabi_dsub>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	4921      	ldr	r1, [pc, #132]	; (8000f94 <measureTextile+0x204>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	00d2      	lsls	r2, r2, #3
 8000f14:	188a      	adds	r2, r1, r2
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	6054      	str	r4, [r2, #4]
		difference[2][i] = (double)measurementADC1[2][i] - (double)measurementADC0[2][i];
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <measureTextile+0x200>)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	3210      	adds	r2, #16
 8000f20:	0052      	lsls	r2, r2, #1
 8000f22:	5ad3      	ldrh	r3, [r2, r3]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fcc3 	bl	80008b0 <__aeabi_ui2d>
 8000f2a:	0004      	movs	r4, r0
 8000f2c:	000d      	movs	r5, r1
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <measureTextile+0x1fc>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	3210      	adds	r2, #16
 8000f34:	0052      	lsls	r2, r2, #1
 8000f36:	5ad3      	ldrh	r3, [r2, r3]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff fcb9 	bl	80008b0 <__aeabi_ui2d>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	000b      	movs	r3, r1
 8000f42:	0020      	movs	r0, r4
 8000f44:	0029      	movs	r1, r5
 8000f46:	f7ff f96b 	bl	8000220 <__aeabi_dsub>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	000c      	movs	r4, r1
 8000f4e:	4911      	ldr	r1, [pc, #68]	; (8000f94 <measureTextile+0x204>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	3210      	adds	r2, #16
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	188a      	adds	r2, r1, r2
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	6054      	str	r4, [r2, #4]
	for (int i=0; i<8; i++){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b07      	cmp	r3, #7
 8000f66:	dd99      	ble.n	8000e9c <measureTextile+0x10c>

		//calculate the % difference in ADC0 and ADC1
		//corrected_measure[j] = difference[1][j] - ((difference[0][j] + difference[2][j])/2) - wavelength_correction[j];
	}

	HAL_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f000 facd 	bl	8001508 <HAL_Delay>
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bdb0      	pop	{r4, r5, r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48000800 	.word	0x48000800
 8000f84:	200002f8 	.word	0x200002f8
 8000f88:	20000378 	.word	0x20000378
 8000f8c:	200000b0 	.word	0x200000b0
 8000f90:	200002fc 	.word	0x200002fc
 8000f94:	20000178 	.word	0x20000178

08000f98 <USART2_IRQHandler>:
{
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
}

void USART2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <USART2_IRQHandler+0x14>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f002 faa8 	bl	80034f4 <HAL_UART_IRQHandler>
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000238 	.word	0x20000238

08000fb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  toggle = !toggle;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_UART_TxCpltCallback+0x74>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	425a      	negs	r2, r3
 8000fc0:	4153      	adcs	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_UART_TxCpltCallback+0x74>)
 8000fc8:	701a      	strb	r2, [r3, #0]

  for(i = 3; i < 6; i++)
 8000fca:	230e      	movs	r3, #14
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2203      	movs	r2, #3
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	e017      	b.n	8001004 <HAL_UART_TxCpltCallback+0x54>
  {
    if(toggle)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_UART_TxCpltCallback+0x74>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <HAL_UART_TxCpltCallback+0x3c>
      tx_buffer[i] = '&';
 8000fde:	230e      	movs	r3, #14
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_UART_TxCpltCallback+0x78>)
 8000fe6:	2126      	movs	r1, #38	; 0x26
 8000fe8:	54d1      	strb	r1, [r2, r3]
 8000fea:	e005      	b.n	8000ff8 <HAL_UART_TxCpltCallback+0x48>
    else
      tx_buffer[i] = 'z';
 8000fec:	230e      	movs	r3, #14
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_UART_TxCpltCallback+0x78>)
 8000ff4:	217a      	movs	r1, #122	; 0x7a
 8000ff6:	54d1      	strb	r1, [r2, r3]
  for(i = 3; i < 6; i++)
 8000ff8:	210e      	movs	r1, #14
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	3201      	adds	r2, #1
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	230e      	movs	r3, #14
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2b05      	cmp	r3, #5
 800100c:	d9e2      	bls.n	8000fd4 <HAL_UART_TxCpltCallback+0x24>
  }

  tx_buffer[8] = '\r';
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_UART_TxCpltCallback+0x78>)
 8001010:	220d      	movs	r2, #13
 8001012:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = '\n';
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_UART_TxCpltCallback+0x78>)
 8001016:	220a      	movs	r2, #10
 8001018:	725a      	strb	r2, [r3, #9]
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b004      	add	sp, #16
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	2000009c 	.word	0x2000009c
 8001028:	20000124 	.word	0x20000124

0800102c <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint16_t i;

  for(i = 0; i < 3; i++)
 8001034:	230e      	movs	r3, #14
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
 800103c:	e017      	b.n	800106e <HAL_UART_TxHalfCpltCallback+0x42>
  {
    if(toggle)
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_UART_TxHalfCpltCallback+0x54>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_UART_TxHalfCpltCallback+0x2a>
      tx_buffer[i] = 'y';
 8001048:	230e      	movs	r3, #14
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_UART_TxHalfCpltCallback+0x58>)
 8001050:	2179      	movs	r1, #121	; 0x79
 8001052:	54d1      	strb	r1, [r2, r3]
 8001054:	e005      	b.n	8001062 <HAL_UART_TxHalfCpltCallback+0x36>
    else
      tx_buffer[i] = '|';
 8001056:	230e      	movs	r3, #14
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_UART_TxHalfCpltCallback+0x58>)
 800105e:	217c      	movs	r1, #124	; 0x7c
 8001060:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 3; i++)
 8001062:	210e      	movs	r1, #14
 8001064:	187b      	adds	r3, r7, r1
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	187b      	adds	r3, r7, r1
 800106a:	3201      	adds	r2, #1
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	230e      	movs	r3, #14
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d9e2      	bls.n	800103e <HAL_UART_TxHalfCpltCallback+0x12>
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000009c 	.word	0x2000009c
 8001084:	20000124 	.word	0x20000124

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x44>)
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_MspInit+0x44>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x44>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x44>)
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_MspInit+0x44>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	0549      	lsls	r1, r1, #21
 80010bc:	430a      	orrs	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_MspInit+0x44>)
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	055b      	lsls	r3, r3, #21
 80010c8:	4013      	ands	r3, r2
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	2314      	movs	r3, #20
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	0018      	movs	r0, r3
 80010ea:	2314      	movs	r3, #20
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f002 ff50 	bl	8003f94 <memset>
  if(hadc->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <HAL_ADC_MspInit+0xd4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d154      	bne.n	80011a8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0089      	lsls	r1, r1, #2
 8001108:	430a      	orrs	r2, r1
 800110a:	619a      	str	r2, [r3, #24]
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0289      	lsls	r1, r1, #10
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_ADC_MspInit+0xd8>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC0_2v5REF_Pin|ADC1_Sensor_Pin;
 8001136:	2114      	movs	r1, #20
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2203      	movs	r2, #3
 800113c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2203      	movs	r2, #3
 8001142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	187a      	adds	r2, r7, r1
 800114c:	2390      	movs	r3, #144	; 0x90
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f001 f9f4 	bl	8002540 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_ADC_MspInit+0xe0>)
 800115c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0052      	lsls	r2, r2, #1
 8001176:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 8001182:	2220      	movs	r2, #32
 8001184:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 800118e:	0018      	movs	r0, r3
 8001190:	f000 ffc0 	bl	8002114 <HAL_DMA_Init>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001198:	f7ff ff76 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_ADC_MspInit+0xdc>)
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b00a      	add	sp, #40	; 0x28
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012400 	.word	0x40012400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	20000334 	.word	0x20000334
 80011bc:	40020008 	.word	0x40020008

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	2314      	movs	r3, #20
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	0018      	movs	r0, r3
 80011ce:	2314      	movs	r3, #20
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f002 fede 	bl	8003f94 <memset>
  if(huart->Instance==USART1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a43      	ldr	r2, [pc, #268]	; (80012ec <HAL_UART_MspInit+0x12c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d000      	beq.n	80011e4 <HAL_UART_MspInit+0x24>
 80011e2:	e07f      	b.n	80012e4 <HAL_UART_MspInit+0x124>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <HAL_UART_MspInit+0x130>)
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_UART_MspInit+0x130>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	01c9      	lsls	r1, r1, #7
 80011ee:	430a      	orrs	r2, r1
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_UART_MspInit+0x130>)
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_UART_MspInit+0x130>)
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <HAL_UART_MspInit+0x130>)
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	0289      	lsls	r1, r1, #10
 800120a:	430a      	orrs	r2, r1
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_UART_MspInit+0x130>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800121c:	2114      	movs	r1, #20
 800121e:	187b      	adds	r3, r7, r1
 8001220:	22c0      	movs	r2, #192	; 0xc0
 8001222:	00d2      	lsls	r2, r2, #3
 8001224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2202      	movs	r2, #2
 800122a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2203      	movs	r2, #3
 8001236:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2201      	movs	r2, #1
 800123c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	187a      	adds	r2, r7, r1
 8001240:	2390      	movs	r3, #144	; 0x90
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f001 f97a 	bl	8002540 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <HAL_UART_MspInit+0x134>)
 800124e:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <HAL_UART_MspInit+0x138>)
 8001250:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001254:	2210      	movs	r2, #16
 8001256:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_UART_MspInit+0x134>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_UART_MspInit+0x134>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_UART_MspInit+0x134>)
 800127e:	0018      	movs	r0, r3
 8001280:	f000 ff48 	bl	8002114 <HAL_DMA_Init>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001288:	f7ff fefe 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001290:	669a      	str	r2, [r3, #104]	; 0x68
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_UART_MspInit+0x134>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x13c>)
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x140>)
 800129c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 ff22 	bl	8002114 <HAL_DMA_Init>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 80012d4:	f7ff fed8 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_UART_MspInit+0x13c>)
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b00a      	add	sp, #40	; 0x28
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40021000 	.word	0x40021000
 80012f4:	200000e0 	.word	0x200000e0
 80012f8:	4002001c 	.word	0x4002001c
 80012fc:	20000130 	.word	0x20000130
 8001300:	40020030 	.word	0x40020030

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f8d0 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <DMA1_Channel1_IRQHandler+0x14>)
 800133e:	0018      	movs	r0, r3
 8001340:	f001 f814 	bl	800236c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000334 	.word	0x20000334

08001350 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001356:	0018      	movs	r0, r3
 8001358:	f001 f808 	bl	800236c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <DMA1_Channel2_3_IRQHandler+0x20>)
 800135e:	0018      	movs	r0, r3
 8001360:	f001 f804 	bl	800236c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	200000e0 	.word	0x200000e0
 8001370:	20000130 	.word	0x20000130

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f002 fdcc 	bl	8003f40 <__errno>
 80013a8:	0003      	movs	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	425b      	negs	r3, r3
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	18d2      	adds	r2, r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20002000 	.word	0x20002000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	200000a0 	.word	0x200000a0
 80013dc:	200003c0 	.word	0x200003c0

080013e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <LoopForever+0xe>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001408:	4c0b      	ldr	r4, [pc, #44]	; (8001438 <LoopForever+0x16>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001416:	f7ff ffe3 	bl	80013e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800141a:	f002 fd97 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141e:	f7ff fa97 	bl	8000950 <main>

08001422 <LoopForever>:

LoopForever:
    b LoopForever
 8001422:	e7fe      	b.n	8001422 <LoopForever>
  ldr   r0, =_estack
 8001424:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001430:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 8001434:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001438:	200003c0 	.word	0x200003c0

0800143c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_COMP_IRQHandler>
	...

08001440 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_Init+0x24>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_Init+0x24>)
 800144a:	2110      	movs	r1, #16
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f809 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001456:	f7ff fe1d 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_InitTick+0x5c>)
 8001472:	681c      	ldr	r4, [r3, #0]
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_InitTick+0x60>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	0019      	movs	r1, r3
 800147a:	23fa      	movs	r3, #250	; 0xfa
 800147c:	0098      	lsls	r0, r3, #2
 800147e:	f7fe fe43 	bl	8000108 <__udivsi3>
 8001482:	0003      	movs	r3, r0
 8001484:	0019      	movs	r1, r3
 8001486:	0020      	movs	r0, r4
 8001488:	f7fe fe3e 	bl	8000108 <__udivsi3>
 800148c:	0003      	movs	r3, r0
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fe33 	bl	80020fa <HAL_SYSTICK_Config>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e00f      	b.n	80014bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d80b      	bhi.n	80014ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fe00 	bl	80020b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_InitTick+0x64>)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b003      	add	sp, #12
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	20000010 	.word	0x20000010
 80014c8:	20000018 	.word	0x20000018
 80014cc:	20000014 	.word	0x20000014

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x1c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	001a      	movs	r2, r3
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_IncTick+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	18d2      	adds	r2, r2, r3
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_IncTick+0x20>)
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	20000018 	.word	0x20000018
 80014f0:	200003b8 	.word	0x200003b8

080014f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <HAL_GetTick+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	200003b8 	.word	0x200003b8

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff0 	bl	80014f4 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_Delay+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	001a      	movs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	189b      	adds	r3, r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	f7ff ffe0 	bl	80014f4 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000018 	.word	0x20000018

0800154c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e125      	b.n	80017b6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2234      	movs	r2, #52	; 0x34
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fdaa 	bl	80010dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	2210      	movs	r2, #16
 800158e:	4013      	ands	r3, r2
 8001590:	d000      	beq.n	8001594 <HAL_ADC_Init+0x48>
 8001592:	e103      	b.n	800179c <HAL_ADC_Init+0x250>
 8001594:	230f      	movs	r3, #15
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_Init+0x54>
 800159e:	e0fd      	b.n	800179c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80015aa:	d000      	beq.n	80015ae <HAL_ADC_Init+0x62>
 80015ac:	e0f6      	b.n	800179c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	4a83      	ldr	r2, [pc, #524]	; (80017c0 <HAL_ADC_Init+0x274>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	2202      	movs	r2, #2
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d112      	bne.n	80015f2 <HAL_ADC_Init+0xa6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d009      	beq.n	80015ee <HAL_ADC_Init+0xa2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	401a      	ands	r2, r3
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Init+0xa6>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_Init+0xa8>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d116      	bne.n	8001626 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2218      	movs	r2, #24
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	0899      	lsrs	r1, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4964      	ldr	r1, [pc, #400]	; (80017c4 <HAL_ADC_Init+0x278>)
 8001632:	400a      	ands	r2, r1
 8001634:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7e1b      	ldrb	r3, [r3, #24]
 800163a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e5b      	ldrb	r3, [r3, #25]
 8001640:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001642:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e9b      	ldrb	r3, [r3, #26]
 8001648:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800164a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	2b01      	cmp	r3, #1
 8001652:	d002      	beq.n	800165a <HAL_ADC_Init+0x10e>
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	e000      	b.n	800165c <HAL_ADC_Init+0x110>
 800165a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800165c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001662:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d101      	bne.n	8001670 <HAL_ADC_Init+0x124>
 800166c:	2304      	movs	r3, #4
 800166e:	e000      	b.n	8001672 <HAL_ADC_Init+0x126>
 8001670:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001672:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2124      	movs	r1, #36	; 0x24
 8001678:	5c5b      	ldrb	r3, [r3, r1]
 800167a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800167c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	4313      	orrs	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7edb      	ldrb	r3, [r3, #27]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e9b      	ldrb	r3, [r3, #26]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	0252      	lsls	r2, r2, #9
 800169a:	4313      	orrs	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	e00b      	b.n	80016b8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a4:	2220      	movs	r2, #32
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	2201      	movs	r2, #1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	23c2      	movs	r3, #194	; 0xc2
 80016be:	33ff      	adds	r3, #255	; 0xff
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d007      	beq.n	80016d4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016cc:	4313      	orrs	r3, r2
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68d9      	ldr	r1, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d01b      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d017      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d013      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b03      	cmp	r3, #3
 8001706:	d00f      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00b      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	2b05      	cmp	r3, #5
 8001716:	d007      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b06      	cmp	r3, #6
 800171e:	d003      	beq.n	8001728 <HAL_ADC_Init+0x1dc>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2b07      	cmp	r3, #7
 8001726:	d112      	bne.n	800174e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2107      	movs	r1, #7
 8001734:	438a      	bics	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6959      	ldr	r1, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	2207      	movs	r2, #7
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_ADC_Init+0x27c>)
 8001756:	4013      	ands	r3, r2
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	429a      	cmp	r2, r3
 800175c:	d10b      	bne.n	8001776 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	2203      	movs	r2, #3
 800176a:	4393      	bics	r3, r2
 800176c:	2201      	movs	r2, #1
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001774:	e01c      	b.n	80017b0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	2212      	movs	r2, #18
 800177c:	4393      	bics	r3, r2
 800177e:	2210      	movs	r2, #16
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	2201      	movs	r2, #1
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001792:	230f      	movs	r3, #15
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800179a:	e009      	b.n	80017b0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	2210      	movs	r2, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80017a8:	230f      	movs	r3, #15
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	781b      	ldrb	r3, [r3, #0]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	fffffefd 	.word	0xfffffefd
 80017c4:	fffe0219 	.word	0xfffe0219
 80017c8:	833fffe7 	.word	0x833fffe7

080017cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d8:	2317      	movs	r3, #23
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d15e      	bne.n	80018aa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2234      	movs	r2, #52	; 0x34
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start_DMA+0x2e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e05e      	b.n	80018b8 <HAL_ADC_Start_DMA+0xec>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2234      	movs	r2, #52	; 0x34
 80017fe:	2101      	movs	r1, #1
 8001800:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	7e5b      	ldrb	r3, [r3, #25]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d007      	beq.n	800181a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800180a:	2317      	movs	r3, #23
 800180c:	18fc      	adds	r4, r7, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	0018      	movs	r0, r3
 8001812:	f000 f9f1 	bl	8001bf8 <ADC_Enable>
 8001816:	0003      	movs	r3, r0
 8001818:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800181a:	2317      	movs	r3, #23
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d146      	bne.n	80018b2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <HAL_ADC_Start_DMA+0xf4>)
 800182a:	4013      	ands	r3, r2
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0052      	lsls	r2, r2, #1
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_ADC_Start_DMA+0xf8>)
 800184a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_ADC_Start_DMA+0xfc>)
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_ADC_Start_DMA+0x100>)
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	221c      	movs	r2, #28
 8001862:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2110      	movs	r1, #16
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3340      	adds	r3, #64	; 0x40
 800188e:	0019      	movs	r1, r3
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f000 fc86 	bl	80021a4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2104      	movs	r1, #4
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e003      	b.n	80018b2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018aa:	2317      	movs	r3, #23
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018b2:	2317      	movs	r3, #23
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b007      	add	sp, #28
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	fffff0fe 	.word	0xfffff0fe
 80018c4:	08001e51 	.word	0x08001e51
 80018c8:	08001f05 	.word	0x08001f05
 80018cc:	08001f23 	.word	0x08001f23

080018d0 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	230f      	movs	r3, #15
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2234      	movs	r2, #52	; 0x34
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_Stop_DMA+0x1e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e058      	b.n	80019a0 <HAL_ADC_Stop_DMA+0xd0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2234      	movs	r2, #52	; 0x34
 80018f2:	2101      	movs	r1, #1
 80018f4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80018f6:	250f      	movs	r5, #15
 80018f8:	197c      	adds	r4, r7, r5
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 fa61 	bl	8001dc4 <ADC_ConversionStop>
 8001902:	0003      	movs	r3, r0
 8001904:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001906:	197b      	adds	r3, r7, r5
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d141      	bne.n	8001992 <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	438a      	bics	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	250f      	movs	r5, #15
 8001924:	197c      	adds	r4, r7, r5
 8001926:	0018      	movs	r0, r3
 8001928:	f000 fca2 	bl	8002270 <HAL_DMA_Abort>
 800192c:	0003      	movs	r3, r0
 800192e:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001930:	197b      	adds	r3, r7, r5
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2110      	movs	r1, #16
 8001950:	438a      	bics	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d108      	bne.n	8001970 <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800195e:	230f      	movs	r3, #15
 8001960:	18fc      	adds	r4, r7, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f000 f9c3 	bl	8001cf0 <ADC_Disable>
 800196a:	0003      	movs	r3, r0
 800196c:	7023      	strb	r3, [r4, #0]
 800196e:	e003      	b.n	8001978 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f9bc 	bl	8001cf0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001978:	230f      	movs	r3, #15
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_ADC_Stop_DMA+0xd8>)
 8001988:	4013      	ands	r3, r2
 800198a:	2201      	movs	r2, #1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2234      	movs	r2, #52	; 0x34
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800199a:	230f      	movs	r3, #15
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	fffffefe 	.word	0xfffffefe

080019ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d011      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x46>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d00d      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x46>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d009      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x46>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d005      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x46>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d001      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x46>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2234      	movs	r2, #52	; 0x34
 8001a26:	5c9b      	ldrb	r3, [r3, r2]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x54>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0d0      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1f6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2234      	movs	r2, #52	; 0x34
 8001a34:	2101      	movs	r1, #1
 8001a36:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4013      	ands	r3, r2
 8001a42:	d000      	beq.n	8001a46 <HAL_ADC_ConfigChannel+0x6a>
 8001a44:	e0b4      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a64      	ldr	r2, [pc, #400]	; (8001bdc <HAL_ADC_ConfigChannel+0x200>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x76>
 8001a50:	e082      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d037      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d033      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d02f      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d02b      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d027      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d023      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d01f      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	2b07      	cmp	r3, #7
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2107      	movs	r1, #7
 8001ab8:	400b      	ands	r3, r1
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d012      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2107      	movs	r1, #7
 8001aca:	438a      	bics	r2, r1
 8001acc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d007      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x120>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d003      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x120>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d163      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_ADC_ConfigChannel+0x204>)
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d009      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0x140>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b11      	cmp	r3, #17
 8001b0e:	d102      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x13a>
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	03db      	lsls	r3, r3, #15
 8001b14:	e004      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x144>
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	045b      	lsls	r3, r3, #17
 8001b1a:	e001      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x144>
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <HAL_ADC_ConfigChannel+0x204>)
 8001b22:	430b      	orrs	r3, r1
 8001b24:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d14a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_ADC_ConfigChannel+0x208>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	492d      	ldr	r1, [pc, #180]	; (8001be8 <HAL_ADC_ConfigChannel+0x20c>)
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fae7 	bl	8000108 <__udivsi3>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	189b      	adds	r3, r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x16e>
 8001b56:	e035      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	4099      	lsls	r1, r3
 8001b66:	000b      	movs	r3, r1
 8001b68:	43d9      	mvns	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	400a      	ands	r2, r1
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x1ae>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b11      	cmp	r3, #17
 8001b80:	d003      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x1ae>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d11c      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_ADC_ConfigChannel+0x204>)
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d007      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x1ca>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x1c6>
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_ADC_ConfigChannel+0x210>)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADC_ConfigChannel+0x214>)
 8001ba4:	e000      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_ADC_ConfigChannel+0x218>)
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_ADC_ConfigChannel+0x204>)
 8001baa:	400b      	ands	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e009      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001bcc:	230f      	movs	r3, #15
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b004      	add	sp, #16
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	00001001 	.word	0x00001001
 8001be0:	40012708 	.word	0x40012708
 8001be4:	20000010 	.word	0x20000010
 8001be8:	000f4240 	.word	0x000f4240
 8001bec:	ffbfffff 	.word	0xffbfffff
 8001bf0:	feffffff 	.word	0xfeffffff
 8001bf4:	ff7fffff 	.word	0xff7fffff

08001bf8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d112      	bne.n	8001c3c <ADC_Enable+0x44>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d009      	beq.n	8001c38 <ADC_Enable+0x40>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	401a      	ands	r2, r3
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d101      	bne.n	8001c3c <ADC_Enable+0x44>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <ADC_Enable+0x46>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d14b      	bne.n	8001cda <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <ADC_Enable+0xec>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	2210      	movs	r2, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e038      	b.n	8001cdc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <ADC_Enable+0xf0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	491b      	ldr	r1, [pc, #108]	; (8001cec <ADC_Enable+0xf4>)
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7fe fa41 	bl	8000108 <__udivsi3>
 8001c86:	0003      	movs	r3, r0
 8001c88:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c8a:	e002      	b.n	8001c92 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c98:	f7ff fc2c 	bl	80014f4 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ca0:	e014      	b.n	8001ccc <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ca2:	f7ff fc27 	bl	80014f4 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d90d      	bls.n	8001ccc <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e007      	b.n	8001cdc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d1e3      	bne.n	8001ca2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	80000017 	.word	0x80000017
 8001ce8:	20000010 	.word	0x20000010
 8001cec:	000f4240 	.word	0x000f4240

08001cf0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d112      	bne.n	8001d30 <ADC_Disable+0x40>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d009      	beq.n	8001d2c <ADC_Disable+0x3c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	401a      	ands	r2, r3
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d101      	bne.n	8001d30 <ADC_Disable+0x40>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <ADC_Disable+0x42>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d041      	beq.n	8001dba <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d110      	bne.n	8001d66 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2102      	movs	r1, #2
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff fbca 	bl	80014f4 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d64:	e022      	b.n	8001dac <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	2201      	movs	r2, #1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e01c      	b.n	8001dbc <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d82:	f7ff fbb7 	bl	80014f4 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d90d      	bls.n	8001dac <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	2210      	movs	r2, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	2201      	movs	r2, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d0e3      	beq.n	8001d82 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d034      	beq.n	8001e46 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d10d      	bne.n	8001e06 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001df4:	d107      	bne.n	8001e06 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2110      	movs	r1, #16
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e06:	f7ff fb75 	bl	80014f4 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e0e:	e014      	b.n	8001e3a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e10:	f7ff fb70 	bl	80014f4 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d90d      	bls.n	8001e3a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	2210      	movs	r2, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2201      	movs	r2, #1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e006      	b.n	8001e48 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d1e4      	bne.n	8001e10 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	2250      	movs	r2, #80	; 0x50
 8001e64:	4013      	ands	r3, r2
 8001e66:	d140      	bne.n	8001eea <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4013      	ands	r3, r2
 8001e82:	d12d      	bne.n	8001ee0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d129      	bne.n	8001ee0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d122      	bne.n	8001ee0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d110      	bne.n	8001ec8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	210c      	movs	r1, #12
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <ADC_DMAConvCplt+0xb0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec6:	e00b      	b.n	8001ee0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	2220      	movs	r2, #32
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2201      	movs	r2, #1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fd62 	bl	80019ac <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001ee8:	e005      	b.n	8001ef6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	4798      	blx	r3
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	fffffefe 	.word	0xfffffefe

08001f04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fd51 	bl	80019bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	2240      	movs	r2, #64	; 0x40
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2204      	movs	r2, #4
 8001f42:	431a      	orrs	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff fd3e 	bl	80019cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b004      	add	sp, #16
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	0002      	movs	r2, r0
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6a:	d809      	bhi.n	8001f80 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	001a      	movs	r2, r3
 8001f72:	231f      	movs	r3, #31
 8001f74:	401a      	ands	r2, r3
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_EnableIRQ+0x30>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4091      	lsls	r1, r2
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
  }
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa0:	d828      	bhi.n	8001ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <__NVIC_SetPriority+0xd4>)
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	33c0      	adds	r3, #192	; 0xc0
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	589b      	ldr	r3, [r3, r2]
 8001fb2:	1dfa      	adds	r2, r7, #7
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	2203      	movs	r2, #3
 8001fba:	400a      	ands	r2, r1
 8001fbc:	00d2      	lsls	r2, r2, #3
 8001fbe:	21ff      	movs	r1, #255	; 0xff
 8001fc0:	4091      	lsls	r1, r2
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	22ff      	movs	r2, #255	; 0xff
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	2303      	movs	r3, #3
 8001fda:	4003      	ands	r3, r0
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <__NVIC_SetPriority+0xd4>)
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	430a      	orrs	r2, r1
 8001fec:	33c0      	adds	r3, #192	; 0xc0
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ff2:	e031      	b.n	8002058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <__NVIC_SetPriority+0xd8>)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	400b      	ands	r3, r1
 8002000:	3b08      	subs	r3, #8
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3306      	adds	r3, #6
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	3304      	adds	r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1dfa      	adds	r2, r7, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	0011      	movs	r1, r2
 8002014:	2203      	movs	r2, #3
 8002016:	400a      	ands	r2, r1
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	21ff      	movs	r1, #255	; 0xff
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	401a      	ands	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	2303      	movs	r3, #3
 8002036:	4003      	ands	r3, r0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <__NVIC_SetPriority+0xd8>)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	001c      	movs	r4, r3
 8002044:	230f      	movs	r3, #15
 8002046:	4023      	ands	r3, r4
 8002048:	3b08      	subs	r3, #8
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	430a      	orrs	r2, r1
 800204e:	3306      	adds	r3, #6
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	18c3      	adds	r3, r0, r3
 8002054:	3304      	adds	r3, #4
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b003      	add	sp, #12
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <SysTick_Config+0x40>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e010      	b.n	80020a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <SysTick_Config+0x44>)
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	3a01      	subs	r2, #1
 8002084:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	2301      	movs	r3, #1
 8002088:	425b      	negs	r3, r3
 800208a:	2103      	movs	r1, #3
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff7d 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <SysTick_Config+0x44>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x44>)
 800209a:	2207      	movs	r2, #7
 800209c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	00ffffff 	.word	0x00ffffff
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	210f      	movs	r1, #15
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	1c02      	adds	r2, r0, #0
 80020c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	0002      	movs	r2, r0
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b25b      	sxtb	r3, r3
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ff33 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ffaf 	bl	8002068 <SysTick_Config>
 800210a:	0003      	movs	r3, r0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e036      	b.n	8002198 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2221      	movs	r2, #33	; 0x21
 800212e:	2102      	movs	r1, #2
 8002130:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_DMA_Init+0x8c>)
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800214a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f000 f9c4 	bl	8002508 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2221      	movs	r2, #33	; 0x21
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}  
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b004      	add	sp, #16
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	ffffc00f 	.word	0xffffc00f

080021a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Start_IT+0x24>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e04f      	b.n	8002268 <HAL_DMA_Start_IT+0xc4>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	2101      	movs	r1, #1
 80021ce:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d13a      	bne.n	8002252 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2221      	movs	r2, #33	; 0x21
 80021e0:	2102      	movs	r1, #2
 80021e2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	438a      	bics	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f955 	bl	80024b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	210e      	movs	r1, #14
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e00f      	b.n	8002240 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	210a      	movs	r1, #10
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2104      	movs	r1, #4
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e007      	b.n	8002262 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800225a:	2317      	movs	r3, #23
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002262:	2317      	movs	r3, #23
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
} 
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b006      	add	sp, #24
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2221      	movs	r2, #33	; 0x21
 800227c:	5c9b      	ldrb	r3, [r3, r2]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d008      	beq.n	8002296 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e020      	b.n	80022d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	210e      	movs	r1, #14
 80022a2:	438a      	bics	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	438a      	bics	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2101      	movs	r1, #1
 80022c0:	4091      	lsls	r1, r2
 80022c2:	000a      	movs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2221      	movs	r2, #33	; 0x21
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	230f      	movs	r3, #15
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2204      	movs	r2, #4
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002302:	230f      	movs	r3, #15
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e028      	b.n	800235e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	210e      	movs	r1, #14
 8002318:	438a      	bics	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	2101      	movs	r1, #1
 8002336:	4091      	lsls	r1, r2
 8002338:	000a      	movs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2221      	movs	r2, #33	; 0x21
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	0010      	movs	r0, r2
 800235c:	4798      	blx	r3
    } 
  }
  return status;
 800235e:	230f      	movs	r3, #15
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	781b      	ldrb	r3, [r3, #0]
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b004      	add	sp, #16
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2204      	movs	r2, #4
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	d024      	beq.n	80023de <HAL_DMA_IRQHandler+0x72>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2204      	movs	r2, #4
 8002398:	4013      	ands	r3, r2
 800239a:	d020      	beq.n	80023de <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2220      	movs	r2, #32
 80023a4:	4013      	ands	r3, r2
 80023a6:	d107      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2104      	movs	r1, #4
 80023b4:	438a      	bics	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	2104      	movs	r1, #4
 80023c2:	4091      	lsls	r1, r2
 80023c4:	000a      	movs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d100      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x66>
 80023d0:	e06a      	b.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	0010      	movs	r0, r2
 80023da:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80023dc:	e064      	b.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2202      	movs	r2, #2
 80023e4:	409a      	lsls	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4013      	ands	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_DMA_IRQHandler+0xda>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d027      	beq.n	8002446 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2220      	movs	r2, #32
 80023fe:	4013      	ands	r3, r2
 8002400:	d10b      	bne.n	800241a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	210a      	movs	r1, #10
 800240e:	438a      	bics	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2102      	movs	r1, #2
 8002424:	4091      	lsls	r1, r2
 8002426:	000a      	movs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d036      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	0010      	movs	r0, r2
 8002442:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002444:	e030      	b.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2208      	movs	r2, #8
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	d028      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2208      	movs	r2, #8
 800245a:	4013      	ands	r3, r2
 800245c:	d024      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	210e      	movs	r1, #14
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2101      	movs	r1, #1
 8002478:	4091      	lsls	r1, r2
 800247a:	000a      	movs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2221      	movs	r2, #33	; 0x21
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	0010      	movs	r0, r2
 80024a4:	4798      	blx	r3
    }
   }
}  
 80024a6:	e7ff      	b.n	80024a8 <HAL_DMA_IRQHandler+0x13c>
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	2101      	movs	r1, #1
 80024c8:	4091      	lsls	r1, r2
 80024ca:	000a      	movs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d108      	bne.n	80024f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024ee:	e007      	b.n	8002500 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	60da      	str	r2, [r3, #12]
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <DMA_CalcBaseAndBitshift+0x30>)
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	2114      	movs	r1, #20
 800251c:	0018      	movs	r0, r3
 800251e:	f7fd fdf3 	bl	8000108 <__udivsi3>
 8002522:	0003      	movs	r3, r0
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a03      	ldr	r2, [pc, #12]	; (800253c <DMA_CalcBaseAndBitshift+0x34>)
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}
 8002538:	bffdfff8 	.word	0xbffdfff8
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254e:	e14f      	b.n	80027f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4091      	lsls	r1, r2
 800255a:	000a      	movs	r2, r1
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d100      	bne.n	8002568 <HAL_GPIO_Init+0x28>
 8002566:	e140      	b.n	80027ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d00b      	beq.n	8002588 <HAL_GPIO_Init+0x48>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257c:	2b11      	cmp	r3, #17
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b12      	cmp	r3, #18
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	2201      	movs	r2, #1
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0xea>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b12      	cmp	r3, #18
 8002628:	d123      	bne.n	8002672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	58d3      	ldr	r3, [r2, r3]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2207      	movs	r2, #7
 800263c:	4013      	ands	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	43da      	mvns	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2107      	movs	r1, #7
 8002656:	400b      	ands	r3, r1
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	6939      	ldr	r1, [r7, #16]
 8002670:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	43da      	mvns	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2203      	movs	r2, #3
 8002690:	401a      	ands	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	0013      	movs	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	055b      	lsls	r3, r3, #21
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_GPIO_Init+0x174>
 80026b2:	e09a      	b.n	80027ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b4:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_GPIO_Init+0x2c8>)
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x2c8>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	619a      	str	r2, [r3, #24]
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_GPIO_Init+0x2c8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x2cc>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	589b      	ldr	r3, [r3, r2]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2203      	movs	r2, #3
 80026de:	4013      	ands	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	409a      	lsls	r2, r3
 80026e6:	0013      	movs	r3, r2
 80026e8:	43da      	mvns	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	2390      	movs	r3, #144	; 0x90
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x1e2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a44      	ldr	r2, [pc, #272]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x1de>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a43      	ldr	r2, [pc, #268]	; (8002814 <HAL_GPIO_Init+0x2d4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x1da>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a42      	ldr	r2, [pc, #264]	; (8002818 <HAL_GPIO_Init+0x2d8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x1d6>
 8002712:	2303      	movs	r3, #3
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002716:	2305      	movs	r3, #5
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x1e4>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x1e4>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002722:	2300      	movs	r3, #0
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	2103      	movs	r1, #3
 8002728:	400a      	ands	r2, r1
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x2cc>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_GPIO_Init+0x2dc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	025b      	lsls	r3, r3, #9
 800275a:	4013      	ands	r3, r2
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_GPIO_Init+0x2dc>)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_GPIO_Init+0x2dc>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43da      	mvns	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_GPIO_Init+0x2dc>)
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_GPIO_Init+0x2dc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43da      	mvns	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	035b      	lsls	r3, r3, #13
 80027ae:	4013      	ands	r3, r2
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_GPIO_Init+0x2dc>)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_GPIO_Init+0x2dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	039b      	lsls	r3, r3, #14
 80027d8:	4013      	ands	r3, r2
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_GPIO_Init+0x2dc>)
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	1e13      	subs	r3, r2, #0
 80027fa:	d000      	beq.n	80027fe <HAL_GPIO_Init+0x2be>
 80027fc:	e6a8      	b.n	8002550 <HAL_GPIO_Init+0x10>
  } 
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000
 8002810:	48000400 	.word	0x48000400
 8002814:	48000800 	.word	0x48000800
 8002818:	48000c00 	.word	0x48000c00
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	000a      	movs	r2, r1
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	1cba      	adds	r2, r7, #2
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	4013      	ands	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800283a:	230f      	movs	r3, #15
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e003      	b.n	800284c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
  }
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	0008      	movs	r0, r1
 8002864:	0011      	movs	r1, r2
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	1c02      	adds	r2, r0, #0
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	1c7b      	adds	r3, r7, #1
 800286e:	1c0a      	adds	r2, r1, #0
 8002870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002872:	1c7b      	adds	r3, r7, #1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002882:	e003      	b.n	800288c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002884:	1cbb      	adds	r3, r7, #2
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e303      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d100      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1e>
 80028b0:	e08d      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028b2:	4bc4      	ldr	r3, [pc, #784]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	220c      	movs	r2, #12
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00e      	beq.n	80028dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028be:	4bc1      	ldr	r3, [pc, #772]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	220c      	movs	r2, #12
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
 80028ca:	4bbe      	ldr	r3, [pc, #760]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	401a      	ands	r2, r3
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	025b      	lsls	r3, r3, #9
 80028d8:	429a      	cmp	r2, r3
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4bb9      	ldr	r3, [pc, #740]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4013      	ands	r3, r2
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x56>
 80028e8:	e070      	b.n	80029cc <HAL_RCC_OscConfig+0x138>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d000      	beq.n	80028f4 <HAL_RCC_OscConfig+0x60>
 80028f2:	e06b      	b.n	80029cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2da      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x7c>
 8002900:	4bb0      	ldr	r3, [pc, #704]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4baf      	ldr	r3, [pc, #700]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0249      	lsls	r1, r1, #9
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e02f      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x9e>
 8002918:	4baa      	ldr	r3, [pc, #680]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4ba9      	ldr	r3, [pc, #676]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800291e:	49aa      	ldr	r1, [pc, #680]	; (8002bc8 <HAL_RCC_OscConfig+0x334>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4ba7      	ldr	r3, [pc, #668]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4ba6      	ldr	r3, [pc, #664]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800292a:	49a8      	ldr	r1, [pc, #672]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e01e      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0xc4>
 800293a:	4ba2      	ldr	r3, [pc, #648]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4ba1      	ldr	r3, [pc, #644]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	02c9      	lsls	r1, r1, #11
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b9d      	ldr	r3, [pc, #628]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0249      	lsls	r1, r1, #9
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002958:	4b9a      	ldr	r3, [pc, #616]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b99      	ldr	r3, [pc, #612]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800295e:	499a      	ldr	r1, [pc, #616]	; (8002bc8 <HAL_RCC_OscConfig+0x334>)
 8002960:	400a      	ands	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b97      	ldr	r3, [pc, #604]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b96      	ldr	r3, [pc, #600]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 800296a:	4998      	ldr	r1, [pc, #608]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d014      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fdbc 	bl	80014f4 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002982:	f7fe fdb7 	bl	80014f4 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e28c      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002994:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4013      	ands	r3, r2
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0xee>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fda7 	bl	80014f4 <HAL_GetTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fda2 	bl	80014f4 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e277      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x118>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x146>
 80029d8:	e069      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	220c      	movs	r2, #12
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	220c      	movs	r2, #12
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d11c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x196>
 80029f0:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	4013      	ands	r3, r2
 80029fa:	d116      	bne.n	8002a2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fc:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e24d      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	22f8      	movs	r2, #248	; 0xf8
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00da      	lsls	r2, r3, #3
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a28:	e041      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a32:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fd59 	bl	80014f4 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe fd54 	bl	80014f4 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e229      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f1      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22f8      	movs	r2, #248	; 0xf8
 8002a6a:	4393      	bics	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00da      	lsls	r2, r3, #3
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e018      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7c:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	438a      	bics	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fd34 	bl	80014f4 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fd2f 	bl	80014f4 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e204      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d036      	beq.n	8002b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d019      	beq.n	8002af4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac0:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fd12 	bl	80014f4 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fd0d 	bl	80014f4 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1e2      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d0f1      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x242>
 8002af2:	e018      	b.n	8002b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fcf8 	bl	80014f4 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fcf3 	bl	80014f4 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1c8      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f1      	bne.n	8002b0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <HAL_RCC_OscConfig+0x29e>
 8002b30:	e0b6      	b.n	8002ca0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	4013      	ands	r3, r2
 8002b44:	d111      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0549      	lsls	r1, r1, #21
 8002b50:	430a      	orrs	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	055b      	lsls	r3, r3, #21
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b62:	231f      	movs	r3, #31
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x33c>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d11a      	bne.n	8002bac <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_RCC_OscConfig+0x33c>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_OscConfig+0x33c>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0049      	lsls	r1, r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fcb6 	bl	80014f4 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe fcb1 	bl	80014f4 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e186      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x33c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x340>
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e036      	b.n	8002c30 <HAL_RCC_OscConfig+0x39c>
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	fffeffff 	.word	0xfffeffff
 8002bcc:	fffbffff 	.word	0xfffbffff
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x362>
 8002bdc:	4bb6      	ldr	r3, [pc, #728]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	4bb5      	ldr	r3, [pc, #724]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	621a      	str	r2, [r3, #32]
 8002be8:	4bb3      	ldr	r3, [pc, #716]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	4bb2      	ldr	r3, [pc, #712]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002bee:	2104      	movs	r1, #4
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	621a      	str	r2, [r3, #32]
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x39c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x384>
 8002bfe:	4bae      	ldr	r3, [pc, #696]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4bad      	ldr	r3, [pc, #692]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c04:	2104      	movs	r1, #4
 8002c06:	430a      	orrs	r2, r1
 8002c08:	621a      	str	r2, [r3, #32]
 8002c0a:	4bab      	ldr	r3, [pc, #684]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	4baa      	ldr	r3, [pc, #680]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	621a      	str	r2, [r3, #32]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x39c>
 8002c18:	4ba7      	ldr	r3, [pc, #668]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	4ba6      	ldr	r3, [pc, #664]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	438a      	bics	r2, r1
 8002c22:	621a      	str	r2, [r3, #32]
 8002c24:	4ba4      	ldr	r3, [pc, #656]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c26:	6a1a      	ldr	r2, [r3, #32]
 8002c28:	4ba3      	ldr	r3, [pc, #652]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d014      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe fc5c 	bl	80014f4 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fc57 	bl	80014f4 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a9b      	ldr	r2, [pc, #620]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e12b      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	4b98      	ldr	r3, [pc, #608]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3ae>
 8002c60:	e013      	b.n	8002c8a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fc47 	bl	80014f4 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fc42 	bl	80014f4 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	4a91      	ldr	r2, [pc, #580]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e116      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c8a:	231f      	movs	r3, #31
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	4b87      	ldr	r3, [pc, #540]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c9a:	4989      	ldr	r1, [pc, #548]	; (8002ec0 <HAL_RCC_OscConfig+0x62c>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12a      	bne.n	8002d08 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cb2:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb6:	4b80      	ldr	r3, [pc, #512]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002cb8:	2104      	movs	r1, #4
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cbe:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc2:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fc13 	bl	80014f4 <HAL_GetTick>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cd4:	f7fe fc0e 	bl	80014f4 <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0e3      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ce6:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d0f1      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	22f8      	movs	r2, #248	; 0xf8
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	00da      	lsls	r2, r3, #3
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
 8002d06:	e034      	b.n	8002d72 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	3305      	adds	r3, #5
 8002d0e:	d111      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d10:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d14:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d16:	2104      	movs	r1, #4
 8002d18:	438a      	bics	r2, r1
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d1c:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	22f8      	movs	r2, #248	; 0xf8
 8002d22:	4393      	bics	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	00da      	lsls	r2, r3, #3
 8002d2c:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
 8002d32:	e01e      	b.n	8002d72 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d34:	4b60      	ldr	r3, [pc, #384]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d38:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d40:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fbd2 	bl	80014f4 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d56:	f7fe fbcd 	bl	80014f4 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0a2      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1f1      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d100      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4e8>
 8002d7a:	e097      	b.n	8002eac <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	220c      	movs	r2, #12
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d100      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
 8002d88:	e06b      	b.n	8002e62 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d14c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002d98:	494a      	ldr	r1, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x630>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fba9 	bl	80014f4 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fba4 	bl	80014f4 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e079      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	049b      	lsls	r3, r3, #18
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	220f      	movs	r2, #15
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_RCC_OscConfig+0x634>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	431a      	orrs	r2, r3
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0449      	lsls	r1, r1, #17
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe fb77 	bl	80014f4 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fb72 	bl	80014f4 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e047      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	049b      	lsls	r3, r3, #18
 8002e26:	4013      	ands	r3, r2
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x578>
 8002e2a:	e03f      	b.n	8002eac <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e32:	4924      	ldr	r1, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x630>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fb5c 	bl	80014f4 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fb57 	bl	80014f4 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e02c      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	049b      	lsls	r3, r3, #18
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5ae>
 8002e60:	e024      	b.n	8002eac <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e01f      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10e      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	23f0      	movs	r3, #240	; 0xf0
 8002e9c:	039b      	lsls	r3, r3, #14
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b008      	add	sp, #32
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	00001388 	.word	0x00001388
 8002ec0:	efffffff 	.word	0xefffffff
 8002ec4:	feffffff 	.word	0xfeffffff
 8002ec8:	ffc2ffff 	.word	0xffc2ffff

08002ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b3      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d911      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e09a      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2204      	movs	r2, #4
 8002f22:	4013      	ands	r3, r2
 8002f24:	d006      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f26:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f2c:	21e0      	movs	r1, #224	; 0xe0
 8002f2e:	00c9      	lsls	r1, r1, #3
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	22f0      	movs	r2, #240	; 0xf0
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	029b      	lsls	r3, r3, #10
 8002f62:	4013      	ands	r3, r2
 8002f64:	d114      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06e      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	049b      	lsls	r3, r3, #18
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e062      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e05b      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f90:	4b30      	ldr	r3, [pc, #192]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2203      	movs	r2, #3
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe faa6 	bl	80014f4 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fe faa1 	bl	80014f4 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_RCC_ClockConfig+0x18c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e042      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	401a      	ands	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1ec      	bne.n	8002fae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d211      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4393      	bics	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x184>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e020      	b.n	8003048 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2204      	movs	r2, #4
 800300c:	4013      	ands	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a11      	ldr	r2, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x190>)
 8003016:	4013      	ands	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003024:	f000 f820 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003028:	0001      	movs	r1, r0
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x188>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	220f      	movs	r2, #15
 8003032:	4013      	ands	r3, r2
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x194>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	000a      	movs	r2, r1
 800303a:	40da      	lsrs	r2, r3
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x198>)
 800303e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe fa11 	bl	8001468 <HAL_InitTick>
  
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40022000 	.word	0x40022000
 8003054:	40021000 	.word	0x40021000
 8003058:	00001388 	.word	0x00001388
 800305c:	fffff8ff 	.word	0xfffff8ff
 8003060:	08004834 	.word	0x08004834
 8003064:	20000010 	.word	0x20000010

08003068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08f      	sub	sp, #60	; 0x3c
 800306c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800306e:	2314      	movs	r3, #20
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003074:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003076:	c313      	stmia	r3!, {r0, r1, r4}
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	4a29      	ldr	r2, [pc, #164]	; (8003124 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003080:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003082:	c313      	stmia	r3!, {r0, r1, r4}
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	220c      	movs	r2, #12
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d002      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x4a>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d003      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x50>
 80030b0:	e02d      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b6:	e02d      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	220f      	movs	r2, #15
 80030be:	4013      	ands	r3, r2
 80030c0:	2214      	movs	r2, #20
 80030c2:	18ba      	adds	r2, r7, r2
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	220f      	movs	r2, #15
 80030ce:	4013      	ands	r3, r2
 80030d0:	1d3a      	adds	r2, r7, #4
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	4013      	ands	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	4812      	ldr	r0, [pc, #72]	; (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e4:	f7fd f810 	bl	8000108 <__udivsi3>
 80030e8:	0003      	movs	r3, r0
 80030ea:	001a      	movs	r2, r3
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	4353      	muls	r3, r2
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	e009      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f6:	000a      	movs	r2, r1
 80030f8:	0152      	lsls	r2, r2, #5
 80030fa:	1a52      	subs	r2, r2, r1
 80030fc:	0193      	lsls	r3, r2, #6
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	185b      	adds	r3, r3, r1
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003112:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b00f      	add	sp, #60	; 0x3c
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	08004814 	.word	0x08004814
 8003124:	08004824 	.word	0x08004824
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <HAL_RCC_GetHCLKFreq+0x10>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000010 	.word	0x20000010

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003148:	f7ff fff2 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 800314c:	0001      	movs	r1, r0
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	2207      	movs	r2, #7
 8003156:	4013      	ands	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_RCC_GetPCLK1Freq+0x28>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	40d9      	lsrs	r1, r3
 800315e:	000b      	movs	r3, r1
}    
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40021000 	.word	0x40021000
 800316c:	08004844 	.word	0x08004844

08003170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	025b      	lsls	r3, r3, #9
 8003188:	4013      	ands	r3, r2
 800318a:	d100      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800318c:	e08f      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2317      	movs	r3, #23
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	055b      	lsls	r3, r3, #21
 800319e:	4013      	ands	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0549      	lsls	r1, r1, #21
 80031ac:	430a      	orrs	r2, r1
 80031ae:	61da      	str	r2, [r3, #28]
 80031b0:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	055b      	lsls	r3, r3, #21
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2317      	movs	r3, #23
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d11a      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0049      	lsls	r1, r1, #1
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e0:	f7fe f988 	bl	80014f4 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fe f983 	bl	80014f4 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e087      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d0f0      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003208:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	23c0      	movs	r3, #192	; 0xc0
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d034      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	23c0      	movs	r3, #192	; 0xc0
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4013      	ands	r3, r2
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	429a      	cmp	r2, r3
 8003228:	d02c      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	0249      	lsls	r1, r1, #9
 800323e:	430a      	orrs	r2, r1
 8003240:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003248:	4935      	ldr	r1, [pc, #212]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800324a:	400a      	ands	r2, r1
 800324c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe f94a 	bl	80014f4 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	e009      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe f945 	bl	80014f4 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e048      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	2202      	movs	r2, #2
 8003280:	4013      	ands	r3, r2
 8003282:	d0f0      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4a24      	ldr	r2, [pc, #144]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003294:	430a      	orrs	r2, r1
 8003296:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003298:	2317      	movs	r3, #23
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032a8:	491f      	ldr	r1, [pc, #124]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2203      	movs	r2, #3
 80032be:	4393      	bics	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	4013      	ands	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	2210      	movs	r2, #16
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	4393      	bics	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003306:	430a      	orrs	r2, r1
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b006      	add	sp, #24
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	fffffcff 	.word	0xfffffcff
 8003320:	fffeffff 	.word	0xfffeffff
 8003324:	00001388 	.word	0x00001388
 8003328:	efffffff 	.word	0xefffffff

0800332c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e044      	b.n	80033c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2270      	movs	r2, #112	; 0x70
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd ff35 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2224      	movs	r2, #36	; 0x24
 800335a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fa04 	bl	800377c <UART_SetConfig>
 8003374:	0003      	movs	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e024      	b.n	80033c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 fb7d 	bl	8003a88 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	490d      	ldr	r1, [pc, #52]	; (80033d0 <HAL_UART_Init+0xa4>)
 800339a:	400a      	ands	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	212a      	movs	r1, #42	; 0x2a
 80033aa:	438a      	bics	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fc15 	bl	8003bf0 <UART_CheckIdleState>
 80033c6:	0003      	movs	r3, r0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	ffffb7ff 	.word	0xffffb7ff

080033d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	1dbb      	adds	r3, r7, #6
 80033e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d000      	beq.n	80033ec <HAL_UART_Transmit_DMA+0x18>
 80033ea:	e077      	b.n	80034dc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_UART_Transmit_DMA+0x26>
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06f      	b.n	80034de <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	429a      	cmp	r2, r3
 8003408:	d109      	bne.n	800341e <HAL_UART_Transmit_DMA+0x4a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2201      	movs	r2, #1
 8003416:	4013      	ands	r3, r2
 8003418:	d001      	beq.n	800341e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e05f      	b.n	80034de <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2270      	movs	r2, #112	; 0x70
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UART_Transmit_DMA+0x58>
 8003428:	2302      	movs	r3, #2
 800342a:	e058      	b.n	80034de <HAL_UART_Transmit_DMA+0x10a>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2270      	movs	r2, #112	; 0x70
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1dba      	adds	r2, r7, #6
 800343e:	2150      	movs	r1, #80	; 0x50
 8003440:	8812      	ldrh	r2, [r2, #0]
 8003442:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1dba      	adds	r2, r7, #6
 8003448:	2152      	movs	r1, #82	; 0x52
 800344a:	8812      	ldrh	r2, [r2, #0]
 800344c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2221      	movs	r2, #33	; 0x21
 8003458:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02a      	beq.n	80034b8 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_UART_Transmit_DMA+0x114>)
 8003468:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_UART_Transmit_DMA+0x118>)
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003476:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <HAL_UART_Transmit_DMA+0x11c>)
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	0019      	movs	r1, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3328      	adds	r3, #40	; 0x28
 8003492:	001a      	movs	r2, r3
 8003494:	1dbb      	adds	r3, r7, #6
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f7fe fe84 	bl	80021a4 <HAL_DMA_Start_IT>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2210      	movs	r2, #16
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2270      	movs	r2, #112	; 0x70
 80034aa:	2100      	movs	r1, #0
 80034ac:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e012      	b.n	80034de <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2270      	movs	r2, #112	; 0x70
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	08003de1 	.word	0x08003de1
 80034ec:	08003e31 	.word	0x08003e31
 80034f0:	08003e4f 	.word	0x08003e4f

080034f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4a93      	ldr	r2, [pc, #588]	; (8003764 <HAL_UART_IRQHandler+0x270>)
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d112      	bne.n	8003548 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2220      	movs	r2, #32
 8003526:	4013      	ands	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2220      	movs	r2, #32
 800352e:	4013      	ands	r3, r2
 8003530:	d00a      	beq.n	8003548 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_UART_IRQHandler+0x48>
 800353a:	e10b      	b.n	8003754 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	0010      	movs	r0, r2
 8003544:	4798      	blx	r3
      }
      return;
 8003546:	e105      	b.n	8003754 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d100      	bne.n	8003550 <HAL_UART_IRQHandler+0x5c>
 800354e:	e0cd      	b.n	80036ec <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	d105      	bne.n	8003564 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	2390      	movs	r3, #144	; 0x90
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4013      	ands	r3, r2
 8003560:	d100      	bne.n	8003564 <HAL_UART_IRQHandler+0x70>
 8003562:	e0c3      	b.n	80036ec <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_UART_IRQHandler+0x96>
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4013      	ands	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2201      	movs	r2, #1
 800357c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003582:	2201      	movs	r2, #1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2202      	movs	r2, #2
 800358e:	4013      	ands	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_UART_IRQHandler+0xba>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2202      	movs	r2, #2
 80035a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a6:	2204      	movs	r2, #4
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2204      	movs	r2, #4
 80035b2:	4013      	ands	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_UART_IRQHandler+0xde>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ca:	2202      	movs	r2, #2
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2208      	movs	r2, #8
 80035d6:	4013      	ands	r3, r2
 80035d8:	d011      	beq.n	80035fe <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2220      	movs	r2, #32
 80035de:	4013      	ands	r3, r2
 80035e0:	d103      	bne.n	80035ea <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035e8:	d009      	beq.n	80035fe <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	2208      	movs	r2, #8
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4013      	ands	r3, r2
 8003606:	d00f      	beq.n	8003628 <HAL_UART_IRQHandler+0x134>
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	04db      	lsls	r3, r3, #19
 800360e:	4013      	ands	r3, r2
 8003610:	d00a      	beq.n	8003628 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003620:	2220      	movs	r2, #32
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d100      	bne.n	8003632 <HAL_UART_IRQHandler+0x13e>
 8003630:	e092      	b.n	8003758 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2220      	movs	r2, #32
 8003636:	4013      	ands	r3, r2
 8003638:	d00c      	beq.n	8003654 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2220      	movs	r2, #32
 800363e:	4013      	ands	r3, r2
 8003640:	d008      	beq.n	8003654 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	0010      	movs	r0, r2
 8003652:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003658:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	4013      	ands	r3, r2
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d003      	beq.n	8003670 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2228      	movs	r2, #40	; 0x28
 800366c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800366e:	d033      	beq.n	80036d8 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fb94 	bl	8003da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	4013      	ands	r3, r2
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d123      	bne.n	80036ce <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	438a      	bics	r2, r1
 8003694:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a2:	4a31      	ldr	r2, [pc, #196]	; (8003768 <HAL_UART_IRQHandler+0x274>)
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7fe fe18 	bl	80022e0 <HAL_DMA_Abort_IT>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d019      	beq.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	0018      	movs	r0, r3
 80036c0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c2:	e011      	b.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f850 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e00c      	b.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f84b 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d6:	e007      	b.n	80036e8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f846 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80036e6:	e037      	b.n	8003758 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	46c0      	nop			; (mov r8, r8)
    return;
 80036ea:	e035      	b.n	8003758 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	035b      	lsls	r3, r3, #13
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_UART_IRQHandler+0x220>
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	03db      	lsls	r3, r3, #15
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	0352      	lsls	r2, r2, #13
 8003708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 fc0e 	bl	8003f2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003712:	e024      	b.n	800375e <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	4013      	ands	r3, r2
 800371a:	d00d      	beq.n	8003738 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	4013      	ands	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	0010      	movs	r0, r2
 8003734:	4798      	blx	r3
    }
    return;
 8003736:	e011      	b.n	800375c <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	4013      	ands	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_UART_IRQHandler+0x26a>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	4013      	ands	r3, r2
 8003746:	d00a      	beq.n	800375e <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 fbd5 	bl	8003efa <UART_EndTransmit_IT>
    return;
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	e004      	b.n	800375e <HAL_UART_IRQHandler+0x26a>
      return;
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	e002      	b.n	800375e <HAL_UART_IRQHandler+0x26a>
    return;
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	e000      	b.n	800375e <HAL_UART_IRQHandler+0x26a>
    return;
 800375c:	46c0      	nop			; (mov r8, r8)
  }

}
 800375e:	46bd      	mov	sp, r7
 8003760:	b008      	add	sp, #32
 8003762:	bd80      	pop	{r7, pc}
 8003764:	0000080f 	.word	0x0000080f
 8003768:	08003ecd 	.word	0x08003ecd

0800376c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003788:	2317      	movs	r3, #23
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4aad      	ldr	r2, [pc, #692]	; (8003a64 <UART_SetConfig+0x2e8>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4aa8      	ldr	r2, [pc, #672]	; (8003a68 <UART_SetConfig+0x2ec>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a9f      	ldr	r2, [pc, #636]	; (8003a6c <UART_SetConfig+0x2f0>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a9b      	ldr	r2, [pc, #620]	; (8003a70 <UART_SetConfig+0x2f4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d125      	bne.n	8003852 <UART_SetConfig+0xd6>
 8003806:	4b9b      	ldr	r3, [pc, #620]	; (8003a74 <UART_SetConfig+0x2f8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	2203      	movs	r2, #3
 800380c:	4013      	ands	r3, r2
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00f      	beq.n	8003832 <UART_SetConfig+0xb6>
 8003812:	d304      	bcc.n	800381e <UART_SetConfig+0xa2>
 8003814:	2b02      	cmp	r3, #2
 8003816:	d011      	beq.n	800383c <UART_SetConfig+0xc0>
 8003818:	2b03      	cmp	r3, #3
 800381a:	d005      	beq.n	8003828 <UART_SetConfig+0xac>
 800381c:	e013      	b.n	8003846 <UART_SetConfig+0xca>
 800381e:	231f      	movs	r3, #31
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e022      	b.n	800386e <UART_SetConfig+0xf2>
 8003828:	231f      	movs	r3, #31
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2202      	movs	r2, #2
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e01d      	b.n	800386e <UART_SetConfig+0xf2>
 8003832:	231f      	movs	r3, #31
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e018      	b.n	800386e <UART_SetConfig+0xf2>
 800383c:	231f      	movs	r3, #31
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2208      	movs	r2, #8
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e013      	b.n	800386e <UART_SetConfig+0xf2>
 8003846:	231f      	movs	r3, #31
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2210      	movs	r2, #16
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	e00d      	b.n	800386e <UART_SetConfig+0xf2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a88      	ldr	r2, [pc, #544]	; (8003a78 <UART_SetConfig+0x2fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d104      	bne.n	8003866 <UART_SetConfig+0xea>
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e003      	b.n	800386e <UART_SetConfig+0xf2>
 8003866:	231f      	movs	r3, #31
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2210      	movs	r2, #16
 800386c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	429a      	cmp	r2, r3
 8003878:	d000      	beq.n	800387c <UART_SetConfig+0x100>
 800387a:	e07d      	b.n	8003978 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800387c:	231f      	movs	r3, #31
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d01c      	beq.n	80038c0 <UART_SetConfig+0x144>
 8003886:	dc02      	bgt.n	800388e <UART_SetConfig+0x112>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <UART_SetConfig+0x11c>
 800388c:	e04b      	b.n	8003926 <UART_SetConfig+0x1aa>
 800388e:	2b04      	cmp	r3, #4
 8003890:	d025      	beq.n	80038de <UART_SetConfig+0x162>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d037      	beq.n	8003906 <UART_SetConfig+0x18a>
 8003896:	e046      	b.n	8003926 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7ff fc54 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 800389c:	0003      	movs	r3, r0
 800389e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	005a      	lsls	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	18d2      	adds	r2, r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0019      	movs	r1, r3
 80038b2:	0010      	movs	r0, r2
 80038b4:	f7fc fc28 	bl	8000108 <__udivsi3>
 80038b8:	0003      	movs	r3, r0
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	61bb      	str	r3, [r7, #24]
        break;
 80038be:	e037      	b.n	8003930 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	4a6d      	ldr	r2, [pc, #436]	; (8003a7c <UART_SetConfig+0x300>)
 80038c8:	189a      	adds	r2, r3, r2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0019      	movs	r1, r3
 80038d0:	0010      	movs	r0, r2
 80038d2:	f7fc fc19 	bl	8000108 <__udivsi3>
 80038d6:	0003      	movs	r3, r0
 80038d8:	b29b      	uxth	r3, r3
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e028      	b.n	8003930 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038de:	f7ff fbc3 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 80038e2:	0003      	movs	r3, r0
 80038e4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	18d2      	adds	r2, r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0019      	movs	r1, r3
 80038f8:	0010      	movs	r0, r2
 80038fa:	f7fc fc05 	bl	8000108 <__udivsi3>
 80038fe:	0003      	movs	r3, r0
 8003900:	b29b      	uxth	r3, r3
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e014      	b.n	8003930 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0252      	lsls	r2, r2, #9
 8003910:	189a      	adds	r2, r3, r2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	0019      	movs	r1, r3
 8003918:	0010      	movs	r0, r2
 800391a:	f7fc fbf5 	bl	8000108 <__udivsi3>
 800391e:	0003      	movs	r3, r0
 8003920:	b29b      	uxth	r3, r3
 8003922:	61bb      	str	r3, [r7, #24]
        break;
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003926:	2317      	movs	r3, #23
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
        break;
 800392e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	d91b      	bls.n	800396e <UART_SetConfig+0x1f2>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <UART_SetConfig+0x304>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d817      	bhi.n	800396e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	b29a      	uxth	r2, r3
 8003942:	200a      	movs	r0, #10
 8003944:	183b      	adds	r3, r7, r0
 8003946:	210f      	movs	r1, #15
 8003948:	438a      	bics	r2, r1
 800394a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	b299      	uxth	r1, r3
 8003958:	183b      	adds	r3, r7, r0
 800395a:	183a      	adds	r2, r7, r0
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	183a      	adds	r2, r7, r0
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e06c      	b.n	8003a48 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800396e:	2317      	movs	r3, #23
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e067      	b.n	8003a48 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003978:	231f      	movs	r3, #31
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d01b      	beq.n	80039ba <UART_SetConfig+0x23e>
 8003982:	dc02      	bgt.n	800398a <UART_SetConfig+0x20e>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <UART_SetConfig+0x218>
 8003988:	e049      	b.n	8003a1e <UART_SetConfig+0x2a2>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d024      	beq.n	80039d8 <UART_SetConfig+0x25c>
 800398e:	2b08      	cmp	r3, #8
 8003990:	d035      	beq.n	80039fe <UART_SetConfig+0x282>
 8003992:	e044      	b.n	8003a1e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7ff fbd6 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8003998:	0003      	movs	r3, r0
 800399a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	085a      	lsrs	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	18d2      	adds	r2, r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0019      	movs	r1, r3
 80039ac:	0010      	movs	r0, r2
 80039ae:	f7fc fbab 	bl	8000108 <__udivsi3>
 80039b2:	0003      	movs	r3, r0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	61bb      	str	r3, [r7, #24]
        break;
 80039b8:	e036      	b.n	8003a28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <UART_SetConfig+0x308>)
 80039c2:	189a      	adds	r2, r3, r2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0019      	movs	r1, r3
 80039ca:	0010      	movs	r0, r2
 80039cc:	f7fc fb9c 	bl	8000108 <__udivsi3>
 80039d0:	0003      	movs	r3, r0
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	61bb      	str	r3, [r7, #24]
        break;
 80039d6:	e027      	b.n	8003a28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d8:	f7ff fb46 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 80039dc:	0003      	movs	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085a      	lsrs	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	18d2      	adds	r2, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f7fc fb89 	bl	8000108 <__udivsi3>
 80039f6:	0003      	movs	r3, r0
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	61bb      	str	r3, [r7, #24]
        break;
 80039fc:	e014      	b.n	8003a28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	0212      	lsls	r2, r2, #8
 8003a08:	189a      	adds	r2, r3, r2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f7fc fb79 	bl	8000108 <__udivsi3>
 8003a16:	0003      	movs	r3, r0
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e004      	b.n	8003a28 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003a1e:	2317      	movs	r3, #23
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
        break;
 8003a26:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d908      	bls.n	8003a40 <UART_SetConfig+0x2c4>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <UART_SetConfig+0x304>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d804      	bhi.n	8003a40 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	e003      	b.n	8003a48 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a40:	2317      	movs	r3, #23
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a54:	2317      	movs	r3, #23
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	781b      	ldrb	r3, [r3, #0]
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	ffff69f3 	.word	0xffff69f3
 8003a68:	ffffcfff 	.word	0xffffcfff
 8003a6c:	fffff4ff 	.word	0xfffff4ff
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	0000ffff 	.word	0x0000ffff
 8003a84:	007a1200 	.word	0x007a1200

08003a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <UART_AdvFeatureConfig+0x144>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a43      	ldr	r2, [pc, #268]	; (8003bd0 <UART_AdvFeatureConfig+0x148>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2204      	movs	r2, #4
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <UART_AdvFeatureConfig+0x14c>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2208      	movs	r2, #8
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a34      	ldr	r2, [pc, #208]	; (8003bd8 <UART_AdvFeatureConfig+0x150>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <UART_AdvFeatureConfig+0x154>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2220      	movs	r2, #32
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <UART_AdvFeatureConfig+0x158>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	4013      	ands	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <UART_AdvFeatureConfig+0x15c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	035b      	lsls	r3, r3, #13
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10b      	bne.n	8003ba2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <UART_AdvFeatureConfig+0x160>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <UART_AdvFeatureConfig+0x164>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffdffff 	.word	0xfffdffff
 8003bd0:	fffeffff 	.word	0xfffeffff
 8003bd4:	fffbffff 	.word	0xfffbffff
 8003bd8:	ffff7fff 	.word	0xffff7fff
 8003bdc:	ffffefff 	.word	0xffffefff
 8003be0:	ffffdfff 	.word	0xffffdfff
 8003be4:	ffefffff 	.word	0xffefffff
 8003be8:	ff9fffff 	.word	0xff9fffff
 8003bec:	fff7ffff 	.word	0xfff7ffff

08003bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bfe:	f7fd fc79 	bl	80014f4 <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d10d      	bne.n	8003c30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	0399      	lsls	r1, r3, #14
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <UART_CheckIdleState+0x88>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0013      	movs	r3, r2
 8003c22:	2200      	movs	r2, #0
 8003c24:	f000 f82a 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d001      	beq.n	8003c30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e01f      	b.n	8003c70 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2204      	movs	r2, #4
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d10d      	bne.n	8003c5a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	03d9      	lsls	r1, r3, #15
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <UART_CheckIdleState+0x88>)
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f000 f815 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003c52:	1e03      	subs	r3, r0, #0
 8003c54:	d001      	beq.n	8003c5a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00a      	b.n	8003c70 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2270      	movs	r2, #112	; 0x70
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b004      	add	sp, #16
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	01ffffff 	.word	0x01ffffff

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e05d      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3301      	adds	r3, #1
 8003c92:	d05a      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7fd fc2e 	bl	80014f4 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11b      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	492f      	ldr	r1, [pc, #188]	; (8003d74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2270      	movs	r2, #112	; 0x70
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e043      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	4013      	ands	r3, r2
 8003cec:	d02d      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d123      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4917      	ldr	r1, [pc, #92]	; (8003d74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	438a      	bics	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2270      	movs	r2, #112	; 0x70
 8003d42:	2100      	movs	r1, #0
 8003d44:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e00f      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	425a      	negs	r2, r3
 8003d5a:	4153      	adcs	r3, r2
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	001a      	movs	r2, r3
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d092      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	fffffe5f 	.word	0xfffffe5f

08003d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	21c0      	movs	r1, #192	; 0xc0
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <UART_EndRxTransfer+0x3c>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	fffffedf 	.word	0xfffffedf

08003de0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d014      	beq.n	8003e20 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2252      	movs	r2, #82	; 0x52
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	438a      	bics	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e1e:	e003      	b.n	8003e28 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7fd f8c4 	bl	8000fb0 <HAL_UART_TxCpltCallback>
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fd f8f3 	bl	800102c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b80      	cmp	r3, #128	; 0x80
 8003e74:	d10a      	bne.n	8003e8c <UART_DMAError+0x3e>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d107      	bne.n	8003e8c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2252      	movs	r2, #82	; 0x52
 8003e80:	2100      	movs	r1, #0
 8003e82:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff ff76 	bl	8003d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d10a      	bne.n	8003eb0 <UART_DMAError+0x62>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b22      	cmp	r3, #34	; 0x22
 8003e9e:	d107      	bne.n	8003eb0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	225a      	movs	r2, #90	; 0x5a
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff ff78 	bl	8003da0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff fc54 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b006      	add	sp, #24
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	225a      	movs	r2, #90	; 0x5a
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2252      	movs	r2, #82	; 0x52
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff fc3d 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	438a      	bics	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7fd f845 	bl	8000fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	2000001c 	.word	0x2000001c

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	2600      	movs	r6, #0
 8003f50:	4d0c      	ldr	r5, [pc, #48]	; (8003f84 <__libc_init_array+0x38>)
 8003f52:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f54:	1b64      	subs	r4, r4, r5
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	42a6      	cmp	r6, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	f000 fc29 	bl	80047b4 <_init>
 8003f62:	4d0a      	ldr	r5, [pc, #40]	; (8003f8c <__libc_init_array+0x40>)
 8003f64:	4c0a      	ldr	r4, [pc, #40]	; (8003f90 <__libc_init_array+0x44>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	42a6      	cmp	r6, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	00b3      	lsls	r3, r6, #2
 8003f72:	58eb      	ldr	r3, [r5, r3]
 8003f74:	4798      	blx	r3
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	00b3      	lsls	r3, r6, #2
 8003f7c:	58eb      	ldr	r3, [r5, r3]
 8003f7e:	4798      	blx	r3
 8003f80:	3601      	adds	r6, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	08004880 	.word	0x08004880
 8003f88:	08004880 	.word	0x08004880
 8003f8c:	08004880 	.word	0x08004880
 8003f90:	08004884 	.word	0x08004884

08003f94 <memset>:
 8003f94:	0003      	movs	r3, r0
 8003f96:	1812      	adds	r2, r2, r0
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memset+0xa>
 8003f9c:	4770      	bx	lr
 8003f9e:	7019      	strb	r1, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	e7f9      	b.n	8003f98 <memset+0x4>

08003fa4 <siprintf>:
 8003fa4:	b40e      	push	{r1, r2, r3}
 8003fa6:	b500      	push	{lr}
 8003fa8:	490b      	ldr	r1, [pc, #44]	; (8003fd8 <siprintf+0x34>)
 8003faa:	b09c      	sub	sp, #112	; 0x70
 8003fac:	ab1d      	add	r3, sp, #116	; 0x74
 8003fae:	9002      	str	r0, [sp, #8]
 8003fb0:	9006      	str	r0, [sp, #24]
 8003fb2:	9107      	str	r1, [sp, #28]
 8003fb4:	9104      	str	r1, [sp, #16]
 8003fb6:	4809      	ldr	r0, [pc, #36]	; (8003fdc <siprintf+0x38>)
 8003fb8:	4909      	ldr	r1, [pc, #36]	; (8003fe0 <siprintf+0x3c>)
 8003fba:	cb04      	ldmia	r3!, {r2}
 8003fbc:	9105      	str	r1, [sp, #20]
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	a902      	add	r1, sp, #8
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	f000 f870 	bl	80040a8 <_svfiprintf_r>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9a02      	ldr	r2, [sp, #8]
 8003fcc:	7013      	strb	r3, [r2, #0]
 8003fce:	b01c      	add	sp, #112	; 0x70
 8003fd0:	bc08      	pop	{r3}
 8003fd2:	b003      	add	sp, #12
 8003fd4:	4718      	bx	r3
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	7fffffff 	.word	0x7fffffff
 8003fdc:	2000001c 	.word	0x2000001c
 8003fe0:	ffff0208 	.word	0xffff0208

08003fe4 <__ssputs_r>:
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	688e      	ldr	r6, [r1, #8]
 8003fe8:	b085      	sub	sp, #20
 8003fea:	0007      	movs	r7, r0
 8003fec:	000c      	movs	r4, r1
 8003fee:	9203      	str	r2, [sp, #12]
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	429e      	cmp	r6, r3
 8003ff4:	d83c      	bhi.n	8004070 <__ssputs_r+0x8c>
 8003ff6:	2390      	movs	r3, #144	; 0x90
 8003ff8:	898a      	ldrh	r2, [r1, #12]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	421a      	tst	r2, r3
 8003ffe:	d034      	beq.n	800406a <__ssputs_r+0x86>
 8004000:	2503      	movs	r5, #3
 8004002:	6909      	ldr	r1, [r1, #16]
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	1a5b      	subs	r3, r3, r1
 8004008:	9302      	str	r3, [sp, #8]
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	9802      	ldr	r0, [sp, #8]
 800400e:	435d      	muls	r5, r3
 8004010:	0feb      	lsrs	r3, r5, #31
 8004012:	195d      	adds	r5, r3, r5
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	106d      	asrs	r5, r5, #1
 8004018:	3301      	adds	r3, #1
 800401a:	181b      	adds	r3, r3, r0
 800401c:	42ab      	cmp	r3, r5
 800401e:	d900      	bls.n	8004022 <__ssputs_r+0x3e>
 8004020:	001d      	movs	r5, r3
 8004022:	0553      	lsls	r3, r2, #21
 8004024:	d532      	bpl.n	800408c <__ssputs_r+0xa8>
 8004026:	0029      	movs	r1, r5
 8004028:	0038      	movs	r0, r7
 800402a:	f000 fb23 	bl	8004674 <_malloc_r>
 800402e:	1e06      	subs	r6, r0, #0
 8004030:	d109      	bne.n	8004046 <__ssputs_r+0x62>
 8004032:	230c      	movs	r3, #12
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	2340      	movs	r3, #64	; 0x40
 8004038:	2001      	movs	r0, #1
 800403a:	89a2      	ldrh	r2, [r4, #12]
 800403c:	4240      	negs	r0, r0
 800403e:	4313      	orrs	r3, r2
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	b005      	add	sp, #20
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004046:	9a02      	ldr	r2, [sp, #8]
 8004048:	6921      	ldr	r1, [r4, #16]
 800404a:	f000 faac 	bl	80045a6 <memcpy>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <__ssputs_r+0xc0>)
 8004052:	401a      	ands	r2, r3
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	4313      	orrs	r3, r2
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	9b02      	ldr	r3, [sp, #8]
 800405c:	6126      	str	r6, [r4, #16]
 800405e:	18f6      	adds	r6, r6, r3
 8004060:	6026      	str	r6, [r4, #0]
 8004062:	6165      	str	r5, [r4, #20]
 8004064:	9e01      	ldr	r6, [sp, #4]
 8004066:	1aed      	subs	r5, r5, r3
 8004068:	60a5      	str	r5, [r4, #8]
 800406a:	9b01      	ldr	r3, [sp, #4]
 800406c:	429e      	cmp	r6, r3
 800406e:	d900      	bls.n	8004072 <__ssputs_r+0x8e>
 8004070:	9e01      	ldr	r6, [sp, #4]
 8004072:	0032      	movs	r2, r6
 8004074:	9903      	ldr	r1, [sp, #12]
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	f000 fa9e 	bl	80045b8 <memmove>
 800407c:	68a3      	ldr	r3, [r4, #8]
 800407e:	2000      	movs	r0, #0
 8004080:	1b9b      	subs	r3, r3, r6
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	199e      	adds	r6, r3, r6
 8004088:	6026      	str	r6, [r4, #0]
 800408a:	e7da      	b.n	8004042 <__ssputs_r+0x5e>
 800408c:	002a      	movs	r2, r5
 800408e:	0038      	movs	r0, r7
 8004090:	f000 fb4e 	bl	8004730 <_realloc_r>
 8004094:	1e06      	subs	r6, r0, #0
 8004096:	d1e0      	bne.n	800405a <__ssputs_r+0x76>
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	0038      	movs	r0, r7
 800409c:	f000 faa0 	bl	80045e0 <_free_r>
 80040a0:	e7c7      	b.n	8004032 <__ssputs_r+0x4e>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	fffffb7f 	.word	0xfffffb7f

080040a8 <_svfiprintf_r>:
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b0a1      	sub	sp, #132	; 0x84
 80040ac:	9003      	str	r0, [sp, #12]
 80040ae:	001d      	movs	r5, r3
 80040b0:	898b      	ldrh	r3, [r1, #12]
 80040b2:	000f      	movs	r7, r1
 80040b4:	0016      	movs	r6, r2
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	d511      	bpl.n	80040de <_svfiprintf_r+0x36>
 80040ba:	690b      	ldr	r3, [r1, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10e      	bne.n	80040de <_svfiprintf_r+0x36>
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	f000 fad7 	bl	8004674 <_malloc_r>
 80040c6:	6038      	str	r0, [r7, #0]
 80040c8:	6138      	str	r0, [r7, #16]
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d105      	bne.n	80040da <_svfiprintf_r+0x32>
 80040ce:	230c      	movs	r3, #12
 80040d0:	9a03      	ldr	r2, [sp, #12]
 80040d2:	3801      	subs	r0, #1
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	b021      	add	sp, #132	; 0x84
 80040d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040da:	2340      	movs	r3, #64	; 0x40
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	2300      	movs	r3, #0
 80040e0:	ac08      	add	r4, sp, #32
 80040e2:	6163      	str	r3, [r4, #20]
 80040e4:	3320      	adds	r3, #32
 80040e6:	7663      	strb	r3, [r4, #25]
 80040e8:	3310      	adds	r3, #16
 80040ea:	76a3      	strb	r3, [r4, #26]
 80040ec:	9507      	str	r5, [sp, #28]
 80040ee:	0035      	movs	r5, r6
 80040f0:	782b      	ldrb	r3, [r5, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <_svfiprintf_r+0x52>
 80040f6:	2b25      	cmp	r3, #37	; 0x25
 80040f8:	d146      	bne.n	8004188 <_svfiprintf_r+0xe0>
 80040fa:	1bab      	subs	r3, r5, r6
 80040fc:	9305      	str	r3, [sp, #20]
 80040fe:	d00c      	beq.n	800411a <_svfiprintf_r+0x72>
 8004100:	0032      	movs	r2, r6
 8004102:	0039      	movs	r1, r7
 8004104:	9803      	ldr	r0, [sp, #12]
 8004106:	f7ff ff6d 	bl	8003fe4 <__ssputs_r>
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	d100      	bne.n	8004110 <_svfiprintf_r+0x68>
 800410e:	e0ae      	b.n	800426e <_svfiprintf_r+0x1c6>
 8004110:	6962      	ldr	r2, [r4, #20]
 8004112:	9b05      	ldr	r3, [sp, #20]
 8004114:	4694      	mov	ip, r2
 8004116:	4463      	add	r3, ip
 8004118:	6163      	str	r3, [r4, #20]
 800411a:	782b      	ldrb	r3, [r5, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d100      	bne.n	8004122 <_svfiprintf_r+0x7a>
 8004120:	e0a5      	b.n	800426e <_svfiprintf_r+0x1c6>
 8004122:	2201      	movs	r2, #1
 8004124:	2300      	movs	r3, #0
 8004126:	4252      	negs	r2, r2
 8004128:	6062      	str	r2, [r4, #4]
 800412a:	a904      	add	r1, sp, #16
 800412c:	3254      	adds	r2, #84	; 0x54
 800412e:	1852      	adds	r2, r2, r1
 8004130:	1c6e      	adds	r6, r5, #1
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	60e3      	str	r3, [r4, #12]
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	7013      	strb	r3, [r2, #0]
 800413a:	65a3      	str	r3, [r4, #88]	; 0x58
 800413c:	7831      	ldrb	r1, [r6, #0]
 800413e:	2205      	movs	r2, #5
 8004140:	4853      	ldr	r0, [pc, #332]	; (8004290 <_svfiprintf_r+0x1e8>)
 8004142:	f000 fa25 	bl	8004590 <memchr>
 8004146:	1c75      	adds	r5, r6, #1
 8004148:	2800      	cmp	r0, #0
 800414a:	d11f      	bne.n	800418c <_svfiprintf_r+0xe4>
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	06d3      	lsls	r3, r2, #27
 8004150:	d504      	bpl.n	800415c <_svfiprintf_r+0xb4>
 8004152:	2353      	movs	r3, #83	; 0x53
 8004154:	a904      	add	r1, sp, #16
 8004156:	185b      	adds	r3, r3, r1
 8004158:	2120      	movs	r1, #32
 800415a:	7019      	strb	r1, [r3, #0]
 800415c:	0713      	lsls	r3, r2, #28
 800415e:	d504      	bpl.n	800416a <_svfiprintf_r+0xc2>
 8004160:	2353      	movs	r3, #83	; 0x53
 8004162:	a904      	add	r1, sp, #16
 8004164:	185b      	adds	r3, r3, r1
 8004166:	212b      	movs	r1, #43	; 0x2b
 8004168:	7019      	strb	r1, [r3, #0]
 800416a:	7833      	ldrb	r3, [r6, #0]
 800416c:	2b2a      	cmp	r3, #42	; 0x2a
 800416e:	d016      	beq.n	800419e <_svfiprintf_r+0xf6>
 8004170:	0035      	movs	r5, r6
 8004172:	2100      	movs	r1, #0
 8004174:	200a      	movs	r0, #10
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	782a      	ldrb	r2, [r5, #0]
 800417a:	1c6e      	adds	r6, r5, #1
 800417c:	3a30      	subs	r2, #48	; 0x30
 800417e:	2a09      	cmp	r2, #9
 8004180:	d94e      	bls.n	8004220 <_svfiprintf_r+0x178>
 8004182:	2900      	cmp	r1, #0
 8004184:	d018      	beq.n	80041b8 <_svfiprintf_r+0x110>
 8004186:	e010      	b.n	80041aa <_svfiprintf_r+0x102>
 8004188:	3501      	adds	r5, #1
 800418a:	e7b1      	b.n	80040f0 <_svfiprintf_r+0x48>
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <_svfiprintf_r+0x1e8>)
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	2301      	movs	r3, #1
 8004194:	4083      	lsls	r3, r0
 8004196:	4313      	orrs	r3, r2
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	002e      	movs	r6, r5
 800419c:	e7ce      	b.n	800413c <_svfiprintf_r+0x94>
 800419e:	9b07      	ldr	r3, [sp, #28]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	9107      	str	r1, [sp, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db01      	blt.n	80041ae <_svfiprintf_r+0x106>
 80041aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80041ac:	e004      	b.n	80041b8 <_svfiprintf_r+0x110>
 80041ae:	425b      	negs	r3, r3
 80041b0:	60e3      	str	r3, [r4, #12]
 80041b2:	2302      	movs	r3, #2
 80041b4:	4313      	orrs	r3, r2
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	782b      	ldrb	r3, [r5, #0]
 80041ba:	2b2e      	cmp	r3, #46	; 0x2e
 80041bc:	d10a      	bne.n	80041d4 <_svfiprintf_r+0x12c>
 80041be:	786b      	ldrb	r3, [r5, #1]
 80041c0:	2b2a      	cmp	r3, #42	; 0x2a
 80041c2:	d135      	bne.n	8004230 <_svfiprintf_r+0x188>
 80041c4:	9b07      	ldr	r3, [sp, #28]
 80041c6:	3502      	adds	r5, #2
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9207      	str	r2, [sp, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db2b      	blt.n	800422a <_svfiprintf_r+0x182>
 80041d2:	9309      	str	r3, [sp, #36]	; 0x24
 80041d4:	4e2f      	ldr	r6, [pc, #188]	; (8004294 <_svfiprintf_r+0x1ec>)
 80041d6:	7829      	ldrb	r1, [r5, #0]
 80041d8:	2203      	movs	r2, #3
 80041da:	0030      	movs	r0, r6
 80041dc:	f000 f9d8 	bl	8004590 <memchr>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d006      	beq.n	80041f2 <_svfiprintf_r+0x14a>
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	1b80      	subs	r0, r0, r6
 80041e8:	4083      	lsls	r3, r0
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	3501      	adds	r5, #1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	7829      	ldrb	r1, [r5, #0]
 80041f4:	2206      	movs	r2, #6
 80041f6:	4828      	ldr	r0, [pc, #160]	; (8004298 <_svfiprintf_r+0x1f0>)
 80041f8:	1c6e      	adds	r6, r5, #1
 80041fa:	7621      	strb	r1, [r4, #24]
 80041fc:	f000 f9c8 	bl	8004590 <memchr>
 8004200:	2800      	cmp	r0, #0
 8004202:	d03c      	beq.n	800427e <_svfiprintf_r+0x1d6>
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <_svfiprintf_r+0x1f4>)
 8004206:	2b00      	cmp	r3, #0
 8004208:	d125      	bne.n	8004256 <_svfiprintf_r+0x1ae>
 800420a:	2207      	movs	r2, #7
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	3307      	adds	r3, #7
 8004210:	4393      	bics	r3, r2
 8004212:	3308      	adds	r3, #8
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	6963      	ldr	r3, [r4, #20]
 8004218:	9a04      	ldr	r2, [sp, #16]
 800421a:	189b      	adds	r3, r3, r2
 800421c:	6163      	str	r3, [r4, #20]
 800421e:	e766      	b.n	80040ee <_svfiprintf_r+0x46>
 8004220:	4343      	muls	r3, r0
 8004222:	2101      	movs	r1, #1
 8004224:	189b      	adds	r3, r3, r2
 8004226:	0035      	movs	r5, r6
 8004228:	e7a6      	b.n	8004178 <_svfiprintf_r+0xd0>
 800422a:	2301      	movs	r3, #1
 800422c:	425b      	negs	r3, r3
 800422e:	e7d0      	b.n	80041d2 <_svfiprintf_r+0x12a>
 8004230:	2300      	movs	r3, #0
 8004232:	200a      	movs	r0, #10
 8004234:	001a      	movs	r2, r3
 8004236:	3501      	adds	r5, #1
 8004238:	6063      	str	r3, [r4, #4]
 800423a:	7829      	ldrb	r1, [r5, #0]
 800423c:	1c6e      	adds	r6, r5, #1
 800423e:	3930      	subs	r1, #48	; 0x30
 8004240:	2909      	cmp	r1, #9
 8004242:	d903      	bls.n	800424c <_svfiprintf_r+0x1a4>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0c5      	beq.n	80041d4 <_svfiprintf_r+0x12c>
 8004248:	9209      	str	r2, [sp, #36]	; 0x24
 800424a:	e7c3      	b.n	80041d4 <_svfiprintf_r+0x12c>
 800424c:	4342      	muls	r2, r0
 800424e:	2301      	movs	r3, #1
 8004250:	1852      	adds	r2, r2, r1
 8004252:	0035      	movs	r5, r6
 8004254:	e7f1      	b.n	800423a <_svfiprintf_r+0x192>
 8004256:	ab07      	add	r3, sp, #28
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	003a      	movs	r2, r7
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <_svfiprintf_r+0x1f8>)
 800425e:	0021      	movs	r1, r4
 8004260:	9803      	ldr	r0, [sp, #12]
 8004262:	e000      	b.n	8004266 <_svfiprintf_r+0x1be>
 8004264:	bf00      	nop
 8004266:	9004      	str	r0, [sp, #16]
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	d1d3      	bne.n	8004216 <_svfiprintf_r+0x16e>
 800426e:	89bb      	ldrh	r3, [r7, #12]
 8004270:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004272:	065b      	lsls	r3, r3, #25
 8004274:	d400      	bmi.n	8004278 <_svfiprintf_r+0x1d0>
 8004276:	e72e      	b.n	80040d6 <_svfiprintf_r+0x2e>
 8004278:	2001      	movs	r0, #1
 800427a:	4240      	negs	r0, r0
 800427c:	e72b      	b.n	80040d6 <_svfiprintf_r+0x2e>
 800427e:	ab07      	add	r3, sp, #28
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	003a      	movs	r2, r7
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <_svfiprintf_r+0x1f8>)
 8004286:	0021      	movs	r1, r4
 8004288:	9803      	ldr	r0, [sp, #12]
 800428a:	f000 f879 	bl	8004380 <_printf_i>
 800428e:	e7ea      	b.n	8004266 <_svfiprintf_r+0x1be>
 8004290:	0800484c 	.word	0x0800484c
 8004294:	08004852 	.word	0x08004852
 8004298:	08004856 	.word	0x08004856
 800429c:	00000000 	.word	0x00000000
 80042a0:	08003fe5 	.word	0x08003fe5

080042a4 <_printf_common>:
 80042a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a6:	0015      	movs	r5, r2
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	688a      	ldr	r2, [r1, #8]
 80042ac:	690b      	ldr	r3, [r1, #16]
 80042ae:	9000      	str	r0, [sp, #0]
 80042b0:	000c      	movs	r4, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	da00      	bge.n	80042b8 <_printf_common+0x14>
 80042b6:	0013      	movs	r3, r2
 80042b8:	0022      	movs	r2, r4
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	3243      	adds	r2, #67	; 0x43
 80042be:	7812      	ldrb	r2, [r2, #0]
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d001      	beq.n	80042c8 <_printf_common+0x24>
 80042c4:	3301      	adds	r3, #1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	d502      	bpl.n	80042d4 <_printf_common+0x30>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	3302      	adds	r3, #2
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	2706      	movs	r7, #6
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	401f      	ands	r7, r3
 80042da:	d027      	beq.n	800432c <_printf_common+0x88>
 80042dc:	0023      	movs	r3, r4
 80042de:	3343      	adds	r3, #67	; 0x43
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	4193      	sbcs	r3, r2
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	0692      	lsls	r2, r2, #26
 80042ea:	d430      	bmi.n	800434e <_printf_common+0xaa>
 80042ec:	0022      	movs	r2, r4
 80042ee:	9901      	ldr	r1, [sp, #4]
 80042f0:	3243      	adds	r2, #67	; 0x43
 80042f2:	9800      	ldr	r0, [sp, #0]
 80042f4:	9e08      	ldr	r6, [sp, #32]
 80042f6:	47b0      	blx	r6
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d025      	beq.n	8004348 <_printf_common+0xa4>
 80042fc:	2306      	movs	r3, #6
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	682a      	ldr	r2, [r5, #0]
 8004302:	68e1      	ldr	r1, [r4, #12]
 8004304:	4003      	ands	r3, r0
 8004306:	2500      	movs	r5, #0
 8004308:	2b04      	cmp	r3, #4
 800430a:	d103      	bne.n	8004314 <_printf_common+0x70>
 800430c:	1a8d      	subs	r5, r1, r2
 800430e:	43eb      	mvns	r3, r5
 8004310:	17db      	asrs	r3, r3, #31
 8004312:	401d      	ands	r5, r3
 8004314:	68a3      	ldr	r3, [r4, #8]
 8004316:	6922      	ldr	r2, [r4, #16]
 8004318:	4293      	cmp	r3, r2
 800431a:	dd01      	ble.n	8004320 <_printf_common+0x7c>
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	18ed      	adds	r5, r5, r3
 8004320:	2700      	movs	r7, #0
 8004322:	42bd      	cmp	r5, r7
 8004324:	d120      	bne.n	8004368 <_printf_common+0xc4>
 8004326:	2000      	movs	r0, #0
 8004328:	e010      	b.n	800434c <_printf_common+0xa8>
 800432a:	3701      	adds	r7, #1
 800432c:	68e3      	ldr	r3, [r4, #12]
 800432e:	682a      	ldr	r2, [r5, #0]
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	42bb      	cmp	r3, r7
 8004334:	ddd2      	ble.n	80042dc <_printf_common+0x38>
 8004336:	0022      	movs	r2, r4
 8004338:	2301      	movs	r3, #1
 800433a:	3219      	adds	r2, #25
 800433c:	9901      	ldr	r1, [sp, #4]
 800433e:	9800      	ldr	r0, [sp, #0]
 8004340:	9e08      	ldr	r6, [sp, #32]
 8004342:	47b0      	blx	r6
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d1f0      	bne.n	800432a <_printf_common+0x86>
 8004348:	2001      	movs	r0, #1
 800434a:	4240      	negs	r0, r0
 800434c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800434e:	2030      	movs	r0, #48	; 0x30
 8004350:	18e1      	adds	r1, r4, r3
 8004352:	3143      	adds	r1, #67	; 0x43
 8004354:	7008      	strb	r0, [r1, #0]
 8004356:	0021      	movs	r1, r4
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	3145      	adds	r1, #69	; 0x45
 800435c:	7809      	ldrb	r1, [r1, #0]
 800435e:	18a2      	adds	r2, r4, r2
 8004360:	3243      	adds	r2, #67	; 0x43
 8004362:	3302      	adds	r3, #2
 8004364:	7011      	strb	r1, [r2, #0]
 8004366:	e7c1      	b.n	80042ec <_printf_common+0x48>
 8004368:	0022      	movs	r2, r4
 800436a:	2301      	movs	r3, #1
 800436c:	321a      	adds	r2, #26
 800436e:	9901      	ldr	r1, [sp, #4]
 8004370:	9800      	ldr	r0, [sp, #0]
 8004372:	9e08      	ldr	r6, [sp, #32]
 8004374:	47b0      	blx	r6
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	d0e6      	beq.n	8004348 <_printf_common+0xa4>
 800437a:	3701      	adds	r7, #1
 800437c:	e7d1      	b.n	8004322 <_printf_common+0x7e>
	...

08004380 <_printf_i>:
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	9204      	str	r2, [sp, #16]
 8004386:	000a      	movs	r2, r1
 8004388:	3243      	adds	r2, #67	; 0x43
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	9003      	str	r0, [sp, #12]
 800438e:	9202      	str	r2, [sp, #8]
 8004390:	7e0a      	ldrb	r2, [r1, #24]
 8004392:	000c      	movs	r4, r1
 8004394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004396:	2a6e      	cmp	r2, #110	; 0x6e
 8004398:	d100      	bne.n	800439c <_printf_i+0x1c>
 800439a:	e086      	b.n	80044aa <_printf_i+0x12a>
 800439c:	d81f      	bhi.n	80043de <_printf_i+0x5e>
 800439e:	2a63      	cmp	r2, #99	; 0x63
 80043a0:	d033      	beq.n	800440a <_printf_i+0x8a>
 80043a2:	d808      	bhi.n	80043b6 <_printf_i+0x36>
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	d100      	bne.n	80043aa <_printf_i+0x2a>
 80043a8:	e08c      	b.n	80044c4 <_printf_i+0x144>
 80043aa:	2a58      	cmp	r2, #88	; 0x58
 80043ac:	d04d      	beq.n	800444a <_printf_i+0xca>
 80043ae:	0025      	movs	r5, r4
 80043b0:	3542      	adds	r5, #66	; 0x42
 80043b2:	702a      	strb	r2, [r5, #0]
 80043b4:	e030      	b.n	8004418 <_printf_i+0x98>
 80043b6:	2a64      	cmp	r2, #100	; 0x64
 80043b8:	d001      	beq.n	80043be <_printf_i+0x3e>
 80043ba:	2a69      	cmp	r2, #105	; 0x69
 80043bc:	d1f7      	bne.n	80043ae <_printf_i+0x2e>
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	6825      	ldr	r5, [r4, #0]
 80043c2:	1d0a      	adds	r2, r1, #4
 80043c4:	0628      	lsls	r0, r5, #24
 80043c6:	d529      	bpl.n	800441c <_printf_i+0x9c>
 80043c8:	6808      	ldr	r0, [r1, #0]
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	2800      	cmp	r0, #0
 80043ce:	da03      	bge.n	80043d8 <_printf_i+0x58>
 80043d0:	232d      	movs	r3, #45	; 0x2d
 80043d2:	9a02      	ldr	r2, [sp, #8]
 80043d4:	4240      	negs	r0, r0
 80043d6:	7013      	strb	r3, [r2, #0]
 80043d8:	4e6b      	ldr	r6, [pc, #428]	; (8004588 <_printf_i+0x208>)
 80043da:	270a      	movs	r7, #10
 80043dc:	e04f      	b.n	800447e <_printf_i+0xfe>
 80043de:	2a73      	cmp	r2, #115	; 0x73
 80043e0:	d074      	beq.n	80044cc <_printf_i+0x14c>
 80043e2:	d808      	bhi.n	80043f6 <_printf_i+0x76>
 80043e4:	2a6f      	cmp	r2, #111	; 0x6f
 80043e6:	d01f      	beq.n	8004428 <_printf_i+0xa8>
 80043e8:	2a70      	cmp	r2, #112	; 0x70
 80043ea:	d1e0      	bne.n	80043ae <_printf_i+0x2e>
 80043ec:	2220      	movs	r2, #32
 80043ee:	6809      	ldr	r1, [r1, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	6022      	str	r2, [r4, #0]
 80043f4:	e003      	b.n	80043fe <_printf_i+0x7e>
 80043f6:	2a75      	cmp	r2, #117	; 0x75
 80043f8:	d016      	beq.n	8004428 <_printf_i+0xa8>
 80043fa:	2a78      	cmp	r2, #120	; 0x78
 80043fc:	d1d7      	bne.n	80043ae <_printf_i+0x2e>
 80043fe:	0022      	movs	r2, r4
 8004400:	2178      	movs	r1, #120	; 0x78
 8004402:	3245      	adds	r2, #69	; 0x45
 8004404:	7011      	strb	r1, [r2, #0]
 8004406:	4e61      	ldr	r6, [pc, #388]	; (800458c <_printf_i+0x20c>)
 8004408:	e022      	b.n	8004450 <_printf_i+0xd0>
 800440a:	0025      	movs	r5, r4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	3542      	adds	r5, #66	; 0x42
 8004410:	1d11      	adds	r1, r2, #4
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	702b      	strb	r3, [r5, #0]
 8004418:	2301      	movs	r3, #1
 800441a:	e065      	b.n	80044e8 <_printf_i+0x168>
 800441c:	6808      	ldr	r0, [r1, #0]
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	0669      	lsls	r1, r5, #25
 8004422:	d5d3      	bpl.n	80043cc <_printf_i+0x4c>
 8004424:	b200      	sxth	r0, r0
 8004426:	e7d1      	b.n	80043cc <_printf_i+0x4c>
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	1d08      	adds	r0, r1, #4
 800442e:	6018      	str	r0, [r3, #0]
 8004430:	6808      	ldr	r0, [r1, #0]
 8004432:	062e      	lsls	r6, r5, #24
 8004434:	d505      	bpl.n	8004442 <_printf_i+0xc2>
 8004436:	4e54      	ldr	r6, [pc, #336]	; (8004588 <_printf_i+0x208>)
 8004438:	2708      	movs	r7, #8
 800443a:	2a6f      	cmp	r2, #111	; 0x6f
 800443c:	d01b      	beq.n	8004476 <_printf_i+0xf6>
 800443e:	270a      	movs	r7, #10
 8004440:	e019      	b.n	8004476 <_printf_i+0xf6>
 8004442:	066d      	lsls	r5, r5, #25
 8004444:	d5f7      	bpl.n	8004436 <_printf_i+0xb6>
 8004446:	b280      	uxth	r0, r0
 8004448:	e7f5      	b.n	8004436 <_printf_i+0xb6>
 800444a:	3145      	adds	r1, #69	; 0x45
 800444c:	4e4e      	ldr	r6, [pc, #312]	; (8004588 <_printf_i+0x208>)
 800444e:	700a      	strb	r2, [r1, #0]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	1d01      	adds	r1, r0, #4
 8004456:	6800      	ldr	r0, [r0, #0]
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	0615      	lsls	r5, r2, #24
 800445c:	d521      	bpl.n	80044a2 <_printf_i+0x122>
 800445e:	07d3      	lsls	r3, r2, #31
 8004460:	d502      	bpl.n	8004468 <_printf_i+0xe8>
 8004462:	2320      	movs	r3, #32
 8004464:	431a      	orrs	r2, r3
 8004466:	6022      	str	r2, [r4, #0]
 8004468:	2710      	movs	r7, #16
 800446a:	2800      	cmp	r0, #0
 800446c:	d103      	bne.n	8004476 <_printf_i+0xf6>
 800446e:	2320      	movs	r3, #32
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	439a      	bics	r2, r3
 8004474:	6022      	str	r2, [r4, #0]
 8004476:	0023      	movs	r3, r4
 8004478:	2200      	movs	r2, #0
 800447a:	3343      	adds	r3, #67	; 0x43
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db58      	blt.n	8004538 <_printf_i+0x1b8>
 8004486:	2204      	movs	r2, #4
 8004488:	6821      	ldr	r1, [r4, #0]
 800448a:	4391      	bics	r1, r2
 800448c:	6021      	str	r1, [r4, #0]
 800448e:	2800      	cmp	r0, #0
 8004490:	d154      	bne.n	800453c <_printf_i+0x1bc>
 8004492:	9d02      	ldr	r5, [sp, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05a      	beq.n	800454e <_printf_i+0x1ce>
 8004498:	0025      	movs	r5, r4
 800449a:	7833      	ldrb	r3, [r6, #0]
 800449c:	3542      	adds	r5, #66	; 0x42
 800449e:	702b      	strb	r3, [r5, #0]
 80044a0:	e055      	b.n	800454e <_printf_i+0x1ce>
 80044a2:	0655      	lsls	r5, r2, #25
 80044a4:	d5db      	bpl.n	800445e <_printf_i+0xde>
 80044a6:	b280      	uxth	r0, r0
 80044a8:	e7d9      	b.n	800445e <_printf_i+0xde>
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	680d      	ldr	r5, [r1, #0]
 80044ae:	1d10      	adds	r0, r2, #4
 80044b0:	6949      	ldr	r1, [r1, #20]
 80044b2:	6018      	str	r0, [r3, #0]
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	062e      	lsls	r6, r5, #24
 80044b8:	d501      	bpl.n	80044be <_printf_i+0x13e>
 80044ba:	6019      	str	r1, [r3, #0]
 80044bc:	e002      	b.n	80044c4 <_printf_i+0x144>
 80044be:	066d      	lsls	r5, r5, #25
 80044c0:	d5fb      	bpl.n	80044ba <_printf_i+0x13a>
 80044c2:	8019      	strh	r1, [r3, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	9d02      	ldr	r5, [sp, #8]
 80044c8:	6123      	str	r3, [r4, #16]
 80044ca:	e04f      	b.n	800456c <_printf_i+0x1ec>
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	1d11      	adds	r1, r2, #4
 80044d0:	6019      	str	r1, [r3, #0]
 80044d2:	6815      	ldr	r5, [r2, #0]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6862      	ldr	r2, [r4, #4]
 80044d8:	0028      	movs	r0, r5
 80044da:	f000 f859 	bl	8004590 <memchr>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d001      	beq.n	80044e6 <_printf_i+0x166>
 80044e2:	1b40      	subs	r0, r0, r5
 80044e4:	6060      	str	r0, [r4, #4]
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9a02      	ldr	r2, [sp, #8]
 80044ee:	7013      	strb	r3, [r2, #0]
 80044f0:	e03c      	b.n	800456c <_printf_i+0x1ec>
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	002a      	movs	r2, r5
 80044f6:	9904      	ldr	r1, [sp, #16]
 80044f8:	9803      	ldr	r0, [sp, #12]
 80044fa:	9d05      	ldr	r5, [sp, #20]
 80044fc:	47a8      	blx	r5
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	d03e      	beq.n	8004580 <_printf_i+0x200>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	079b      	lsls	r3, r3, #30
 8004506:	d415      	bmi.n	8004534 <_printf_i+0x1b4>
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	68e0      	ldr	r0, [r4, #12]
 800450c:	4298      	cmp	r0, r3
 800450e:	da39      	bge.n	8004584 <_printf_i+0x204>
 8004510:	0018      	movs	r0, r3
 8004512:	e037      	b.n	8004584 <_printf_i+0x204>
 8004514:	0022      	movs	r2, r4
 8004516:	2301      	movs	r3, #1
 8004518:	3219      	adds	r2, #25
 800451a:	9904      	ldr	r1, [sp, #16]
 800451c:	9803      	ldr	r0, [sp, #12]
 800451e:	9e05      	ldr	r6, [sp, #20]
 8004520:	47b0      	blx	r6
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	d02c      	beq.n	8004580 <_printf_i+0x200>
 8004526:	3501      	adds	r5, #1
 8004528:	68e3      	ldr	r3, [r4, #12]
 800452a:	9a07      	ldr	r2, [sp, #28]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	42ab      	cmp	r3, r5
 8004530:	dcf0      	bgt.n	8004514 <_printf_i+0x194>
 8004532:	e7e9      	b.n	8004508 <_printf_i+0x188>
 8004534:	2500      	movs	r5, #0
 8004536:	e7f7      	b.n	8004528 <_printf_i+0x1a8>
 8004538:	2800      	cmp	r0, #0
 800453a:	d0ad      	beq.n	8004498 <_printf_i+0x118>
 800453c:	9d02      	ldr	r5, [sp, #8]
 800453e:	0039      	movs	r1, r7
 8004540:	f7fb fe68 	bl	8000214 <__aeabi_uidivmod>
 8004544:	5c73      	ldrb	r3, [r6, r1]
 8004546:	3d01      	subs	r5, #1
 8004548:	702b      	strb	r3, [r5, #0]
 800454a:	2800      	cmp	r0, #0
 800454c:	d1f7      	bne.n	800453e <_printf_i+0x1be>
 800454e:	2f08      	cmp	r7, #8
 8004550:	d109      	bne.n	8004566 <_printf_i+0x1e6>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	07db      	lsls	r3, r3, #31
 8004556:	d506      	bpl.n	8004566 <_printf_i+0x1e6>
 8004558:	6863      	ldr	r3, [r4, #4]
 800455a:	6922      	ldr	r2, [r4, #16]
 800455c:	4293      	cmp	r3, r2
 800455e:	dc02      	bgt.n	8004566 <_printf_i+0x1e6>
 8004560:	2330      	movs	r3, #48	; 0x30
 8004562:	3d01      	subs	r5, #1
 8004564:	702b      	strb	r3, [r5, #0]
 8004566:	9b02      	ldr	r3, [sp, #8]
 8004568:	1b5b      	subs	r3, r3, r5
 800456a:	6123      	str	r3, [r4, #16]
 800456c:	9b05      	ldr	r3, [sp, #20]
 800456e:	aa07      	add	r2, sp, #28
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	0021      	movs	r1, r4
 8004574:	9b04      	ldr	r3, [sp, #16]
 8004576:	9803      	ldr	r0, [sp, #12]
 8004578:	f7ff fe94 	bl	80042a4 <_printf_common>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1b8      	bne.n	80044f2 <_printf_i+0x172>
 8004580:	2001      	movs	r0, #1
 8004582:	4240      	negs	r0, r0
 8004584:	b009      	add	sp, #36	; 0x24
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004588:	0800485d 	.word	0x0800485d
 800458c:	0800486e 	.word	0x0800486e

08004590 <memchr>:
 8004590:	b2c9      	uxtb	r1, r1
 8004592:	1882      	adds	r2, r0, r2
 8004594:	4290      	cmp	r0, r2
 8004596:	d101      	bne.n	800459c <memchr+0xc>
 8004598:	2000      	movs	r0, #0
 800459a:	4770      	bx	lr
 800459c:	7803      	ldrb	r3, [r0, #0]
 800459e:	428b      	cmp	r3, r1
 80045a0:	d0fb      	beq.n	800459a <memchr+0xa>
 80045a2:	3001      	adds	r0, #1
 80045a4:	e7f6      	b.n	8004594 <memchr+0x4>

080045a6 <memcpy>:
 80045a6:	2300      	movs	r3, #0
 80045a8:	b510      	push	{r4, lr}
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xa>
 80045ae:	bd10      	pop	{r4, pc}
 80045b0:	5ccc      	ldrb	r4, [r1, r3]
 80045b2:	54c4      	strb	r4, [r0, r3]
 80045b4:	3301      	adds	r3, #1
 80045b6:	e7f8      	b.n	80045aa <memcpy+0x4>

080045b8 <memmove>:
 80045b8:	b510      	push	{r4, lr}
 80045ba:	4288      	cmp	r0, r1
 80045bc:	d902      	bls.n	80045c4 <memmove+0xc>
 80045be:	188b      	adds	r3, r1, r2
 80045c0:	4298      	cmp	r0, r3
 80045c2:	d303      	bcc.n	80045cc <memmove+0x14>
 80045c4:	2300      	movs	r3, #0
 80045c6:	e007      	b.n	80045d8 <memmove+0x20>
 80045c8:	5c8b      	ldrb	r3, [r1, r2]
 80045ca:	5483      	strb	r3, [r0, r2]
 80045cc:	3a01      	subs	r2, #1
 80045ce:	d2fb      	bcs.n	80045c8 <memmove+0x10>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	5ccc      	ldrb	r4, [r1, r3]
 80045d4:	54c4      	strb	r4, [r0, r3]
 80045d6:	3301      	adds	r3, #1
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1fa      	bne.n	80045d2 <memmove+0x1a>
 80045dc:	e7f8      	b.n	80045d0 <memmove+0x18>
	...

080045e0 <_free_r>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	0005      	movs	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d010      	beq.n	800460a <_free_r+0x2a>
 80045e8:	1f0c      	subs	r4, r1, #4
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da00      	bge.n	80045f2 <_free_r+0x12>
 80045f0:	18e4      	adds	r4, r4, r3
 80045f2:	0028      	movs	r0, r5
 80045f4:	f000 f8d4 	bl	80047a0 <__malloc_lock>
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <_free_r+0x90>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <_free_r+0x2c>
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6014      	str	r4, [r2, #0]
 8004604:	0028      	movs	r0, r5
 8004606:	f000 f8cc 	bl	80047a2 <__malloc_unlock>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	42a3      	cmp	r3, r4
 800460e:	d909      	bls.n	8004624 <_free_r+0x44>
 8004610:	6821      	ldr	r1, [r4, #0]
 8004612:	1860      	adds	r0, r4, r1
 8004614:	4283      	cmp	r3, r0
 8004616:	d1f3      	bne.n	8004600 <_free_r+0x20>
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	1841      	adds	r1, r0, r1
 800461e:	6021      	str	r1, [r4, #0]
 8004620:	e7ee      	b.n	8004600 <_free_r+0x20>
 8004622:	0013      	movs	r3, r2
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	2a00      	cmp	r2, #0
 8004628:	d001      	beq.n	800462e <_free_r+0x4e>
 800462a:	42a2      	cmp	r2, r4
 800462c:	d9f9      	bls.n	8004622 <_free_r+0x42>
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	1858      	adds	r0, r3, r1
 8004632:	42a0      	cmp	r0, r4
 8004634:	d10b      	bne.n	800464e <_free_r+0x6e>
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	1809      	adds	r1, r1, r0
 800463a:	1858      	adds	r0, r3, r1
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	4282      	cmp	r2, r0
 8004640:	d1e0      	bne.n	8004604 <_free_r+0x24>
 8004642:	6810      	ldr	r0, [r2, #0]
 8004644:	6852      	ldr	r2, [r2, #4]
 8004646:	1841      	adds	r1, r0, r1
 8004648:	6019      	str	r1, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	e7da      	b.n	8004604 <_free_r+0x24>
 800464e:	42a0      	cmp	r0, r4
 8004650:	d902      	bls.n	8004658 <_free_r+0x78>
 8004652:	230c      	movs	r3, #12
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	e7d5      	b.n	8004604 <_free_r+0x24>
 8004658:	6821      	ldr	r1, [r4, #0]
 800465a:	1860      	adds	r0, r4, r1
 800465c:	4282      	cmp	r2, r0
 800465e:	d103      	bne.n	8004668 <_free_r+0x88>
 8004660:	6810      	ldr	r0, [r2, #0]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	1841      	adds	r1, r0, r1
 8004666:	6021      	str	r1, [r4, #0]
 8004668:	6062      	str	r2, [r4, #4]
 800466a:	605c      	str	r4, [r3, #4]
 800466c:	e7ca      	b.n	8004604 <_free_r+0x24>
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	200000a4 	.word	0x200000a4

08004674 <_malloc_r>:
 8004674:	2303      	movs	r3, #3
 8004676:	b570      	push	{r4, r5, r6, lr}
 8004678:	1ccd      	adds	r5, r1, #3
 800467a:	439d      	bics	r5, r3
 800467c:	3508      	adds	r5, #8
 800467e:	0006      	movs	r6, r0
 8004680:	2d0c      	cmp	r5, #12
 8004682:	d21e      	bcs.n	80046c2 <_malloc_r+0x4e>
 8004684:	250c      	movs	r5, #12
 8004686:	42a9      	cmp	r1, r5
 8004688:	d81d      	bhi.n	80046c6 <_malloc_r+0x52>
 800468a:	0030      	movs	r0, r6
 800468c:	f000 f888 	bl	80047a0 <__malloc_lock>
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <_malloc_r+0xb4>)
 8004692:	6814      	ldr	r4, [r2, #0]
 8004694:	0021      	movs	r1, r4
 8004696:	2900      	cmp	r1, #0
 8004698:	d119      	bne.n	80046ce <_malloc_r+0x5a>
 800469a:	4c24      	ldr	r4, [pc, #144]	; (800472c <_malloc_r+0xb8>)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <_malloc_r+0x36>
 80046a2:	0030      	movs	r0, r6
 80046a4:	f000 f86a 	bl	800477c <_sbrk_r>
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	0029      	movs	r1, r5
 80046ac:	0030      	movs	r0, r6
 80046ae:	f000 f865 	bl	800477c <_sbrk_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	d12b      	bne.n	800470e <_malloc_r+0x9a>
 80046b6:	230c      	movs	r3, #12
 80046b8:	0030      	movs	r0, r6
 80046ba:	6033      	str	r3, [r6, #0]
 80046bc:	f000 f871 	bl	80047a2 <__malloc_unlock>
 80046c0:	e003      	b.n	80046ca <_malloc_r+0x56>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	dadf      	bge.n	8004686 <_malloc_r+0x12>
 80046c6:	230c      	movs	r3, #12
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	2000      	movs	r0, #0
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	1b5b      	subs	r3, r3, r5
 80046d2:	d419      	bmi.n	8004708 <_malloc_r+0x94>
 80046d4:	2b0b      	cmp	r3, #11
 80046d6:	d903      	bls.n	80046e0 <_malloc_r+0x6c>
 80046d8:	600b      	str	r3, [r1, #0]
 80046da:	18cc      	adds	r4, r1, r3
 80046dc:	6025      	str	r5, [r4, #0]
 80046de:	e003      	b.n	80046e8 <_malloc_r+0x74>
 80046e0:	684b      	ldr	r3, [r1, #4]
 80046e2:	428c      	cmp	r4, r1
 80046e4:	d10d      	bne.n	8004702 <_malloc_r+0x8e>
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	0030      	movs	r0, r6
 80046ea:	f000 f85a 	bl	80047a2 <__malloc_unlock>
 80046ee:	0020      	movs	r0, r4
 80046f0:	2207      	movs	r2, #7
 80046f2:	300b      	adds	r0, #11
 80046f4:	1d23      	adds	r3, r4, #4
 80046f6:	4390      	bics	r0, r2
 80046f8:	1ac3      	subs	r3, r0, r3
 80046fa:	d0e7      	beq.n	80046cc <_malloc_r+0x58>
 80046fc:	425a      	negs	r2, r3
 80046fe:	50e2      	str	r2, [r4, r3]
 8004700:	e7e4      	b.n	80046cc <_malloc_r+0x58>
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	000c      	movs	r4, r1
 8004706:	e7ef      	b.n	80046e8 <_malloc_r+0x74>
 8004708:	000c      	movs	r4, r1
 800470a:	6849      	ldr	r1, [r1, #4]
 800470c:	e7c3      	b.n	8004696 <_malloc_r+0x22>
 800470e:	2303      	movs	r3, #3
 8004710:	1cc4      	adds	r4, r0, #3
 8004712:	439c      	bics	r4, r3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d0e1      	beq.n	80046dc <_malloc_r+0x68>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	0030      	movs	r0, r6
 800471c:	f000 f82e 	bl	800477c <_sbrk_r>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d1db      	bne.n	80046dc <_malloc_r+0x68>
 8004724:	e7c7      	b.n	80046b6 <_malloc_r+0x42>
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	200000a4 	.word	0x200000a4
 800472c:	200000a8 	.word	0x200000a8

08004730 <_realloc_r>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	0007      	movs	r7, r0
 8004734:	000d      	movs	r5, r1
 8004736:	0016      	movs	r6, r2
 8004738:	2900      	cmp	r1, #0
 800473a:	d105      	bne.n	8004748 <_realloc_r+0x18>
 800473c:	0011      	movs	r1, r2
 800473e:	f7ff ff99 	bl	8004674 <_malloc_r>
 8004742:	0004      	movs	r4, r0
 8004744:	0020      	movs	r0, r4
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004748:	2a00      	cmp	r2, #0
 800474a:	d103      	bne.n	8004754 <_realloc_r+0x24>
 800474c:	f7ff ff48 	bl	80045e0 <_free_r>
 8004750:	0034      	movs	r4, r6
 8004752:	e7f7      	b.n	8004744 <_realloc_r+0x14>
 8004754:	f000 f826 	bl	80047a4 <_malloc_usable_size_r>
 8004758:	002c      	movs	r4, r5
 800475a:	42b0      	cmp	r0, r6
 800475c:	d2f2      	bcs.n	8004744 <_realloc_r+0x14>
 800475e:	0031      	movs	r1, r6
 8004760:	0038      	movs	r0, r7
 8004762:	f7ff ff87 	bl	8004674 <_malloc_r>
 8004766:	1e04      	subs	r4, r0, #0
 8004768:	d0ec      	beq.n	8004744 <_realloc_r+0x14>
 800476a:	0029      	movs	r1, r5
 800476c:	0032      	movs	r2, r6
 800476e:	f7ff ff1a 	bl	80045a6 <memcpy>
 8004772:	0029      	movs	r1, r5
 8004774:	0038      	movs	r0, r7
 8004776:	f7ff ff33 	bl	80045e0 <_free_r>
 800477a:	e7e3      	b.n	8004744 <_realloc_r+0x14>

0800477c <_sbrk_r>:
 800477c:	2300      	movs	r3, #0
 800477e:	b570      	push	{r4, r5, r6, lr}
 8004780:	4c06      	ldr	r4, [pc, #24]	; (800479c <_sbrk_r+0x20>)
 8004782:	0005      	movs	r5, r0
 8004784:	0008      	movs	r0, r1
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	f7fc fdf4 	bl	8001374 <_sbrk>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d103      	bne.n	8004798 <_sbrk_r+0x1c>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d000      	beq.n	8004798 <_sbrk_r+0x1c>
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	bd70      	pop	{r4, r5, r6, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	200003bc 	.word	0x200003bc

080047a0 <__malloc_lock>:
 80047a0:	4770      	bx	lr

080047a2 <__malloc_unlock>:
 80047a2:	4770      	bx	lr

080047a4 <_malloc_usable_size_r>:
 80047a4:	1f0b      	subs	r3, r1, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1f18      	subs	r0, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da01      	bge.n	80047b2 <_malloc_usable_size_r+0xe>
 80047ae:	580b      	ldr	r3, [r1, r0]
 80047b0:	18c0      	adds	r0, r0, r3
 80047b2:	4770      	bx	lr

080047b4 <_init>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr

080047c0 <_fini>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr
