
Sort and Save Scanner v01.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000020  08002c9c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002c9c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000538f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000122d  00000000  00000000  000253d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000500  00000000  00000000  00026600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000458  00000000  00000000  00026b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000db55  00000000  00000000  00026f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000622b  00000000  00000000  00034aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004e22f  00000000  00000000  0003acd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000108c  00000000  00000000  00088f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bf0 	.word	0x08002bf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002bf0 	.word	0x08002bf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	46de      	mov	lr, fp
 8000226:	464e      	mov	r6, r9
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4683      	mov	fp, r0
 800022e:	0007      	movs	r7, r0
 8000230:	030e      	lsls	r6, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	b085      	sub	sp, #20
 8000236:	4692      	mov	sl, r2
 8000238:	001c      	movs	r4, r3
 800023a:	0b36      	lsrs	r6, r6, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fcd      	lsrs	r5, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d100      	bne.n	8000246 <__aeabi_ddiv+0x26>
 8000244:	e09d      	b.n	8000382 <__aeabi_ddiv+0x162>
 8000246:	4b95      	ldr	r3, [pc, #596]	; (800049c <__aeabi_ddiv+0x27c>)
 8000248:	4298      	cmp	r0, r3
 800024a:	d039      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	00f6      	lsls	r6, r6, #3
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	431e      	orrs	r6, r3
 8000254:	4a92      	ldr	r2, [pc, #584]	; (80004a0 <__aeabi_ddiv+0x280>)
 8000256:	0f7b      	lsrs	r3, r7, #29
 8000258:	4333      	orrs	r3, r6
 800025a:	4699      	mov	r9, r3
 800025c:	4694      	mov	ip, r2
 800025e:	0003      	movs	r3, r0
 8000260:	4463      	add	r3, ip
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2300      	movs	r3, #0
 8000266:	2600      	movs	r6, #0
 8000268:	00ff      	lsls	r7, r7, #3
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	0323      	lsls	r3, r4, #12
 800026e:	0b1b      	lsrs	r3, r3, #12
 8000270:	4698      	mov	r8, r3
 8000272:	0063      	lsls	r3, r4, #1
 8000274:	0fe4      	lsrs	r4, r4, #31
 8000276:	4652      	mov	r2, sl
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	9401      	str	r4, [sp, #4]
 800027c:	d100      	bne.n	8000280 <__aeabi_ddiv+0x60>
 800027e:	e0b3      	b.n	80003e8 <__aeabi_ddiv+0x1c8>
 8000280:	4986      	ldr	r1, [pc, #536]	; (800049c <__aeabi_ddiv+0x27c>)
 8000282:	428b      	cmp	r3, r1
 8000284:	d100      	bne.n	8000288 <__aeabi_ddiv+0x68>
 8000286:	e09e      	b.n	80003c6 <__aeabi_ddiv+0x1a6>
 8000288:	4642      	mov	r2, r8
 800028a:	00d1      	lsls	r1, r2, #3
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	430a      	orrs	r2, r1
 8000292:	4651      	mov	r1, sl
 8000294:	0f49      	lsrs	r1, r1, #29
 8000296:	4311      	orrs	r1, r2
 8000298:	468b      	mov	fp, r1
 800029a:	4981      	ldr	r1, [pc, #516]	; (80004a0 <__aeabi_ddiv+0x280>)
 800029c:	4652      	mov	r2, sl
 800029e:	468c      	mov	ip, r1
 80002a0:	9900      	ldr	r1, [sp, #0]
 80002a2:	4463      	add	r3, ip
 80002a4:	1acb      	subs	r3, r1, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	002b      	movs	r3, r5
 80002ae:	4063      	eors	r3, r4
 80002b0:	469a      	mov	sl, r3
 80002b2:	2e0f      	cmp	r6, #15
 80002b4:	d900      	bls.n	80002b8 <__aeabi_ddiv+0x98>
 80002b6:	e105      	b.n	80004c4 <__aeabi_ddiv+0x2a4>
 80002b8:	4b7a      	ldr	r3, [pc, #488]	; (80004a4 <__aeabi_ddiv+0x284>)
 80002ba:	00b6      	lsls	r6, r6, #2
 80002bc:	599b      	ldr	r3, [r3, r6]
 80002be:	469f      	mov	pc, r3
 80002c0:	465b      	mov	r3, fp
 80002c2:	4333      	orrs	r3, r6
 80002c4:	4699      	mov	r9, r3
 80002c6:	d000      	beq.n	80002ca <__aeabi_ddiv+0xaa>
 80002c8:	e0b8      	b.n	800043c <__aeabi_ddiv+0x21c>
 80002ca:	2302      	movs	r3, #2
 80002cc:	2608      	movs	r6, #8
 80002ce:	2700      	movs	r7, #0
 80002d0:	9000      	str	r0, [sp, #0]
 80002d2:	9302      	str	r3, [sp, #8]
 80002d4:	e7ca      	b.n	800026c <__aeabi_ddiv+0x4c>
 80002d6:	46cb      	mov	fp, r9
 80002d8:	003a      	movs	r2, r7
 80002da:	9902      	ldr	r1, [sp, #8]
 80002dc:	9501      	str	r5, [sp, #4]
 80002de:	9b01      	ldr	r3, [sp, #4]
 80002e0:	469a      	mov	sl, r3
 80002e2:	2902      	cmp	r1, #2
 80002e4:	d027      	beq.n	8000336 <__aeabi_ddiv+0x116>
 80002e6:	2903      	cmp	r1, #3
 80002e8:	d100      	bne.n	80002ec <__aeabi_ddiv+0xcc>
 80002ea:	e280      	b.n	80007ee <__aeabi_ddiv+0x5ce>
 80002ec:	2901      	cmp	r1, #1
 80002ee:	d044      	beq.n	800037a <__aeabi_ddiv+0x15a>
 80002f0:	496d      	ldr	r1, [pc, #436]	; (80004a8 <__aeabi_ddiv+0x288>)
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	468c      	mov	ip, r1
 80002f6:	4463      	add	r3, ip
 80002f8:	001c      	movs	r4, r3
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	dd38      	ble.n	8000370 <__aeabi_ddiv+0x150>
 80002fe:	0753      	lsls	r3, r2, #29
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xe4>
 8000302:	e213      	b.n	800072c <__aeabi_ddiv+0x50c>
 8000304:	08d2      	lsrs	r2, r2, #3
 8000306:	465b      	mov	r3, fp
 8000308:	01db      	lsls	r3, r3, #7
 800030a:	d509      	bpl.n	8000320 <__aeabi_ddiv+0x100>
 800030c:	4659      	mov	r1, fp
 800030e:	4b67      	ldr	r3, [pc, #412]	; (80004ac <__aeabi_ddiv+0x28c>)
 8000310:	4019      	ands	r1, r3
 8000312:	468b      	mov	fp, r1
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	00c9      	lsls	r1, r1, #3
 8000318:	468c      	mov	ip, r1
 800031a:	9b00      	ldr	r3, [sp, #0]
 800031c:	4463      	add	r3, ip
 800031e:	001c      	movs	r4, r3
 8000320:	4b63      	ldr	r3, [pc, #396]	; (80004b0 <__aeabi_ddiv+0x290>)
 8000322:	429c      	cmp	r4, r3
 8000324:	dc07      	bgt.n	8000336 <__aeabi_ddiv+0x116>
 8000326:	465b      	mov	r3, fp
 8000328:	0564      	lsls	r4, r4, #21
 800032a:	075f      	lsls	r7, r3, #29
 800032c:	025b      	lsls	r3, r3, #9
 800032e:	4317      	orrs	r7, r2
 8000330:	0b1b      	lsrs	r3, r3, #12
 8000332:	0d62      	lsrs	r2, r4, #21
 8000334:	e002      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000336:	2300      	movs	r3, #0
 8000338:	2700      	movs	r7, #0
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <__aeabi_ddiv+0x27c>)
 800033c:	2100      	movs	r1, #0
 800033e:	031b      	lsls	r3, r3, #12
 8000340:	0b1c      	lsrs	r4, r3, #12
 8000342:	0d0b      	lsrs	r3, r1, #20
 8000344:	051b      	lsls	r3, r3, #20
 8000346:	4323      	orrs	r3, r4
 8000348:	0514      	lsls	r4, r2, #20
 800034a:	4a5a      	ldr	r2, [pc, #360]	; (80004b4 <__aeabi_ddiv+0x294>)
 800034c:	0038      	movs	r0, r7
 800034e:	4013      	ands	r3, r2
 8000350:	431c      	orrs	r4, r3
 8000352:	4653      	mov	r3, sl
 8000354:	0064      	lsls	r4, r4, #1
 8000356:	07db      	lsls	r3, r3, #31
 8000358:	0864      	lsrs	r4, r4, #1
 800035a:	431c      	orrs	r4, r3
 800035c:	0021      	movs	r1, r4
 800035e:	b005      	add	sp, #20
 8000360:	bc3c      	pop	{r2, r3, r4, r5}
 8000362:	4690      	mov	r8, r2
 8000364:	4699      	mov	r9, r3
 8000366:	46a2      	mov	sl, r4
 8000368:	46ab      	mov	fp, r5
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	2201      	movs	r2, #1
 800036e:	4252      	negs	r2, r2
 8000370:	2301      	movs	r3, #1
 8000372:	1b1b      	subs	r3, r3, r4
 8000374:	2b38      	cmp	r3, #56	; 0x38
 8000376:	dc00      	bgt.n	800037a <__aeabi_ddiv+0x15a>
 8000378:	e1ad      	b.n	80006d6 <__aeabi_ddiv+0x4b6>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	2700      	movs	r7, #0
 8000380:	e7dc      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000382:	465b      	mov	r3, fp
 8000384:	4333      	orrs	r3, r6
 8000386:	4699      	mov	r9, r3
 8000388:	d05e      	beq.n	8000448 <__aeabi_ddiv+0x228>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d100      	bne.n	8000390 <__aeabi_ddiv+0x170>
 800038e:	e18a      	b.n	80006a6 <__aeabi_ddiv+0x486>
 8000390:	0030      	movs	r0, r6
 8000392:	f000 fa81 	bl	8000898 <__clzsi2>
 8000396:	0003      	movs	r3, r0
 8000398:	3b0b      	subs	r3, #11
 800039a:	2b1c      	cmp	r3, #28
 800039c:	dd00      	ble.n	80003a0 <__aeabi_ddiv+0x180>
 800039e:	e17b      	b.n	8000698 <__aeabi_ddiv+0x478>
 80003a0:	221d      	movs	r2, #29
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	465a      	mov	r2, fp
 80003a6:	0001      	movs	r1, r0
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	3908      	subs	r1, #8
 80003ac:	408e      	lsls	r6, r1
 80003ae:	0013      	movs	r3, r2
 80003b0:	465f      	mov	r7, fp
 80003b2:	4333      	orrs	r3, r6
 80003b4:	4699      	mov	r9, r3
 80003b6:	408f      	lsls	r7, r1
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <__aeabi_ddiv+0x298>)
 80003ba:	2600      	movs	r6, #0
 80003bc:	1a1b      	subs	r3, r3, r0
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	9302      	str	r3, [sp, #8]
 80003c4:	e752      	b.n	800026c <__aeabi_ddiv+0x4c>
 80003c6:	4641      	mov	r1, r8
 80003c8:	4653      	mov	r3, sl
 80003ca:	430b      	orrs	r3, r1
 80003cc:	493b      	ldr	r1, [pc, #236]	; (80004bc <__aeabi_ddiv+0x29c>)
 80003ce:	469b      	mov	fp, r3
 80003d0:	468c      	mov	ip, r1
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	4463      	add	r3, ip
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	465b      	mov	r3, fp
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d13b      	bne.n	8000456 <__aeabi_ddiv+0x236>
 80003de:	2302      	movs	r3, #2
 80003e0:	2200      	movs	r2, #0
 80003e2:	431e      	orrs	r6, r3
 80003e4:	2102      	movs	r1, #2
 80003e6:	e761      	b.n	80002ac <__aeabi_ddiv+0x8c>
 80003e8:	4643      	mov	r3, r8
 80003ea:	4313      	orrs	r3, r2
 80003ec:	469b      	mov	fp, r3
 80003ee:	d037      	beq.n	8000460 <__aeabi_ddiv+0x240>
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d100      	bne.n	80003f8 <__aeabi_ddiv+0x1d8>
 80003f6:	e162      	b.n	80006be <__aeabi_ddiv+0x49e>
 80003f8:	4640      	mov	r0, r8
 80003fa:	f000 fa4d 	bl	8000898 <__clzsi2>
 80003fe:	0003      	movs	r3, r0
 8000400:	3b0b      	subs	r3, #11
 8000402:	2b1c      	cmp	r3, #28
 8000404:	dd00      	ble.n	8000408 <__aeabi_ddiv+0x1e8>
 8000406:	e153      	b.n	80006b0 <__aeabi_ddiv+0x490>
 8000408:	0002      	movs	r2, r0
 800040a:	4641      	mov	r1, r8
 800040c:	3a08      	subs	r2, #8
 800040e:	4091      	lsls	r1, r2
 8000410:	4688      	mov	r8, r1
 8000412:	211d      	movs	r1, #29
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	4651      	mov	r1, sl
 8000418:	40d9      	lsrs	r1, r3
 800041a:	000b      	movs	r3, r1
 800041c:	4641      	mov	r1, r8
 800041e:	430b      	orrs	r3, r1
 8000420:	469b      	mov	fp, r3
 8000422:	4653      	mov	r3, sl
 8000424:	4093      	lsls	r3, r2
 8000426:	001a      	movs	r2, r3
 8000428:	9b00      	ldr	r3, [sp, #0]
 800042a:	4925      	ldr	r1, [pc, #148]	; (80004c0 <__aeabi_ddiv+0x2a0>)
 800042c:	469c      	mov	ip, r3
 800042e:	4460      	add	r0, ip
 8000430:	0003      	movs	r3, r0
 8000432:	468c      	mov	ip, r1
 8000434:	4463      	add	r3, ip
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2100      	movs	r1, #0
 800043a:	e737      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800043c:	2303      	movs	r3, #3
 800043e:	46b1      	mov	r9, r6
 8000440:	9000      	str	r0, [sp, #0]
 8000442:	260c      	movs	r6, #12
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	e711      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000448:	2300      	movs	r3, #0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	2604      	movs	r6, #4
 8000450:	2700      	movs	r7, #0
 8000452:	9302      	str	r3, [sp, #8]
 8000454:	e70a      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000456:	2303      	movs	r3, #3
 8000458:	46c3      	mov	fp, r8
 800045a:	431e      	orrs	r6, r3
 800045c:	2103      	movs	r1, #3
 800045e:	e725      	b.n	80002ac <__aeabi_ddiv+0x8c>
 8000460:	3301      	adds	r3, #1
 8000462:	431e      	orrs	r6, r3
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	e720      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800046a:	2300      	movs	r3, #0
 800046c:	469a      	mov	sl, r3
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	2700      	movs	r7, #0
 8000472:	031b      	lsls	r3, r3, #12
 8000474:	4a09      	ldr	r2, [pc, #36]	; (800049c <__aeabi_ddiv+0x27c>)
 8000476:	e761      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	4649      	mov	r1, r9
 800047c:	031b      	lsls	r3, r3, #12
 800047e:	4219      	tst	r1, r3
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x264>
 8000482:	e0e2      	b.n	800064a <__aeabi_ddiv+0x42a>
 8000484:	4659      	mov	r1, fp
 8000486:	4219      	tst	r1, r3
 8000488:	d000      	beq.n	800048c <__aeabi_ddiv+0x26c>
 800048a:	e0de      	b.n	800064a <__aeabi_ddiv+0x42a>
 800048c:	430b      	orrs	r3, r1
 800048e:	031b      	lsls	r3, r3, #12
 8000490:	0017      	movs	r7, r2
 8000492:	0b1b      	lsrs	r3, r3, #12
 8000494:	46a2      	mov	sl, r4
 8000496:	4a01      	ldr	r2, [pc, #4]	; (800049c <__aeabi_ddiv+0x27c>)
 8000498:	e750      	b.n	800033c <__aeabi_ddiv+0x11c>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	000007ff 	.word	0x000007ff
 80004a0:	fffffc01 	.word	0xfffffc01
 80004a4:	08002c28 	.word	0x08002c28
 80004a8:	000003ff 	.word	0x000003ff
 80004ac:	feffffff 	.word	0xfeffffff
 80004b0:	000007fe 	.word	0x000007fe
 80004b4:	800fffff 	.word	0x800fffff
 80004b8:	fffffc0d 	.word	0xfffffc0d
 80004bc:	fffff801 	.word	0xfffff801
 80004c0:	000003f3 	.word	0x000003f3
 80004c4:	45d9      	cmp	r9, fp
 80004c6:	d900      	bls.n	80004ca <__aeabi_ddiv+0x2aa>
 80004c8:	e0cb      	b.n	8000662 <__aeabi_ddiv+0x442>
 80004ca:	d100      	bne.n	80004ce <__aeabi_ddiv+0x2ae>
 80004cc:	e0c6      	b.n	800065c <__aeabi_ddiv+0x43c>
 80004ce:	003c      	movs	r4, r7
 80004d0:	4648      	mov	r0, r9
 80004d2:	2700      	movs	r7, #0
 80004d4:	9b00      	ldr	r3, [sp, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	465b      	mov	r3, fp
 80004dc:	0e16      	lsrs	r6, r2, #24
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	431e      	orrs	r6, r3
 80004e2:	0213      	lsls	r3, r2, #8
 80004e4:	4698      	mov	r8, r3
 80004e6:	0433      	lsls	r3, r6, #16
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	4699      	mov	r9, r3
 80004ec:	0c31      	lsrs	r1, r6, #16
 80004ee:	9101      	str	r1, [sp, #4]
 80004f0:	f7ff fe90 	bl	8000214 <__aeabi_uidivmod>
 80004f4:	464a      	mov	r2, r9
 80004f6:	4342      	muls	r2, r0
 80004f8:	040b      	lsls	r3, r1, #16
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	0005      	movs	r5, r0
 80004fe:	4319      	orrs	r1, r3
 8000500:	428a      	cmp	r2, r1
 8000502:	d907      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000504:	1989      	adds	r1, r1, r6
 8000506:	3d01      	subs	r5, #1
 8000508:	428e      	cmp	r6, r1
 800050a:	d803      	bhi.n	8000514 <__aeabi_ddiv+0x2f4>
 800050c:	428a      	cmp	r2, r1
 800050e:	d901      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000510:	1e85      	subs	r5, r0, #2
 8000512:	1989      	adds	r1, r1, r6
 8000514:	1a88      	subs	r0, r1, r2
 8000516:	9901      	ldr	r1, [sp, #4]
 8000518:	f7ff fe7c 	bl	8000214 <__aeabi_uidivmod>
 800051c:	0409      	lsls	r1, r1, #16
 800051e:	468c      	mov	ip, r1
 8000520:	464a      	mov	r2, r9
 8000522:	0421      	lsls	r1, r4, #16
 8000524:	4664      	mov	r4, ip
 8000526:	4342      	muls	r2, r0
 8000528:	0c09      	lsrs	r1, r1, #16
 800052a:	0003      	movs	r3, r0
 800052c:	4321      	orrs	r1, r4
 800052e:	428a      	cmp	r2, r1
 8000530:	d904      	bls.n	800053c <__aeabi_ddiv+0x31c>
 8000532:	1989      	adds	r1, r1, r6
 8000534:	3b01      	subs	r3, #1
 8000536:	428e      	cmp	r6, r1
 8000538:	d800      	bhi.n	800053c <__aeabi_ddiv+0x31c>
 800053a:	e0f1      	b.n	8000720 <__aeabi_ddiv+0x500>
 800053c:	042d      	lsls	r5, r5, #16
 800053e:	431d      	orrs	r5, r3
 8000540:	46ab      	mov	fp, r5
 8000542:	4643      	mov	r3, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	4642      	mov	r2, r8
 8000548:	0c28      	lsrs	r0, r5, #16
 800054a:	0412      	lsls	r2, r2, #16
 800054c:	0c1d      	lsrs	r5, r3, #16
 800054e:	465b      	mov	r3, fp
 8000550:	0c14      	lsrs	r4, r2, #16
 8000552:	0022      	movs	r2, r4
 8000554:	041b      	lsls	r3, r3, #16
 8000556:	0c1b      	lsrs	r3, r3, #16
 8000558:	435a      	muls	r2, r3
 800055a:	9403      	str	r4, [sp, #12]
 800055c:	436b      	muls	r3, r5
 800055e:	4344      	muls	r4, r0
 8000560:	9502      	str	r5, [sp, #8]
 8000562:	4368      	muls	r0, r5
 8000564:	191b      	adds	r3, r3, r4
 8000566:	0c15      	lsrs	r5, r2, #16
 8000568:	18eb      	adds	r3, r5, r3
 800056a:	429c      	cmp	r4, r3
 800056c:	d903      	bls.n	8000576 <__aeabi_ddiv+0x356>
 800056e:	2480      	movs	r4, #128	; 0x80
 8000570:	0264      	lsls	r4, r4, #9
 8000572:	46a4      	mov	ip, r4
 8000574:	4460      	add	r0, ip
 8000576:	0c1c      	lsrs	r4, r3, #16
 8000578:	0415      	lsls	r5, r2, #16
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c2d      	lsrs	r5, r5, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	195d      	adds	r5, r3, r5
 8000582:	4281      	cmp	r1, r0
 8000584:	d377      	bcc.n	8000676 <__aeabi_ddiv+0x456>
 8000586:	d073      	beq.n	8000670 <__aeabi_ddiv+0x450>
 8000588:	1a0c      	subs	r4, r1, r0
 800058a:	4aa2      	ldr	r2, [pc, #648]	; (8000814 <__aeabi_ddiv+0x5f4>)
 800058c:	1b7d      	subs	r5, r7, r5
 800058e:	42af      	cmp	r7, r5
 8000590:	41bf      	sbcs	r7, r7
 8000592:	4694      	mov	ip, r2
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	427f      	negs	r7, r7
 8000598:	4463      	add	r3, ip
 800059a:	1be0      	subs	r0, r4, r7
 800059c:	001c      	movs	r4, r3
 800059e:	4286      	cmp	r6, r0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_ddiv+0x384>
 80005a2:	e0db      	b.n	800075c <__aeabi_ddiv+0x53c>
 80005a4:	9901      	ldr	r1, [sp, #4]
 80005a6:	f7ff fe35 	bl	8000214 <__aeabi_uidivmod>
 80005aa:	464a      	mov	r2, r9
 80005ac:	4342      	muls	r2, r0
 80005ae:	040b      	lsls	r3, r1, #16
 80005b0:	0c29      	lsrs	r1, r5, #16
 80005b2:	0007      	movs	r7, r0
 80005b4:	4319      	orrs	r1, r3
 80005b6:	428a      	cmp	r2, r1
 80005b8:	d907      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005ba:	1989      	adds	r1, r1, r6
 80005bc:	3f01      	subs	r7, #1
 80005be:	428e      	cmp	r6, r1
 80005c0:	d803      	bhi.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d901      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c6:	1e87      	subs	r7, r0, #2
 80005c8:	1989      	adds	r1, r1, r6
 80005ca:	1a88      	subs	r0, r1, r2
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	f7ff fe21 	bl	8000214 <__aeabi_uidivmod>
 80005d2:	0409      	lsls	r1, r1, #16
 80005d4:	464a      	mov	r2, r9
 80005d6:	4689      	mov	r9, r1
 80005d8:	0429      	lsls	r1, r5, #16
 80005da:	464d      	mov	r5, r9
 80005dc:	4342      	muls	r2, r0
 80005de:	0c09      	lsrs	r1, r1, #16
 80005e0:	0003      	movs	r3, r0
 80005e2:	4329      	orrs	r1, r5
 80005e4:	428a      	cmp	r2, r1
 80005e6:	d907      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005e8:	1989      	adds	r1, r1, r6
 80005ea:	3b01      	subs	r3, #1
 80005ec:	428e      	cmp	r6, r1
 80005ee:	d803      	bhi.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f0:	428a      	cmp	r2, r1
 80005f2:	d901      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f4:	1e83      	subs	r3, r0, #2
 80005f6:	1989      	adds	r1, r1, r6
 80005f8:	043f      	lsls	r7, r7, #16
 80005fa:	1a89      	subs	r1, r1, r2
 80005fc:	003a      	movs	r2, r7
 80005fe:	9f03      	ldr	r7, [sp, #12]
 8000600:	431a      	orrs	r2, r3
 8000602:	0038      	movs	r0, r7
 8000604:	0413      	lsls	r3, r2, #16
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	4358      	muls	r0, r3
 800060a:	4681      	mov	r9, r0
 800060c:	9802      	ldr	r0, [sp, #8]
 800060e:	0c15      	lsrs	r5, r2, #16
 8000610:	436f      	muls	r7, r5
 8000612:	4343      	muls	r3, r0
 8000614:	4345      	muls	r5, r0
 8000616:	4648      	mov	r0, r9
 8000618:	0c00      	lsrs	r0, r0, #16
 800061a:	4684      	mov	ip, r0
 800061c:	19db      	adds	r3, r3, r7
 800061e:	4463      	add	r3, ip
 8000620:	429f      	cmp	r7, r3
 8000622:	d903      	bls.n	800062c <__aeabi_ddiv+0x40c>
 8000624:	2080      	movs	r0, #128	; 0x80
 8000626:	0240      	lsls	r0, r0, #9
 8000628:	4684      	mov	ip, r0
 800062a:	4465      	add	r5, ip
 800062c:	4648      	mov	r0, r9
 800062e:	0c1f      	lsrs	r7, r3, #16
 8000630:	0400      	lsls	r0, r0, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c00      	lsrs	r0, r0, #16
 8000636:	197d      	adds	r5, r7, r5
 8000638:	1818      	adds	r0, r3, r0
 800063a:	42a9      	cmp	r1, r5
 800063c:	d200      	bcs.n	8000640 <__aeabi_ddiv+0x420>
 800063e:	e084      	b.n	800074a <__aeabi_ddiv+0x52a>
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x424>
 8000642:	e07f      	b.n	8000744 <__aeabi_ddiv+0x524>
 8000644:	2301      	movs	r3, #1
 8000646:	431a      	orrs	r2, r3
 8000648:	e657      	b.n	80002fa <__aeabi_ddiv+0xda>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	464a      	mov	r2, r9
 800064e:	031b      	lsls	r3, r3, #12
 8000650:	4313      	orrs	r3, r2
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	0b1b      	lsrs	r3, r3, #12
 8000656:	46aa      	mov	sl, r5
 8000658:	4a6f      	ldr	r2, [pc, #444]	; (8000818 <__aeabi_ddiv+0x5f8>)
 800065a:	e66f      	b.n	800033c <__aeabi_ddiv+0x11c>
 800065c:	42ba      	cmp	r2, r7
 800065e:	d900      	bls.n	8000662 <__aeabi_ddiv+0x442>
 8000660:	e735      	b.n	80004ce <__aeabi_ddiv+0x2ae>
 8000662:	464b      	mov	r3, r9
 8000664:	07dc      	lsls	r4, r3, #31
 8000666:	0858      	lsrs	r0, r3, #1
 8000668:	087b      	lsrs	r3, r7, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	07ff      	lsls	r7, r7, #31
 800066e:	e734      	b.n	80004da <__aeabi_ddiv+0x2ba>
 8000670:	2400      	movs	r4, #0
 8000672:	42af      	cmp	r7, r5
 8000674:	d289      	bcs.n	800058a <__aeabi_ddiv+0x36a>
 8000676:	4447      	add	r7, r8
 8000678:	4547      	cmp	r7, r8
 800067a:	41a4      	sbcs	r4, r4
 800067c:	465b      	mov	r3, fp
 800067e:	4264      	negs	r4, r4
 8000680:	19a4      	adds	r4, r4, r6
 8000682:	1864      	adds	r4, r4, r1
 8000684:	3b01      	subs	r3, #1
 8000686:	42a6      	cmp	r6, r4
 8000688:	d21e      	bcs.n	80006c8 <__aeabi_ddiv+0x4a8>
 800068a:	42a0      	cmp	r0, r4
 800068c:	d86d      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e0b6      	b.n	8000800 <__aeabi_ddiv+0x5e0>
 8000692:	1a24      	subs	r4, r4, r0
 8000694:	469b      	mov	fp, r3
 8000696:	e778      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000698:	0003      	movs	r3, r0
 800069a:	465a      	mov	r2, fp
 800069c:	3b28      	subs	r3, #40	; 0x28
 800069e:	409a      	lsls	r2, r3
 80006a0:	2700      	movs	r7, #0
 80006a2:	4691      	mov	r9, r2
 80006a4:	e688      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80006a6:	4658      	mov	r0, fp
 80006a8:	f000 f8f6 	bl	8000898 <__clzsi2>
 80006ac:	3020      	adds	r0, #32
 80006ae:	e672      	b.n	8000396 <__aeabi_ddiv+0x176>
 80006b0:	0003      	movs	r3, r0
 80006b2:	4652      	mov	r2, sl
 80006b4:	3b28      	subs	r3, #40	; 0x28
 80006b6:	409a      	lsls	r2, r3
 80006b8:	4693      	mov	fp, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	e6b4      	b.n	8000428 <__aeabi_ddiv+0x208>
 80006be:	4650      	mov	r0, sl
 80006c0:	f000 f8ea 	bl	8000898 <__clzsi2>
 80006c4:	3020      	adds	r0, #32
 80006c6:	e69a      	b.n	80003fe <__aeabi_ddiv+0x1de>
 80006c8:	42a6      	cmp	r6, r4
 80006ca:	d1e2      	bne.n	8000692 <__aeabi_ddiv+0x472>
 80006cc:	45b8      	cmp	r8, r7
 80006ce:	d9dc      	bls.n	800068a <__aeabi_ddiv+0x46a>
 80006d0:	1a34      	subs	r4, r6, r0
 80006d2:	469b      	mov	fp, r3
 80006d4:	e759      	b.n	800058a <__aeabi_ddiv+0x36a>
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	dc65      	bgt.n	80007a6 <__aeabi_ddiv+0x586>
 80006da:	4c50      	ldr	r4, [pc, #320]	; (800081c <__aeabi_ddiv+0x5fc>)
 80006dc:	9900      	ldr	r1, [sp, #0]
 80006de:	46a4      	mov	ip, r4
 80006e0:	465c      	mov	r4, fp
 80006e2:	4461      	add	r1, ip
 80006e4:	0008      	movs	r0, r1
 80006e6:	408c      	lsls	r4, r1
 80006e8:	0011      	movs	r1, r2
 80006ea:	4082      	lsls	r2, r0
 80006ec:	40d9      	lsrs	r1, r3
 80006ee:	1e50      	subs	r0, r2, #1
 80006f0:	4182      	sbcs	r2, r0
 80006f2:	430c      	orrs	r4, r1
 80006f4:	4314      	orrs	r4, r2
 80006f6:	465a      	mov	r2, fp
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	0762      	lsls	r2, r4, #29
 80006fe:	d009      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000700:	220f      	movs	r2, #15
 8000702:	4022      	ands	r2, r4
 8000704:	2a04      	cmp	r2, #4
 8000706:	d005      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000708:	0022      	movs	r2, r4
 800070a:	1d14      	adds	r4, r2, #4
 800070c:	4294      	cmp	r4, r2
 800070e:	4189      	sbcs	r1, r1
 8000710:	4249      	negs	r1, r1
 8000712:	185b      	adds	r3, r3, r1
 8000714:	021a      	lsls	r2, r3, #8
 8000716:	d562      	bpl.n	80007de <__aeabi_ddiv+0x5be>
 8000718:	2201      	movs	r2, #1
 800071a:	2300      	movs	r3, #0
 800071c:	2700      	movs	r7, #0
 800071e:	e60d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000720:	428a      	cmp	r2, r1
 8000722:	d800      	bhi.n	8000726 <__aeabi_ddiv+0x506>
 8000724:	e70a      	b.n	800053c <__aeabi_ddiv+0x31c>
 8000726:	1e83      	subs	r3, r0, #2
 8000728:	1989      	adds	r1, r1, r6
 800072a:	e707      	b.n	800053c <__aeabi_ddiv+0x31c>
 800072c:	230f      	movs	r3, #15
 800072e:	4013      	ands	r3, r2
 8000730:	2b04      	cmp	r3, #4
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x516>
 8000734:	e5e6      	b.n	8000304 <__aeabi_ddiv+0xe4>
 8000736:	1d17      	adds	r7, r2, #4
 8000738:	4297      	cmp	r7, r2
 800073a:	4192      	sbcs	r2, r2
 800073c:	4253      	negs	r3, r2
 800073e:	449b      	add	fp, r3
 8000740:	08fa      	lsrs	r2, r7, #3
 8000742:	e5e0      	b.n	8000306 <__aeabi_ddiv+0xe6>
 8000744:	2800      	cmp	r0, #0
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x52a>
 8000748:	e5d7      	b.n	80002fa <__aeabi_ddiv+0xda>
 800074a:	1871      	adds	r1, r6, r1
 800074c:	1e53      	subs	r3, r2, #1
 800074e:	42b1      	cmp	r1, r6
 8000750:	d327      	bcc.n	80007a2 <__aeabi_ddiv+0x582>
 8000752:	42a9      	cmp	r1, r5
 8000754:	d315      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 8000756:	d058      	beq.n	800080a <__aeabi_ddiv+0x5ea>
 8000758:	001a      	movs	r2, r3
 800075a:	e773      	b.n	8000644 <__aeabi_ddiv+0x424>
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_ddiv+0x542>
 8000760:	e604      	b.n	800036c <__aeabi_ddiv+0x14c>
 8000762:	2301      	movs	r3, #1
 8000764:	2200      	movs	r2, #0
 8000766:	449b      	add	fp, r3
 8000768:	e5cd      	b.n	8000306 <__aeabi_ddiv+0xe6>
 800076a:	2302      	movs	r3, #2
 800076c:	4447      	add	r7, r8
 800076e:	4547      	cmp	r7, r8
 8000770:	4189      	sbcs	r1, r1
 8000772:	425b      	negs	r3, r3
 8000774:	469c      	mov	ip, r3
 8000776:	4249      	negs	r1, r1
 8000778:	1989      	adds	r1, r1, r6
 800077a:	190c      	adds	r4, r1, r4
 800077c:	44e3      	add	fp, ip
 800077e:	1a24      	subs	r4, r4, r0
 8000780:	e703      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000782:	4643      	mov	r3, r8
 8000784:	005f      	lsls	r7, r3, #1
 8000786:	4547      	cmp	r7, r8
 8000788:	419b      	sbcs	r3, r3
 800078a:	46b8      	mov	r8, r7
 800078c:	425b      	negs	r3, r3
 800078e:	199e      	adds	r6, r3, r6
 8000790:	3a02      	subs	r2, #2
 8000792:	1989      	adds	r1, r1, r6
 8000794:	42a9      	cmp	r1, r5
 8000796:	d000      	beq.n	800079a <__aeabi_ddiv+0x57a>
 8000798:	e754      	b.n	8000644 <__aeabi_ddiv+0x424>
 800079a:	4540      	cmp	r0, r8
 800079c:	d000      	beq.n	80007a0 <__aeabi_ddiv+0x580>
 800079e:	e751      	b.n	8000644 <__aeabi_ddiv+0x424>
 80007a0:	e5ab      	b.n	80002fa <__aeabi_ddiv+0xda>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e7f6      	b.n	8000794 <__aeabi_ddiv+0x574>
 80007a6:	211f      	movs	r1, #31
 80007a8:	465f      	mov	r7, fp
 80007aa:	4249      	negs	r1, r1
 80007ac:	1b0c      	subs	r4, r1, r4
 80007ae:	40e7      	lsrs	r7, r4
 80007b0:	2b20      	cmp	r3, #32
 80007b2:	d007      	beq.n	80007c4 <__aeabi_ddiv+0x5a4>
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <__aeabi_ddiv+0x600>)
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	468c      	mov	ip, r1
 80007ba:	4463      	add	r3, ip
 80007bc:	0018      	movs	r0, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	4083      	lsls	r3, r0
 80007c2:	431a      	orrs	r2, r3
 80007c4:	1e50      	subs	r0, r2, #1
 80007c6:	4182      	sbcs	r2, r0
 80007c8:	433a      	orrs	r2, r7
 80007ca:	2707      	movs	r7, #7
 80007cc:	2300      	movs	r3, #0
 80007ce:	4017      	ands	r7, r2
 80007d0:	d009      	beq.n	80007e6 <__aeabi_ddiv+0x5c6>
 80007d2:	210f      	movs	r1, #15
 80007d4:	2300      	movs	r3, #0
 80007d6:	4011      	ands	r1, r2
 80007d8:	0014      	movs	r4, r2
 80007da:	2904      	cmp	r1, #4
 80007dc:	d195      	bne.n	800070a <__aeabi_ddiv+0x4ea>
 80007de:	0022      	movs	r2, r4
 80007e0:	075f      	lsls	r7, r3, #29
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	0b1b      	lsrs	r3, r3, #12
 80007e6:	08d2      	lsrs	r2, r2, #3
 80007e8:	4317      	orrs	r7, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	e5a6      	b.n	800033c <__aeabi_ddiv+0x11c>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	4659      	mov	r1, fp
 80007f2:	031b      	lsls	r3, r3, #12
 80007f4:	430b      	orrs	r3, r1
 80007f6:	031b      	lsls	r3, r3, #12
 80007f8:	0017      	movs	r7, r2
 80007fa:	0b1b      	lsrs	r3, r3, #12
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <__aeabi_ddiv+0x5f8>)
 80007fe:	e59d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000800:	42bd      	cmp	r5, r7
 8000802:	d8b2      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 8000804:	469b      	mov	fp, r3
 8000806:	2400      	movs	r4, #0
 8000808:	e6bf      	b.n	800058a <__aeabi_ddiv+0x36a>
 800080a:	4580      	cmp	r8, r0
 800080c:	d3b9      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 800080e:	001a      	movs	r2, r3
 8000810:	e7c3      	b.n	800079a <__aeabi_ddiv+0x57a>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000003ff 	.word	0x000003ff
 8000818:	000007ff 	.word	0x000007ff
 800081c:	0000041e 	.word	0x0000041e
 8000820:	0000043e 	.word	0x0000043e

08000824 <__aeabi_i2d>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	2800      	cmp	r0, #0
 8000828:	d02d      	beq.n	8000886 <__aeabi_i2d+0x62>
 800082a:	17c3      	asrs	r3, r0, #31
 800082c:	18c5      	adds	r5, r0, r3
 800082e:	405d      	eors	r5, r3
 8000830:	0fc4      	lsrs	r4, r0, #31
 8000832:	0028      	movs	r0, r5
 8000834:	f000 f830 	bl	8000898 <__clzsi2>
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <__aeabi_i2d+0x6c>)
 800083a:	1a1b      	subs	r3, r3, r0
 800083c:	055b      	lsls	r3, r3, #21
 800083e:	0d5b      	lsrs	r3, r3, #21
 8000840:	280a      	cmp	r0, #10
 8000842:	dd15      	ble.n	8000870 <__aeabi_i2d+0x4c>
 8000844:	380b      	subs	r0, #11
 8000846:	4085      	lsls	r5, r0
 8000848:	2200      	movs	r2, #0
 800084a:	032d      	lsls	r5, r5, #12
 800084c:	0b2d      	lsrs	r5, r5, #12
 800084e:	2100      	movs	r1, #0
 8000850:	0010      	movs	r0, r2
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	0d0a      	lsrs	r2, r1, #20
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	0512      	lsls	r2, r2, #20
 800085a:	432a      	orrs	r2, r5
 800085c:	4d0d      	ldr	r5, [pc, #52]	; (8000894 <__aeabi_i2d+0x70>)
 800085e:	051b      	lsls	r3, r3, #20
 8000860:	402a      	ands	r2, r5
 8000862:	4313      	orrs	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	4323      	orrs	r3, r4
 800086c:	0019      	movs	r1, r3
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	0002      	movs	r2, r0
 8000872:	0029      	movs	r1, r5
 8000874:	3215      	adds	r2, #21
 8000876:	4091      	lsls	r1, r2
 8000878:	000a      	movs	r2, r1
 800087a:	210b      	movs	r1, #11
 800087c:	1a08      	subs	r0, r1, r0
 800087e:	40c5      	lsrs	r5, r0
 8000880:	032d      	lsls	r5, r5, #12
 8000882:	0b2d      	lsrs	r5, r5, #12
 8000884:	e7e3      	b.n	800084e <__aeabi_i2d+0x2a>
 8000886:	2400      	movs	r4, #0
 8000888:	2300      	movs	r3, #0
 800088a:	2500      	movs	r5, #0
 800088c:	2200      	movs	r2, #0
 800088e:	e7de      	b.n	800084e <__aeabi_i2d+0x2a>
 8000890:	0000041e 	.word	0x0000041e
 8000894:	800fffff 	.word	0x800fffff

08000898 <__clzsi2>:
 8000898:	211c      	movs	r1, #28
 800089a:	2301      	movs	r3, #1
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	4298      	cmp	r0, r3
 80008a0:	d301      	bcc.n	80008a6 <__clzsi2+0xe>
 80008a2:	0c00      	lsrs	r0, r0, #16
 80008a4:	3910      	subs	r1, #16
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	4298      	cmp	r0, r3
 80008aa:	d301      	bcc.n	80008b0 <__clzsi2+0x18>
 80008ac:	0a00      	lsrs	r0, r0, #8
 80008ae:	3908      	subs	r1, #8
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	4298      	cmp	r0, r3
 80008b4:	d301      	bcc.n	80008ba <__clzsi2+0x22>
 80008b6:	0900      	lsrs	r0, r0, #4
 80008b8:	3904      	subs	r1, #4
 80008ba:	a202      	add	r2, pc, #8	; (adr r2, 80008c4 <__clzsi2+0x2c>)
 80008bc:	5c10      	ldrb	r0, [r2, r0]
 80008be:	1840      	adds	r0, r0, r1
 80008c0:	4770      	bx	lr
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	02020304 	.word	0x02020304
 80008c8:	01010101 	.word	0x01010101
	...

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fb2c 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f814 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f8e8 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008e4:	f000 f8c8 	bl	8000a78 <MX_DMA_Init>
  MX_ADC_Init();
 80008e8:	f000 f85e 	bl	80009a8 <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Wait for button press to start measurement
	if(HAL_GPIO_ReadPin(Scan_Button_GPIO_Port, Scan_Button_Pin) == GPIO_PIN_SET){
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	021a      	lsls	r2, r3, #8
 80008f0:	2390      	movs	r3, #144	; 0x90
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fcc6 	bl	8002288 <HAL_GPIO_ReadPin>
 80008fc:	0003      	movs	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1f4      	bne.n	80008ec <main+0x18>
	  	measureTextile();
 8000902:	f000 f95f 	bl	8000bc4 <measureTextile>
	if(HAL_GPIO_ReadPin(Scan_Button_GPIO_Port, Scan_Button_Pin) == GPIO_PIN_SET){
 8000906:	e7f1      	b.n	80008ec <main+0x18>

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b091      	sub	sp, #68	; 0x44
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	2410      	movs	r4, #16
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2330      	movs	r3, #48	; 0x30
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f002 f961 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2310      	movs	r3, #16
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 f95a 	bl	8002be0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800092c:	0021      	movs	r1, r4
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2212      	movs	r2, #18
 8000932:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2201      	movs	r2, #1
 800093e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2210      	movs	r2, #16
 8000944:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2210      	movs	r2, #16
 800094a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	22a0      	movs	r2, #160	; 0xa0
 800095c:	0392      	lsls	r2, r2, #14
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	187b      	adds	r3, r7, r1
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fcc7 	bl	80022fc <HAL_RCC_OscConfig>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000972:	f000 f9ed 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	003b      	movs	r3, r7
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	003b      	movs	r3, r7
 800097e:	2202      	movs	r2, #2
 8000980:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	003b      	movs	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	003b      	movs	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800098e:	003b      	movs	r3, r7
 8000990:	2101      	movs	r1, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f001 ffce 	bl	8002934 <HAL_RCC_ClockConfig>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800099c:	f000 f9d8 	bl	8000d50 <Error_Handler>
  }
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b011      	add	sp, #68	; 0x44
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	0018      	movs	r0, r3
 80009b2:	230c      	movs	r3, #12
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 f912 	bl	8002be0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009be:	4a2d      	ldr	r2, [pc, #180]	; (8000a74 <MX_ADC_Init+0xcc>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009dc:	2204      	movs	r2, #4
 80009de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC_Init+0xc8>)
 80009fa:	22c2      	movs	r2, #194	; 0xc2
 80009fc:	32ff      	adds	r2, #255	; 0xff
 80009fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a08:	2224      	movs	r2, #36	; 0x24
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fb12 	bl	8001040 <HAL_ADC_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 f996 	bl	8000d50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0152      	lsls	r2, r2, #5
 8000a30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2206      	movs	r2, #6
 8000a36:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fd46 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000a48:	f000 f982 	bl	8000d50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a52:	1d3a      	adds	r2, r7, #4
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_ADC_Init+0xc8>)
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fd39 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000a62:	f000 f975 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	2000012c 	.word	0x2000012c
 8000a74:	40012400 	.word	0x40012400

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2009      	movs	r0, #9
 8000a9c:	f001 f882 	bl	8001ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa0:	2009      	movs	r0, #9
 8000aa2:	f001 f894 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	240c      	movs	r4, #12
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2314      	movs	r3, #20
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f002 f88b 	bl	8002be0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0289      	lsls	r1, r1, #10
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	029b      	lsls	r3, r3, #10
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	02c9      	lsls	r1, r1, #11
 8000af0:	430a      	orrs	r2, r1
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	02db      	lsls	r3, r3, #11
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	0309      	lsls	r1, r1, #12
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	031b      	lsls	r3, r3, #12
 8000b18:	4013      	ands	r3, r2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED8_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000b1e:	23ff      	movs	r3, #255	; 0xff
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	4826      	ldr	r0, [pc, #152]	; (8000bbc <MX_GPIO_Init+0x108>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	0019      	movs	r1, r3
 8000b28:	f001 fbcb 	bl	80022c2 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	0019      	movs	r1, r3
 8000b36:	f001 fbc4 	bl	80022c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED8_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	00d2      	lsls	r2, r2, #3
 8000b40:	601a      	str	r2, [r3, #0]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2201      	movs	r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <MX_GPIO_Init+0x108>)
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0010      	movs	r0, r2
 8000b5c:	f001 fa24 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000b60:	0021      	movs	r1, r4
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	22c0      	movs	r2, #192	; 0xc0
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	000c      	movs	r4, r1
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b82:	0019      	movs	r1, r3
 8000b84:	0010      	movs	r0, r2
 8000b86:	f001 fa0f 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Scan_Button_Pin */
  GPIO_InitStruct.Pin = Scan_Button_Pin;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0212      	lsls	r2, r2, #8
 8000b92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Scan_Button_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	187a      	adds	r2, r7, r1
 8000ba2:	2390      	movs	r3, #144	; 0x90
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 f9fd 	bl	8001fa8 <HAL_GPIO_Init>

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b009      	add	sp, #36	; 0x24
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <measureTextile>:

/* USER CODE BEGIN 4 */

void measureTextile(void){
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
	//Scan the material 3 times, 2 controls and 1 measurement
	//for(int i=0; i<3; i++){

		//Turns on each LED and reads the ADC measurement
		//Then outputs data to Jetson TX2
		for(int j=0; j<8; j++){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	e09e      	b.n	8000d0e <measureTextile+0x14a>

			//counter used to move through the DMA buffer
			int k = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]

			//Check if going through control or measurement section
			//if(i==1){
				HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_SET);
 8000bd4:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <measureTextile+0x160>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	5ad3      	ldrh	r3, [r2, r3]
 8000bdc:	4852      	ldr	r0, [pc, #328]	; (8000d28 <measureTextile+0x164>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	0019      	movs	r1, r3
 8000be2:	f001 fb6e 	bl	80022c2 <HAL_GPIO_WritePin>
				//Turn on LED to signify each LED OUT
				HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_SET);
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4850      	ldr	r0, [pc, #320]	; (8000d2c <measureTextile+0x168>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	0019      	movs	r1, r3
 8000bf0:	f001 fb67 	bl	80022c2 <HAL_GPIO_WritePin>
			//else{
				//HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_RESET);
			//}

			//Start the ADC to DMA
			HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, 2);
 8000bf4:	494e      	ldr	r1, [pc, #312]	; (8000d30 <measureTextile+0x16c>)
 8000bf6:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <measureTextile+0x170>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fb60 	bl	80012c0 <HAL_ADC_Start_DMA>

			//Wait for the ADC conversion complete callback
			HAL_ADC_ConvCpltCallback(&hadc);
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <measureTextile+0x170>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fc4c 	bl	80014a0 <HAL_ADC_ConvCpltCallback>

			//Turn on LED to signify ADC Read
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <measureTextile+0x168>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	0019      	movs	r1, r3
 8000c12:	f001 fb56 	bl	80022c2 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f000 f9f0 	bl	8000ffc <HAL_Delay>

			//Poll ADC Channel 0
			measurementADC0[j] = adc_buffer[k];
 8000c1c:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <measureTextile+0x16c>)
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	0052      	lsls	r2, r2, #1
 8000c22:	5ad1      	ldrh	r1, [r2, r3]
 8000c24:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <measureTextile+0x174>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	52d1      	strh	r1, [r2, r3]
			m_ADC0[j] = adc_buffer[k]/1365.333333;
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <measureTextile+0x16c>)
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	0052      	lsls	r2, r2, #1
 8000c32:	5ad3      	ldrh	r3, [r2, r3]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fdf5 	bl	8000824 <__aeabi_i2d>
 8000c3a:	4a40      	ldr	r2, [pc, #256]	; (8000d3c <measureTextile+0x178>)
 8000c3c:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <measureTextile+0x17c>)
 8000c3e:	f7ff faef 	bl	8000220 <__aeabi_ddiv>
 8000c42:	0003      	movs	r3, r0
 8000c44:	000c      	movs	r4, r1
 8000c46:	493f      	ldr	r1, [pc, #252]	; (8000d44 <measureTextile+0x180>)
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	00d2      	lsls	r2, r2, #3
 8000c4c:	188a      	adds	r2, r1, r2
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	6054      	str	r4, [r2, #4]
			//m_ADC0[j] = adc_buffer[k]/1241.212121;
			HAL_Delay(500);
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f9d0 	bl	8000ffc <HAL_Delay>

			//Turn off LED to signify ADC Read complete
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_RESET);
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4832      	ldr	r0, [pc, #200]	; (8000d2c <measureTextile+0x168>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	0019      	movs	r1, r3
 8000c66:	f001 fb2c 	bl	80022c2 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000c6a:	23fa      	movs	r3, #250	; 0xfa
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f9c4 	bl	8000ffc <HAL_Delay>

			//Move to DMA second reading
			k++;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	603b      	str	r3, [r7, #0]

			//Turn on LED to signify ADC Read
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	482b      	ldr	r0, [pc, #172]	; (8000d2c <measureTextile+0x168>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	0019      	movs	r1, r3
 8000c84:	f001 fb1d 	bl	80022c2 <HAL_GPIO_WritePin>

			//Poll ADC Channel 1
			measurementADC1[j] = adc_buffer[k];
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <measureTextile+0x16c>)
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	0052      	lsls	r2, r2, #1
 8000c8e:	5ad1      	ldrh	r1, [r2, r3]
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <measureTextile+0x184>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	0052      	lsls	r2, r2, #1
 8000c96:	52d1      	strh	r1, [r2, r3]
			m_ADC1[j] = adc_buffer[k]/1365.333333;
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <measureTextile+0x16c>)
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	5ad3      	ldrh	r3, [r2, r3]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fdbf 	bl	8000824 <__aeabi_i2d>
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <measureTextile+0x178>)
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <measureTextile+0x17c>)
 8000caa:	f7ff fab9 	bl	8000220 <__aeabi_ddiv>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	4926      	ldr	r1, [pc, #152]	; (8000d4c <measureTextile+0x188>)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	6054      	str	r4, [r2, #4]
			//m_ADC1[j] = adc_buffer[k]/1241.212121;
			HAL_Delay(500);
 8000cbe:	23fa      	movs	r3, #250	; 0xfa
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f99a 	bl	8000ffc <HAL_Delay>

			HAL_ADC_Stop_DMA(&hadc);
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <measureTextile+0x170>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fb7a 	bl	80013c4 <HAL_ADC_Stop_DMA>
			//Turn off LED to signify ADC Read complete
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_RESET);
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <measureTextile+0x168>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	f001 faf2 	bl	80022c2 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(GPIOB, LED_OUT[j], GPIO_PIN_RESET);
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <measureTextile+0x160>)
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	0052      	lsls	r2, r2, #1
 8000ce4:	5ad3      	ldrh	r3, [r2, r3]
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <measureTextile+0x164>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	0019      	movs	r1, r3
 8000cec:	f001 fae9 	bl	80022c2 <HAL_GPIO_WritePin>
			//Turn off LED to signify each LED OUT
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_RESET);
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <measureTextile+0x168>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	f001 fae2 	bl	80022c2 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000cfe:	23fa      	movs	r3, #250	; 0xfa
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f97a 	bl	8000ffc <HAL_Delay>
		for(int j=0; j<8; j++){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	dc00      	bgt.n	8000d16 <measureTextile+0x152>
 8000d14:	e75c      	b.n	8000bd0 <measureTextile+0xc>
		}
	//}

	HAL_Delay(10);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 f970 	bl	8000ffc <HAL_Delay>
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b003      	add	sp, #12
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	20000090 	.word	0x20000090
 8000d34:	2000012c 	.word	0x2000012c
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	553ef6b6 	.word	0x553ef6b6
 8000d40:	40955555 	.word	0x40955555
 8000d44:	200000a8 	.word	0x200000a8
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	20000050 	.word	0x20000050

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	69da      	ldr	r2, [r3, #28]
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0549      	lsls	r1, r1, #21
 8000d84:	430a      	orrs	r2, r1
 8000d86:	61da      	str	r2, [r3, #28]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_MspInit+0x44>)
 8000d8a:	69da      	ldr	r2, [r3, #28]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	055b      	lsls	r3, r3, #21
 8000d90:	4013      	ands	r3, r2
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	2314      	movs	r3, #20
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	0018      	movs	r0, r3
 8000db2:	2314      	movs	r3, #20
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f001 ff12 	bl	8002be0 <memset>
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <HAL_ADC_MspInit+0xd4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d154      	bne.n	8000e70 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0089      	lsls	r1, r1, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0289      	lsls	r1, r1, #10
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	029b      	lsls	r3, r3, #10
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC0_2v5REF_Pin|ADC1_Sensor_Pin;
 8000dfe:	2114      	movs	r1, #20
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2203      	movs	r2, #3
 8000e04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	187a      	adds	r2, r7, r1
 8000e14:	2390      	movs	r3, #144	; 0x90
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	0011      	movs	r1, r2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 f8c4 	bl	8001fa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	0052      	lsls	r2, r2, #1
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fed6 	bl	8001c08 <HAL_DMA_Init>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000e60:	f7ff ff76 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b00a      	add	sp, #40	; 0x28
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40012400 	.word	0x40012400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	200000e8 	.word	0x200000e8
 8000e84:	40020008 	.word	0x40020008

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 f888 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 ff86 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	200000e8 	.word	0x200000e8

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0a:	f7ff ffe3 	bl	8000ed4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f001 fe43 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff fcdf 	bl	80008d4 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f24:	08002c80 	.word	0x08002c80
  ldr r2, =_sbss
 8000f28:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f2c:	20000170 	.word	0x20000170

08000f30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_COMP_IRQHandler>
	...

08000f34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_Init+0x24>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_Init+0x24>)
 8000f3e:	2110      	movs	r1, #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f809 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff ff07 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	0098      	lsls	r0, r3, #2
 8000f72:	f7ff f8c9 	bl	8000108 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f7ff f8c4 	bl	8000108 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fe33 	bl	8001bee <HAL_SYSTICK_Config>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00f      	b.n	8000fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d80b      	bhi.n	8000fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fe00 	bl	8001ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_InitTick+0x64>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	20000014 	.word	0x20000014

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d2      	adds	r2, r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000018 	.word	0x20000018
 8000fe4:	2000016c 	.word	0x2000016c

08000fe8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	2000016c 	.word	0x2000016c

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001a      	movs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	189b      	adds	r3, r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000018 	.word	0x20000018

08001040 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e125      	b.n	80012aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fe94 	bl	8000da4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	2210      	movs	r2, #16
 8001082:	4013      	ands	r3, r2
 8001084:	d000      	beq.n	8001088 <HAL_ADC_Init+0x48>
 8001086:	e103      	b.n	8001290 <HAL_ADC_Init+0x250>
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d000      	beq.n	8001094 <HAL_ADC_Init+0x54>
 8001092:	e0fd      	b.n	8001290 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2204      	movs	r2, #4
 800109c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800109e:	d000      	beq.n	80010a2 <HAL_ADC_Init+0x62>
 80010a0:	e0f6      	b.n	8001290 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	4a83      	ldr	r2, [pc, #524]	; (80012b4 <HAL_ADC_Init+0x274>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	2202      	movs	r2, #2
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d112      	bne.n	80010e6 <HAL_ADC_Init+0xa6>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d009      	beq.n	80010e2 <HAL_ADC_Init+0xa2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	401a      	ands	r2, r3
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	429a      	cmp	r2, r3
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0xa6>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_ADC_Init+0xa8>
 80010e6:	2300      	movs	r3, #0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d116      	bne.n	800111a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2218      	movs	r2, #24
 80010f4:	4393      	bics	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	0899      	lsrs	r1, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4964      	ldr	r1, [pc, #400]	; (80012b8 <HAL_ADC_Init+0x278>)
 8001126:	400a      	ands	r2, r1
 8001128:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e5b      	ldrb	r3, [r3, #25]
 8001134:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001136:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e9b      	ldrb	r3, [r3, #26]
 800113c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800113e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <HAL_ADC_Init+0x10e>
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	015b      	lsls	r3, r3, #5
 800114c:	e000      	b.n	8001150 <HAL_ADC_Init+0x110>
 800114e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001150:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001156:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d101      	bne.n	8001164 <HAL_ADC_Init+0x124>
 8001160:	2304      	movs	r3, #4
 8001162:	e000      	b.n	8001166 <HAL_ADC_Init+0x126>
 8001164:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001166:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2124      	movs	r1, #36	; 0x24
 800116c:	5c5b      	ldrb	r3, [r3, r1]
 800116e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001170:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	4313      	orrs	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7edb      	ldrb	r3, [r3, #27]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d115      	bne.n	80011ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	0252      	lsls	r2, r2, #9
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	e00b      	b.n	80011ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	2220      	movs	r2, #32
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	2201      	movs	r2, #1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	23c2      	movs	r3, #194	; 0xc2
 80011b2:	33ff      	adds	r3, #255	; 0xff
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d007      	beq.n	80011c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011c0:	4313      	orrs	r3, r2
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68d9      	ldr	r1, [r3, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	055b      	lsls	r3, r3, #21
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d01b      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d017      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d013      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d00f      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00b      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b05      	cmp	r3, #5
 800120a:	d007      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	2b06      	cmp	r3, #6
 8001212:	d003      	beq.n	800121c <HAL_ADC_Init+0x1dc>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b07      	cmp	r3, #7
 800121a:	d112      	bne.n	8001242 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2107      	movs	r1, #7
 8001228:	438a      	bics	r2, r1
 800122a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6959      	ldr	r1, [r3, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	2207      	movs	r2, #7
 8001238:	401a      	ands	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_ADC_Init+0x27c>)
 800124a:	4013      	ands	r3, r2
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d10b      	bne.n	800126a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	2203      	movs	r2, #3
 800125e:	4393      	bics	r3, r2
 8001260:	2201      	movs	r2, #1
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001268:	e01c      	b.n	80012a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	2212      	movs	r2, #18
 8001270:	4393      	bics	r3, r2
 8001272:	2210      	movs	r2, #16
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127e:	2201      	movs	r2, #1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001286:	230f      	movs	r3, #15
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800128e:	e009      	b.n	80012a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	2210      	movs	r2, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	fffffefd 	.word	0xfffffefd
 80012b8:	fffe0219 	.word	0xfffe0219
 80012bc:	833fffe7 	.word	0x833fffe7

080012c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2317      	movs	r3, #23
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2204      	movs	r2, #4
 80012dc:	4013      	ands	r3, r2
 80012de:	d15e      	bne.n	800139e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2234      	movs	r2, #52	; 0x34
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Start_DMA+0x2e>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e05e      	b.n	80013ac <HAL_ADC_Start_DMA+0xec>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2234      	movs	r2, #52	; 0x34
 80012f2:	2101      	movs	r1, #1
 80012f4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	7e5b      	ldrb	r3, [r3, #25]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d007      	beq.n	800130e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80012fe:	2317      	movs	r3, #23
 8001300:	18fc      	adds	r4, r7, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	0018      	movs	r0, r3
 8001306:	f000 f9f1 	bl	80016ec <ADC_Enable>
 800130a:	0003      	movs	r3, r0
 800130c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800130e:	2317      	movs	r3, #23
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d146      	bne.n	80013a6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_ADC_Start_DMA+0xf4>)
 800131e:	4013      	ands	r3, r2
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0052      	lsls	r2, r2, #1
 8001324:	431a      	orrs	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2234      	movs	r2, #52	; 0x34
 8001334:	2100      	movs	r1, #0
 8001336:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_ADC_Start_DMA+0xf8>)
 800133e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_ADC_Start_DMA+0xfc>)
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_ADC_Start_DMA+0x100>)
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	221c      	movs	r2, #28
 8001356:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2110      	movs	r1, #16
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3340      	adds	r3, #64	; 0x40
 8001382:	0019      	movs	r1, r3
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f000 fc86 	bl	8001c98 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2104      	movs	r1, #4
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e003      	b.n	80013a6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800139e:	2317      	movs	r3, #23
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2202      	movs	r2, #2
 80013a4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013a6:	2317      	movs	r3, #23
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b007      	add	sp, #28
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	fffff0fe 	.word	0xfffff0fe
 80013b8:	08001945 	.word	0x08001945
 80013bc:	080019f9 	.word	0x080019f9
 80013c0:	08001a17 	.word	0x08001a17

080013c4 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2234      	movs	r2, #52	; 0x34
 80013d8:	5c9b      	ldrb	r3, [r3, r2]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Stop_DMA+0x1e>
 80013de:	2302      	movs	r3, #2
 80013e0:	e058      	b.n	8001494 <HAL_ADC_Stop_DMA+0xd0>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2234      	movs	r2, #52	; 0x34
 80013e6:	2101      	movs	r1, #1
 80013e8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013ea:	250f      	movs	r5, #15
 80013ec:	197c      	adds	r4, r7, r5
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 fa61 	bl	80018b8 <ADC_ConversionStop>
 80013f6:	0003      	movs	r3, r0
 80013f8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013fa:	197b      	adds	r3, r7, r5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d141      	bne.n	8001486 <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	438a      	bics	r2, r1
 8001410:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	250f      	movs	r5, #15
 8001418:	197c      	adds	r4, r7, r5
 800141a:	0018      	movs	r0, r3
 800141c:	f000 fca2 	bl	8001d64 <HAL_DMA_Abort>
 8001420:	0003      	movs	r3, r0
 8001422:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001424:	197b      	adds	r3, r7, r5
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	2240      	movs	r2, #64	; 0x40
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2110      	movs	r1, #16
 8001444:	438a      	bics	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001448:	230f      	movs	r3, #15
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001452:	230f      	movs	r3, #15
 8001454:	18fc      	adds	r4, r7, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f000 f9c3 	bl	80017e4 <ADC_Disable>
 800145e:	0003      	movs	r3, r0
 8001460:	7023      	strb	r3, [r4, #0]
 8001462:	e003      	b.n	800146c <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f9bc 	bl	80017e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d107      	bne.n	8001486 <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_ADC_Stop_DMA+0xd8>)
 800147c:	4013      	ands	r3, r2
 800147e:	2201      	movs	r2, #1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2234      	movs	r2, #52	; 0x34
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b004      	add	sp, #16
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	fffffefe 	.word	0xfffffefe

080014a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014da:	230f      	movs	r3, #15
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	055b      	lsls	r3, r3, #21
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d011      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d00d      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d009      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	2b03      	cmp	r3, #3
 8001508:	d005      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	2b04      	cmp	r3, #4
 8001510:	d001      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2234      	movs	r2, #52	; 0x34
 800151a:	5c9b      	ldrb	r3, [r3, r2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x54>
 8001520:	2302      	movs	r3, #2
 8001522:	e0d0      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1f6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2234      	movs	r2, #52	; 0x34
 8001528:	2101      	movs	r1, #1
 800152a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	d000      	beq.n	800153a <HAL_ADC_ConfigChannel+0x6a>
 8001538:	e0b4      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a64      	ldr	r2, [pc, #400]	; (80016d0 <HAL_ADC_ConfigChannel+0x200>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x76>
 8001544:	e082      	b.n	800164c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	055b      	lsls	r3, r3, #21
 8001564:	429a      	cmp	r2, r3
 8001566:	d037      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d033      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2b02      	cmp	r3, #2
 8001576:	d02f      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b03      	cmp	r3, #3
 800157e:	d02b      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	2b04      	cmp	r3, #4
 8001586:	d027      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2b05      	cmp	r3, #5
 800158e:	d023      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b06      	cmp	r3, #6
 8001596:	d01f      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	2b07      	cmp	r3, #7
 800159e:	d01b      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2107      	movs	r1, #7
 80015ac:	400b      	ands	r3, r1
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d012      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2107      	movs	r1, #7
 80015be:	438a      	bics	r2, r1
 80015c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6959      	ldr	r1, [r3, #20]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2207      	movs	r2, #7
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d007      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x120>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d003      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x120>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d163      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d009      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x140>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b11      	cmp	r3, #17
 8001602:	d102      	bne.n	800160a <HAL_ADC_ConfigChannel+0x13a>
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	03db      	lsls	r3, r3, #15
 8001608:	e004      	b.n	8001614 <HAL_ADC_ConfigChannel+0x144>
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	045b      	lsls	r3, r3, #17
 800160e:	e001      	b.n	8001614 <HAL_ADC_ConfigChannel+0x144>
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 8001616:	430b      	orrs	r3, r1
 8001618:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d14a      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_ADC_ConfigChannel+0x208>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	492d      	ldr	r1, [pc, #180]	; (80016dc <HAL_ADC_ConfigChannel+0x20c>)
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe fd6d 	bl	8000108 <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	001a      	movs	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	189b      	adds	r3, r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x16e>
 800164a:	e035      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4099      	lsls	r1, r3
 800165a:	000b      	movs	r3, r1
 800165c:	43d9      	mvns	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d007      	beq.n	800167e <HAL_ADC_ConfigChannel+0x1ae>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b11      	cmp	r3, #17
 8001674:	d003      	beq.n	800167e <HAL_ADC_ConfigChannel+0x1ae>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b12      	cmp	r3, #18
 800167c:	d11c      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d007      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1ca>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b11      	cmp	r3, #17
 8001690:	d101      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1c6>
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_ADC_ConfigChannel+0x210>)
 8001694:	e002      	b.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_ADC_ConfigChannel+0x214>)
 8001698:	e000      	b.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_ADC_ConfigChannel+0x218>)
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 800169e:	400b      	ands	r3, r1
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e009      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a8:	2220      	movs	r2, #32
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2234      	movs	r2, #52	; 0x34
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	00001001 	.word	0x00001001
 80016d4:	40012708 	.word	0x40012708
 80016d8:	20000010 	.word	0x20000010
 80016dc:	000f4240 	.word	0x000f4240
 80016e0:	ffbfffff 	.word	0xffbfffff
 80016e4:	feffffff 	.word	0xfeffffff
 80016e8:	ff7fffff 	.word	0xff7fffff

080016ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2203      	movs	r2, #3
 8001704:	4013      	ands	r3, r2
 8001706:	2b01      	cmp	r3, #1
 8001708:	d112      	bne.n	8001730 <ADC_Enable+0x44>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	2b01      	cmp	r3, #1
 8001716:	d009      	beq.n	800172c <ADC_Enable+0x40>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	401a      	ands	r2, r3
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	429a      	cmp	r2, r3
 800172a:	d101      	bne.n	8001730 <ADC_Enable+0x44>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <ADC_Enable+0x46>
 8001730:	2300      	movs	r3, #0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d14b      	bne.n	80017ce <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <ADC_Enable+0xec>)
 800173e:	4013      	ands	r3, r2
 8001740:	d00d      	beq.n	800175e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	2210      	movs	r2, #16
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	2201      	movs	r2, #1
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e038      	b.n	80017d0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <ADC_Enable+0xf0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	491b      	ldr	r1, [pc, #108]	; (80017e0 <ADC_Enable+0xf4>)
 8001774:	0018      	movs	r0, r3
 8001776:	f7fe fcc7 	bl	8000108 <__udivsi3>
 800177a:	0003      	movs	r3, r0
 800177c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800177e:	e002      	b.n	8001786 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3b01      	subs	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f9      	bne.n	8001780 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800178c:	f7ff fc2c 	bl	8000fe8 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001794:	e014      	b.n	80017c0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001796:	f7ff fc27 	bl	8000fe8 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d90d      	bls.n	80017c0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	2210      	movs	r2, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	2201      	movs	r2, #1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e007      	b.n	80017d0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d1e3      	bne.n	8001796 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b004      	add	sp, #16
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	80000017 	.word	0x80000017
 80017dc:	20000010 	.word	0x20000010
 80017e0:	000f4240 	.word	0x000f4240

080017e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2203      	movs	r2, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d112      	bne.n	8001824 <ADC_Disable+0x40>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	2b01      	cmp	r3, #1
 800180a:	d009      	beq.n	8001820 <ADC_Disable+0x3c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	401a      	ands	r2, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	429a      	cmp	r2, r3
 800181e:	d101      	bne.n	8001824 <ADC_Disable+0x40>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <ADC_Disable+0x42>
 8001824:	2300      	movs	r3, #0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d041      	beq.n	80018ae <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2205      	movs	r2, #5
 8001832:	4013      	ands	r3, r2
 8001834:	2b01      	cmp	r3, #1
 8001836:	d110      	bne.n	800185a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2102      	movs	r1, #2
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2203      	movs	r2, #3
 800184e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001850:	f7ff fbca 	bl	8000fe8 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001858:	e022      	b.n	80018a0 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	2210      	movs	r2, #16
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	2201      	movs	r2, #1
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e01c      	b.n	80018b0 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001876:	f7ff fbb7 	bl	8000fe8 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d90d      	bls.n	80018a0 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	2210      	movs	r2, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	2201      	movs	r2, #1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e007      	b.n	80018b0 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d0e3      	beq.n	8001876 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2204      	movs	r2, #4
 80018cc:	4013      	ands	r3, r2
 80018ce:	d034      	beq.n	800193a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2204      	movs	r2, #4
 80018d8:	4013      	ands	r3, r2
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d10d      	bne.n	80018fa <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80018e8:	d107      	bne.n	80018fa <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2110      	movs	r1, #16
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018fa:	f7ff fb75 	bl	8000fe8 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001902:	e014      	b.n	800192e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001904:	f7ff fb70 	bl	8000fe8 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d90d      	bls.n	800192e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	2210      	movs	r2, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2201      	movs	r2, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e006      	b.n	800193c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2204      	movs	r2, #4
 8001936:	4013      	ands	r3, r2
 8001938:	d1e4      	bne.n	8001904 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}

08001944 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	2250      	movs	r2, #80	; 0x50
 8001958:	4013      	ands	r3, r2
 800195a:	d140      	bne.n	80019de <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	431a      	orrs	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4013      	ands	r3, r2
 8001976:	d12d      	bne.n	80019d4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800197c:	2b00      	cmp	r3, #0
 800197e:	d129      	bne.n	80019d4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2208      	movs	r2, #8
 8001988:	4013      	ands	r3, r2
 800198a:	2b08      	cmp	r3, #8
 800198c:	d122      	bne.n	80019d4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2204      	movs	r2, #4
 8001996:	4013      	ands	r3, r2
 8001998:	d110      	bne.n	80019bc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	210c      	movs	r1, #12
 80019a6:	438a      	bics	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <ADC_DMAConvCplt+0xb0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	2201      	movs	r2, #1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
 80019ba:	e00b      	b.n	80019d4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	2220      	movs	r2, #32
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2201      	movs	r2, #1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fd62 	bl	80014a0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80019dc:	e005      	b.n	80019ea <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	0010      	movs	r0, r2
 80019e8:	4798      	blx	r3
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	fffffefe 	.word	0xfffffefe

080019f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fd51 	bl	80014b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	2204      	movs	r2, #4
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fd3e 	bl	80014c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b004      	add	sp, #16
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	0002      	movs	r2, r0
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5e:	d809      	bhi.n	8001a74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	001a      	movs	r2, r3
 8001a66:	231f      	movs	r3, #31
 8001a68:	401a      	ands	r2, r3
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_EnableIRQ+0x30>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4091      	lsls	r1, r2
 8001a70:	000a      	movs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
  }
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0002      	movs	r2, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	d828      	bhi.n	8001ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <__NVIC_SetPriority+0xd4>)
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	33c0      	adds	r3, #192	; 0xc0
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	589b      	ldr	r3, [r3, r2]
 8001aa6:	1dfa      	adds	r2, r7, #7
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	0011      	movs	r1, r2
 8001aac:	2203      	movs	r2, #3
 8001aae:	400a      	ands	r2, r1
 8001ab0:	00d2      	lsls	r2, r2, #3
 8001ab2:	21ff      	movs	r1, #255	; 0xff
 8001ab4:	4091      	lsls	r1, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	43d2      	mvns	r2, r2
 8001aba:	401a      	ands	r2, r3
 8001abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	019b      	lsls	r3, r3, #6
 8001ac2:	22ff      	movs	r2, #255	; 0xff
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	2303      	movs	r3, #3
 8001ace:	4003      	ands	r3, r0
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <__NVIC_SetPriority+0xd4>)
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	33c0      	adds	r3, #192	; 0xc0
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ae6:	e031      	b.n	8001b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <__NVIC_SetPriority+0xd8>)
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	0019      	movs	r1, r3
 8001af0:	230f      	movs	r3, #15
 8001af2:	400b      	ands	r3, r1
 8001af4:	3b08      	subs	r3, #8
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3306      	adds	r3, #6
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	3304      	adds	r3, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1dfa      	adds	r2, r7, #7
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	0011      	movs	r1, r2
 8001b08:	2203      	movs	r2, #3
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	00d2      	lsls	r2, r2, #3
 8001b0e:	21ff      	movs	r1, #255	; 0xff
 8001b10:	4091      	lsls	r1, r2
 8001b12:	000a      	movs	r2, r1
 8001b14:	43d2      	mvns	r2, r2
 8001b16:	401a      	ands	r2, r3
 8001b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	401a      	ands	r2, r3
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	0018      	movs	r0, r3
 8001b28:	2303      	movs	r3, #3
 8001b2a:	4003      	ands	r3, r0
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <__NVIC_SetPriority+0xd8>)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	001c      	movs	r4, r3
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	430a      	orrs	r2, r1
 8001b42:	3306      	adds	r3, #6
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	18c3      	adds	r3, r0, r3
 8001b48:	3304      	adds	r3, #4
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b003      	add	sp, #12
 8001b52:	bd90      	pop	{r4, r7, pc}
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <SysTick_Config+0x40>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e010      	b.n	8001b94 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <SysTick_Config+0x44>)
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	3a01      	subs	r2, #1
 8001b78:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	425b      	negs	r3, r3
 8001b7e:	2103      	movs	r1, #3
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff ff7d 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <SysTick_Config+0x44>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x44>)
 8001b8e:	2207      	movs	r2, #7
 8001b90:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	00ffffff 	.word	0x00ffffff
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	210f      	movs	r1, #15
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff ff33 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ffaf 	bl	8001b5c <SysTick_Config>
 8001bfe:	0003      	movs	r3, r0
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e036      	b.n	8001c8c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	2102      	movs	r1, #2
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_DMA_Init+0x8c>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f97e 	bl	8001f70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2221      	movs	r2, #33	; 0x21
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}  
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b004      	add	sp, #16
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	ffffc00f 	.word	0xffffc00f

08001c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Start_IT+0x24>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e04f      	b.n	8001d5c <HAL_DMA_Start_IT+0xc4>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2221      	movs	r2, #33	; 0x21
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d13a      	bne.n	8001d46 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2221      	movs	r2, #33	; 0x21
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f90f 	bl	8001f18 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	210e      	movs	r1, #14
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00f      	b.n	8001d34 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	210a      	movs	r1, #10
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2104      	movs	r1, #4
 8001d30:	438a      	bics	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e007      	b.n	8001d56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d4e:	2317      	movs	r3, #23
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001d56:	2317      	movs	r3, #23
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
} 
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b006      	add	sp, #24
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2221      	movs	r2, #33	; 0x21
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d008      	beq.n	8001d8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e020      	b.n	8001dcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	210e      	movs	r1, #14
 8001d96:	438a      	bics	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	438a      	bics	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2221      	movs	r2, #33	; 0x21
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d024      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x72>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4013      	ands	r3, r2
 8001e02:	d020      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d107      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4091      	lsls	r1, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x66>
 8001e38:	e06a      	b.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	0010      	movs	r0, r2
 8001e42:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	e064      	b.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_DMA_IRQHandler+0xda>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d027      	beq.n	8001eae <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d10b      	bne.n	8001e82 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	210a      	movs	r1, #10
 8001e76:	438a      	bics	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2221      	movs	r2, #33	; 0x21
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	4091      	lsls	r1, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d036      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001eac:	e030      	b.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d028      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d024      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	210e      	movs	r1, #14
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4091      	lsls	r1, r2
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	4798      	blx	r3
    }
   }
}  
 8001f0e:	e7ff      	b.n	8001f10 <HAL_DMA_IRQHandler+0x13c>
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4091      	lsls	r1, r2
 8001f32:	000a      	movs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d108      	bne.n	8001f58 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f56:	e007      	b.n	8001f68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x30>)
 8001f7e:	4694      	mov	ip, r2
 8001f80:	4463      	add	r3, ip
 8001f82:	2114      	movs	r1, #20
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7fe f8bf 	bl	8000108 <__udivsi3>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x34>)
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	bffdfff8 	.word	0xbffdfff8
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e14f      	b.n	8002258 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4091      	lsls	r1, r2
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d100      	bne.n	8001fd0 <HAL_GPIO_Init+0x28>
 8001fce:	e140      	b.n	8002252 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	0013      	movs	r3, r2
 8002000:	43da      	mvns	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	2201      	movs	r2, #1
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0xea>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b12      	cmp	r3, #18
 8002090:	d123      	bne.n	80020da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	58d3      	ldr	r3, [r2, r3]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2207      	movs	r2, #7
 80020a4:	4013      	ands	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2107      	movs	r1, #7
 80020be:	400b      	ands	r3, r1
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	409a      	lsls	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	6939      	ldr	r1, [r7, #16]
 80020d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	409a      	lsls	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2203      	movs	r2, #3
 80020f8:	401a      	ands	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	055b      	lsls	r3, r3, #21
 8002116:	4013      	ands	r3, r2
 8002118:	d100      	bne.n	800211c <HAL_GPIO_Init+0x174>
 800211a:	e09a      	b.n	8002252 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211c:	4b54      	ldr	r3, [pc, #336]	; (8002270 <HAL_GPIO_Init+0x2c8>)
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_GPIO_Init+0x2c8>)
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	4b51      	ldr	r3, [pc, #324]	; (8002270 <HAL_GPIO_Init+0x2c8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002134:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_GPIO_Init+0x2cc>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	589b      	ldr	r3, [r3, r2]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2203      	movs	r2, #3
 8002146:	4013      	ands	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	43da      	mvns	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	2390      	movs	r3, #144	; 0x90
 800215c:	05db      	lsls	r3, r3, #23
 800215e:	429a      	cmp	r2, r3
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x1e2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1de>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a43      	ldr	r2, [pc, #268]	; (800227c <HAL_GPIO_Init+0x2d4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1da>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a42      	ldr	r2, [pc, #264]	; (8002280 <HAL_GPIO_Init+0x2d8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1d6>
 800217a:	2303      	movs	r3, #3
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x1e4>
 800217e:	2305      	movs	r3, #5
 8002180:	e004      	b.n	800218c <HAL_GPIO_Init+0x1e4>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x1e4>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x1e4>
 800218a:	2300      	movs	r3, #0
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	2103      	movs	r1, #3
 8002190:	400a      	ands	r2, r1
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4093      	lsls	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219c:	4935      	ldr	r1, [pc, #212]	; (8002274 <HAL_GPIO_Init+0x2cc>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021aa:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43da      	mvns	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	4013      	ands	r3, r2
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43da      	mvns	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	4013      	ands	r3, r2
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	035b      	lsls	r3, r3, #13
 8002216:	4013      	ands	r3, r2
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43da      	mvns	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	039b      	lsls	r3, r3, #14
 8002240:	4013      	ands	r3, r2
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_GPIO_Init+0x2dc>)
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	40da      	lsrs	r2, r3
 8002260:	1e13      	subs	r3, r2, #0
 8002262:	d000      	beq.n	8002266 <HAL_GPIO_Init+0x2be>
 8002264:	e6a8      	b.n	8001fb8 <HAL_GPIO_Init+0x10>
  } 
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b006      	add	sp, #24
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	48000400 	.word	0x48000400
 800227c:	48000800 	.word	0x48000800
 8002280:	48000c00 	.word	0x48000c00
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	000a      	movs	r2, r1
 8002292:	1cbb      	adds	r3, r7, #2
 8002294:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	1cba      	adds	r2, r7, #2
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	4013      	ands	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
  }
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b004      	add	sp, #16
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	0008      	movs	r0, r1
 80022cc:	0011      	movs	r1, r2
 80022ce:	1cbb      	adds	r3, r7, #2
 80022d0:	1c02      	adds	r2, r0, #0
 80022d2:	801a      	strh	r2, [r3, #0]
 80022d4:	1c7b      	adds	r3, r7, #1
 80022d6:	1c0a      	adds	r2, r1, #0
 80022d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022da:	1c7b      	adds	r3, r7, #1
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e2:	1cbb      	adds	r3, r7, #2
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ec:	1cbb      	adds	r3, r7, #2
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e303      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x1e>
 8002318:	e08d      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800231a:	4bc4      	ldr	r3, [pc, #784]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	220c      	movs	r2, #12
 8002320:	4013      	ands	r3, r2
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00e      	beq.n	8002344 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002326:	4bc1      	ldr	r3, [pc, #772]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	220c      	movs	r2, #12
 800232c:	4013      	ands	r3, r2
 800232e:	2b08      	cmp	r3, #8
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x64>
 8002332:	4bbe      	ldr	r3, [pc, #760]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	401a      	ands	r2, r3
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	429a      	cmp	r2, r3
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4bb9      	ldr	r3, [pc, #740]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	d100      	bne.n	8002352 <HAL_RCC_OscConfig+0x56>
 8002350:	e070      	b.n	8002434 <HAL_RCC_OscConfig+0x138>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <HAL_RCC_OscConfig+0x60>
 800235a:	e06b      	b.n	8002434 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e2da      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x7c>
 8002368:	4bb0      	ldr	r3, [pc, #704]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4baf      	ldr	r3, [pc, #700]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	0249      	lsls	r1, r1, #9
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e02f      	b.n	80023d8 <HAL_RCC_OscConfig+0xdc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x9e>
 8002380:	4baa      	ldr	r3, [pc, #680]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4ba9      	ldr	r3, [pc, #676]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002386:	49aa      	ldr	r1, [pc, #680]	; (8002630 <HAL_RCC_OscConfig+0x334>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	4ba7      	ldr	r3, [pc, #668]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4ba6      	ldr	r3, [pc, #664]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002392:	49a8      	ldr	r1, [pc, #672]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002394:	400a      	ands	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e01e      	b.n	80023d8 <HAL_RCC_OscConfig+0xdc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d10e      	bne.n	80023c0 <HAL_RCC_OscConfig+0xc4>
 80023a2:	4ba2      	ldr	r3, [pc, #648]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4ba1      	ldr	r3, [pc, #644]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	02c9      	lsls	r1, r1, #11
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	4b9e      	ldr	r3, [pc, #632]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b9d      	ldr	r3, [pc, #628]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0249      	lsls	r1, r1, #9
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xdc>
 80023c0:	4b9a      	ldr	r3, [pc, #616]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b99      	ldr	r3, [pc, #612]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023c6:	499a      	ldr	r1, [pc, #616]	; (8002630 <HAL_RCC_OscConfig+0x334>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	4b97      	ldr	r3, [pc, #604]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b96      	ldr	r3, [pc, #600]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023d2:	4998      	ldr	r1, [pc, #608]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d014      	beq.n	800240a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe02 	bl	8000fe8 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ea:	f7fe fdfd 	bl	8000fe8 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e28c      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fc:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	4013      	ands	r3, r2
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0xee>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fded 	bl	8000fe8 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fde8 	bl	8000fe8 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e277      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	4013      	ands	r3, r2
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x118>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d100      	bne.n	8002442 <HAL_RCC_OscConfig+0x146>
 8002440:	e069      	b.n	8002516 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	220c      	movs	r2, #12
 8002448:	4013      	ands	r3, r2
 800244a:	d00b      	beq.n	8002464 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800244c:	4b77      	ldr	r3, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	220c      	movs	r2, #12
 8002452:	4013      	ands	r3, r2
 8002454:	2b08      	cmp	r3, #8
 8002456:	d11c      	bne.n	8002492 <HAL_RCC_OscConfig+0x196>
 8002458:	4b74      	ldr	r3, [pc, #464]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	025b      	lsls	r3, r3, #9
 8002460:	4013      	ands	r3, r2
 8002462:	d116      	bne.n	8002492 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002464:	4b71      	ldr	r3, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e24d      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	22f8      	movs	r2, #248	; 0xf8
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00da      	lsls	r2, r3, #3
 800248a:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002490:	e041      	b.n	8002516 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d024      	beq.n	80024e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249a:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fd9f 	bl	8000fe8 <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe fd9a 	bl	8000fe8 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e229      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	22f8      	movs	r2, #248	; 0xf8
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00da      	lsls	r2, r3, #3
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e018      	b.n	8002516 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e4:	4b51      	ldr	r3, [pc, #324]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	438a      	bics	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd7a 	bl	8000fe8 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fd75 	bl	8000fe8 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e204      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d1f1      	bne.n	80024fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2208      	movs	r2, #8
 800251c:	4013      	ands	r3, r2
 800251e:	d036      	beq.n	800258e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d019      	beq.n	800255c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002528:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800252a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252c:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800252e:	2101      	movs	r1, #1
 8002530:	430a      	orrs	r2, r1
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7fe fd58 	bl	8000fe8 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fd53 	bl	8000fe8 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1e2      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d0f1      	beq.n	800253e <HAL_RCC_OscConfig+0x242>
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800255e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002562:	2101      	movs	r1, #1
 8002564:	438a      	bics	r2, r1
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7fe fd3e 	bl	8000fe8 <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe fd39 	bl	8000fe8 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1c8      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d1f1      	bne.n	8002572 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2204      	movs	r2, #4
 8002594:	4013      	ands	r3, r2
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x29e>
 8002598:	e0b6      	b.n	8002708 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	055b      	lsls	r3, r3, #21
 80025aa:	4013      	ands	r3, r2
 80025ac:	d111      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0549      	lsls	r1, r1, #21
 80025b8:	430a      	orrs	r2, r1
 80025ba:	61da      	str	r2, [r3, #28]
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x330>)
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	055b      	lsls	r3, r3, #21
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ca:	231f      	movs	r3, #31
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d11a      	bne.n	8002614 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0049      	lsls	r1, r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ec:	f7fe fcfc 	bl	8000fe8 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7fe fcf7 	bl	8000fe8 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	; 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e186      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10f      	bne.n	800263c <HAL_RCC_OscConfig+0x340>
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_RCC_OscConfig+0x330>)
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	4b02      	ldr	r3, [pc, #8]	; (800262c <HAL_RCC_OscConfig+0x330>)
 8002622:	2101      	movs	r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	621a      	str	r2, [r3, #32]
 8002628:	e036      	b.n	8002698 <HAL_RCC_OscConfig+0x39c>
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	fffeffff 	.word	0xfffeffff
 8002634:	fffbffff 	.word	0xfffbffff
 8002638:	40007000 	.word	0x40007000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x362>
 8002644:	4bb6      	ldr	r3, [pc, #728]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	4bb5      	ldr	r3, [pc, #724]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	621a      	str	r2, [r3, #32]
 8002650:	4bb3      	ldr	r3, [pc, #716]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	4bb2      	ldr	r3, [pc, #712]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002656:	2104      	movs	r1, #4
 8002658:	438a      	bics	r2, r1
 800265a:	621a      	str	r2, [r3, #32]
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x39c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x384>
 8002666:	4bae      	ldr	r3, [pc, #696]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	4bad      	ldr	r3, [pc, #692]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800266c:	2104      	movs	r1, #4
 800266e:	430a      	orrs	r2, r1
 8002670:	621a      	str	r2, [r3, #32]
 8002672:	4bab      	ldr	r3, [pc, #684]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	4baa      	ldr	r3, [pc, #680]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	621a      	str	r2, [r3, #32]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x39c>
 8002680:	4ba7      	ldr	r3, [pc, #668]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	4ba6      	ldr	r3, [pc, #664]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	621a      	str	r2, [r3, #32]
 800268c:	4ba4      	ldr	r3, [pc, #656]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800268e:	6a1a      	ldr	r2, [r3, #32]
 8002690:	4ba3      	ldr	r3, [pc, #652]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002692:	2104      	movs	r1, #4
 8002694:	438a      	bics	r2, r1
 8002696:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d014      	beq.n	80026ca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fca2 	bl	8000fe8 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e009      	b.n	80026be <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fc9d 	bl	8000fe8 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	4a9b      	ldr	r2, [pc, #620]	; (8002924 <HAL_RCC_OscConfig+0x628>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e12b      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	4b98      	ldr	r3, [pc, #608]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x3ae>
 80026c8:	e013      	b.n	80026f2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fc8d 	bl	8000fe8 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	e009      	b.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fc88 	bl	8000fe8 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	4a91      	ldr	r2, [pc, #580]	; (8002924 <HAL_RCC_OscConfig+0x628>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e116      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	4b8d      	ldr	r3, [pc, #564]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f2:	231f      	movs	r3, #31
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b88      	ldr	r3, [pc, #544]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	4b87      	ldr	r3, [pc, #540]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002702:	4989      	ldr	r1, [pc, #548]	; (8002928 <HAL_RCC_OscConfig+0x62c>)
 8002704:	400a      	ands	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	4013      	ands	r3, r2
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d12a      	bne.n	8002770 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800271a:	4b81      	ldr	r3, [pc, #516]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800271c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271e:	4b80      	ldr	r3, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002720:	2104      	movs	r1, #4
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002726:	4b7e      	ldr	r3, [pc, #504]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272a:	4b7d      	ldr	r3, [pc, #500]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800272c:	2101      	movs	r1, #1
 800272e:	430a      	orrs	r2, r1
 8002730:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc59 	bl	8000fe8 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800273c:	f7fe fc54 	bl	8000fe8 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0e3      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d0f1      	beq.n	800273c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002758:	4b71      	ldr	r3, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	22f8      	movs	r2, #248	; 0xf8
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	00da      	lsls	r2, r3, #3
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800276a:	430a      	orrs	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
 800276e:	e034      	b.n	80027da <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	3305      	adds	r3, #5
 8002776:	d111      	bne.n	800279c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800277a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800277e:	2104      	movs	r1, #4
 8002780:	438a      	bics	r2, r1
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	22f8      	movs	r2, #248	; 0xf8
 800278a:	4393      	bics	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	00da      	lsls	r2, r3, #3
 8002794:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002796:	430a      	orrs	r2, r1
 8002798:	635a      	str	r2, [r3, #52]	; 0x34
 800279a:	e01e      	b.n	80027da <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800279c:	4b60      	ldr	r3, [pc, #384]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800279e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a0:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027a2:	2104      	movs	r1, #4
 80027a4:	430a      	orrs	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027a8:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ac:	4b5c      	ldr	r3, [pc, #368]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fc18 	bl	8000fe8 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027be:	f7fe fc13 	bl	8000fe8 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0a2      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f1      	bne.n	80027be <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4e8>
 80027e2:	e097      	b.n	8002914 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	220c      	movs	r2, #12
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d100      	bne.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d14c      	bne.n	8002894 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002800:	494a      	ldr	r1, [pc, #296]	; (800292c <HAL_RCC_OscConfig+0x630>)
 8002802:	400a      	ands	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe fbef 	bl	8000fe8 <HAL_GetTick>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fbea 	bl	8000fe8 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e079      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	049b      	lsls	r3, r3, #18
 800282a:	4013      	ands	r3, r2
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282e:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	220f      	movs	r2, #15
 8002834:	4393      	bics	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800283e:	430a      	orrs	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x634>)
 8002848:	4013      	ands	r3, r2
 800284a:	0019      	movs	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	431a      	orrs	r2, r3
 8002856:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0449      	lsls	r1, r1, #17
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fbbd 	bl	8000fe8 <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fbb8 	bl	8000fe8 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e047      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	049b      	lsls	r3, r3, #18
 800288e:	4013      	ands	r3, r2
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x578>
 8002892:	e03f      	b.n	8002914 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 800289a:	4924      	ldr	r1, [pc, #144]	; (800292c <HAL_RCC_OscConfig+0x630>)
 800289c:	400a      	ands	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fba2 	bl	8000fe8 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fb9d 	bl	8000fe8 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e02c      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	049b      	lsls	r3, r3, #18
 80028c4:	4013      	ands	r3, r2
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x5ae>
 80028c8:	e024      	b.n	8002914 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01f      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x624>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	220f      	movs	r2, #15
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	23f0      	movs	r3, #240	; 0xf0
 8002904:	039b      	lsls	r3, r3, #14
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b008      	add	sp, #32
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40021000 	.word	0x40021000
 8002924:	00001388 	.word	0x00001388
 8002928:	efffffff 	.word	0xefffffff
 800292c:	feffffff 	.word	0xfeffffff
 8002930:	ffc2ffff 	.word	0xffc2ffff

08002934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b3      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d911      	bls.n	800297a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	4393      	bics	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	4013      	ands	r3, r2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e09a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2202      	movs	r2, #2
 8002980:	4013      	ands	r3, r2
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2204      	movs	r2, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d006      	beq.n	800299c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800298e:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002994:	21e0      	movs	r1, #224	; 0xe0
 8002996:	00c9      	lsls	r1, r1, #3
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	22f0      	movs	r2, #240	; 0xf0
 80029a2:	4393      	bics	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d114      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06e      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	049b      	lsls	r3, r3, #18
 80029e2:	4013      	ands	r3, r2
 80029e4:	d108      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e062      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e05b      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4393      	bics	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe faec 	bl	8000fe8 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a16:	f7fe fae7 	bl	8000fe8 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_RCC_ClockConfig+0x18c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e042      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	220c      	movs	r2, #12
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1ec      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d211      	bcs.n	8002a6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x184>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e020      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2204      	movs	r2, #4
 8002a74:	4013      	ands	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_RCC_ClockConfig+0x190>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a8c:	f000 f820 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a90:	0001      	movs	r1, r0
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x188>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	220f      	movs	r2, #15
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x194>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x198>)
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe fa57 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b004      	add	sp, #16
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	00001388 	.word	0x00001388
 8002ac4:	fffff8ff 	.word	0xfffff8ff
 8002ac8:	08002c68 	.word	0x08002c68
 8002acc:	20000010 	.word	0x20000010

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b08f      	sub	sp, #60	; 0x3c
 8002ad4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ad6:	2314      	movs	r3, #20
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002adc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ade:	c313      	stmia	r3!, {r0, r1, r4}
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aea:	c313      	stmia	r3!, {r0, r1, r4}
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af8:	2300      	movs	r3, #0
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	220c      	movs	r2, #12
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d002      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x4a>
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d003      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x50>
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b1e:	e02d      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	220f      	movs	r2, #15
 8002b26:	4013      	ands	r3, r2
 8002b28:	2214      	movs	r2, #20
 8002b2a:	18ba      	adds	r2, r7, r2
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	220f      	movs	r2, #15
 8002b36:	4013      	ands	r3, r2
 8002b38:	1d3a      	adds	r2, r7, #4
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	4013      	ands	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b4c:	f7fd fadc 	bl	8000108 <__udivsi3>
 8002b50:	0003      	movs	r3, r0
 8002b52:	001a      	movs	r2, r3
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	4353      	muls	r3, r2
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5a:	e009      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5e:	000a      	movs	r2, r1
 8002b60:	0152      	lsls	r2, r2, #5
 8002b62:	1a52      	subs	r2, r2, r1
 8002b64:	0193      	lsls	r3, r2, #6
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	185b      	adds	r3, r3, r1
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b00f      	add	sp, #60	; 0x3c
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	08002c08 	.word	0x08002c08
 8002b8c:	08002c18 	.word	0x08002c18
 8002b90:	40021000 	.word	0x40021000
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	4d0c      	ldr	r5, [pc, #48]	; (8002bd0 <__libc_init_array+0x38>)
 8002b9e:	4c0d      	ldr	r4, [pc, #52]	; (8002bd4 <__libc_init_array+0x3c>)
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	42a6      	cmp	r6, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	2600      	movs	r6, #0
 8002baa:	f000 f821 	bl	8002bf0 <_init>
 8002bae:	4d0a      	ldr	r5, [pc, #40]	; (8002bd8 <__libc_init_array+0x40>)
 8002bb0:	4c0a      	ldr	r4, [pc, #40]	; (8002bdc <__libc_init_array+0x44>)
 8002bb2:	1b64      	subs	r4, r4, r5
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	42a6      	cmp	r6, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	00b3      	lsls	r3, r6, #2
 8002bbe:	58eb      	ldr	r3, [r5, r3]
 8002bc0:	4798      	blx	r3
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	00b3      	lsls	r3, r6, #2
 8002bc8:	58eb      	ldr	r3, [r5, r3]
 8002bca:	4798      	blx	r3
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08002c78 	.word	0x08002c78
 8002bd4:	08002c78 	.word	0x08002c78
 8002bd8:	08002c78 	.word	0x08002c78
 8002bdc:	08002c7c 	.word	0x08002c7c

08002be0 <memset>:
 8002be0:	0003      	movs	r3, r0
 8002be2:	1812      	adds	r2, r2, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	7019      	strb	r1, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
